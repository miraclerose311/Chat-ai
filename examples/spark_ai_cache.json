{"key": "web_search:2022 USA national auto sales by brand", "value": "[{'title': 'Full-Year 2022 National Auto Sales By Brand', 'link': 'https://www.carpro.com/blog/full-year-2022-national-auto-sales-by-brand', 'snippet': 'Jan 12, 2023 ... Full-Year 2022 National Auto Sales By Brand ; 1. Toyota, 1,849,751 ; 2. Ford, 1,767,439 ; 3. Chevrolet, 1,502,389 ; 4. Honda, 881,201\\xa0...'}, {'title': '2022 U.S. Auto Sales Figures by Brand | GCBC', 'link': 'https://www.goodcarbadcar.net/2022-us-vehicle-sales-figures-by-brand/', 'snippet': '2022 US Vehicle Sales Figures By Brand. Comprehensive data tables and charts for automotive sales in the United States. Home.'}, {'title': 'USA - Flash report, Automotive sales volume, 2023 - MarkLines ...', 'link': 'https://www.marklines.com/en/statistics/flash_sales/automotive-sales-in-usa-by-month', 'snippet': 'Light vehicle seasonally adjusted annualized sales (SAAR) for February 2023 was 15.19 million units versus 13.96 million units one year ago. With its vehicle\\xa0...'}, {'title': 'August U.S. auto sales: Toyota, Honda skid again; Ford, Hyundai ...', 'link': 'https://www.autonews.com/sales/august-us-auto-sales-toyota-honda-skid-again-ford-hyundai-kia-post-double-digit-august-gains', 'snippet': 'Sep 1, 2022 ... LMC Automotive on Friday slashed its outlook for 2022 sales to 13.8 million from 14.3 million. S&P Global Mobility last week reduced its\\xa0...'}, {'title': 'NADA Releases Third Quarter 2022 U.S. Auto Sales Analysis | NADA', 'link': 'https://www.nada.org/nada/press-releases/nada-releases-third-quarter-2022-us-auto-sales-analysis', 'snippet': 'Oct 12, 2022 ... The third quarter of 2022 closed with a new light-vehicle sales totaling a quarterly average SAAR of 13.3 million units, down slightly from a\\xa0...'}, {'title': 'Full-Year 2022 National Auto Sales By Brand', 'link': 'https://www.mysanantonio.com/news/article/Full-Year-2022-National-Auto-Sales-By-Brand-17713421.php', 'snippet': 'Jan 12, 2023 ... ... brand for the full year of 2022 and how the numbers fared versus the year of 2021: Brand. 2022 U.S. Sales. VS 2021. 1. Toyota, 1,849,751, Down 9\\xa0...'}, {'title': 'NADA Issues Analysis of 2022 Auto Sales and 2023 Sales Forecast ...', 'link': 'https://www.nada.org/nada/press-releases/nada-issues-analysis-2022-auto-sales-and-2023-sales-forecast', 'snippet': 'Jan 11, 2023 ... In 2023, NADA anticipates new-vehicle sales of 14.6 million units \u2013 an increase of 6.6% from 2022. At the macro level, inflation has begun to\\xa0...'}, {'title': 'Hybrid-Electric, Plug-in Hybrid-Electric and Electric Vehicle Sales ...', 'link': 'https://www.bts.gov/content/gasoline-hybrid-and-electric-vehicle-sales', 'snippet': '21, 2022. Publications: National Transportation Statistics Table 1-19.'}, {'title': 'Market Beat | NADA', 'link': 'https://www.nada.org/nada/research-and-data/market-beat', 'snippet': '... U.S. new light vehicle sales; it replaces the NADA Monthly Sales Recap ... 2022 Archives. December NADA Market Beat: 2022 New Light-Vehicle Sales top\\xa0...'}, {'title': 'Light Duty Electric Drive Vehicles Monthly Sales Updates | Argonne ...', 'link': 'https://www.anl.gov/esia/light-duty-electric-drive-vehicles-monthly-sales-updates', 'snippet': '... United States, up 68.1% from the sales in May 2022. PEVs captured 8.36% of ... Vehicle Emissions,\u201d Argonne National Laboratory, Lemont, IL USA, ANL/ESD-22\\xa0...'}]"}
{"key": "Given a Query and a list of Google Search Results, return the link\nfrom a reputable website which contains the data set to answer the question. {''}\nQuery:2022 USA national auto sales by brand\nGoogle Search Results: \n```\n[{'title': 'Full-Year 2022 National Auto Sales By Brand', 'link': 'https://www.carpro.com/blog/full-year-2022-national-auto-sales-by-brand', 'snippet': 'Jan 12, 2023 ... Full-Year 2022 National Auto Sales By Brand ; 1. Toyota, 1,849,751 ; 2. Ford, 1,767,439 ; 3. Chevrolet, 1,502,389 ; 4. Honda, 881,201\\xa0...'}, {'title': '2022 U.S. Auto Sales Figures by Brand | GCBC', 'link': 'https://www.goodcarbadcar.net/2022-us-vehicle-sales-figures-by-brand/', 'snippet': '2022 US Vehicle Sales Figures By Brand. Comprehensive data tables and charts for automotive sales in the United States. Home.'}, {'title': 'USA - Flash report, Automotive sales volume, 2023 - MarkLines ...', 'link': 'https://www.marklines.com/en/statistics/flash_sales/automotive-sales-in-usa-by-month', 'snippet': 'Light vehicle seasonally adjusted annualized sales (SAAR) for February 2023 was 15.19 million units versus 13.96 million units one year ago. With its vehicle\\xa0...'}, {'title': 'August U.S. auto sales: Toyota, Honda skid again; Ford, Hyundai ...', 'link': 'https://www.autonews.com/sales/august-us-auto-sales-toyota-honda-skid-again-ford-hyundai-kia-post-double-digit-august-gains', 'snippet': 'Sep 1, 2022 ... LMC Automotive on Friday slashed its outlook for 2022 sales to 13.8 million from 14.3 million. S&P Global Mobility last week reduced its\\xa0...'}, {'title': 'NADA Releases Third Quarter 2022 U.S. Auto Sales Analysis | NADA', 'link': 'https://www.nada.org/nada/press-releases/nada-releases-third-quarter-2022-us-auto-sales-analysis', 'snippet': 'Oct 12, 2022 ... The third quarter of 2022 closed with a new light-vehicle sales totaling a quarterly average SAAR of 13.3 million units, down slightly from a\\xa0...'}, {'title': 'Full-Year 2022 National Auto Sales By Brand', 'link': 'https://www.mysanantonio.com/news/article/Full-Year-2022-National-Auto-Sales-By-Brand-17713421.php', 'snippet': 'Jan 12, 2023 ... ... brand for the full year of 2022 and how the numbers fared versus the year of 2021: Brand. 2022 U.S. Sales. VS 2021. 1. Toyota, 1,849,751, Down 9\\xa0...'}, {'title': 'NADA Issues Analysis of 2022 Auto Sales and 2023 Sales Forecast ...', 'link': 'https://www.nada.org/nada/press-releases/nada-issues-analysis-2022-auto-sales-and-2023-sales-forecast', 'snippet': 'Jan 11, 2023 ... In 2023, NADA anticipates new-vehicle sales of 14.6 million units \u2013 an increase of 6.6% from 2022. At the macro level, inflation has begun to\\xa0...'}, {'title': 'Hybrid-Electric, Plug-in Hybrid-Electric and Electric Vehicle Sales ...', 'link': 'https://www.bts.gov/content/gasoline-hybrid-and-electric-vehicle-sales', 'snippet': '21, 2022. Publications: National Transportation Statistics Table 1-19.'}, {'title': 'Market Beat | NADA', 'link': 'https://www.nada.org/nada/research-and-data/market-beat', 'snippet': '... U.S. new light vehicle sales; it replaces the NADA Monthly Sales Recap ... 2022 Archives. December NADA Market Beat: 2022 New Light-Vehicle Sales top\\xa0...'}, {'title': 'Light Duty Electric Drive Vehicles Monthly Sales Updates | Argonne ...', 'link': 'https://www.anl.gov/esia/light-duty-electric-drive-vehicles-monthly-sales-updates', 'snippet': '... United States, up 68.1% from the sales in May 2022. PEVs captured 8.36% of ... Vehicle Emissions,\u201d Argonne National Laboratory, Lemont, IL USA, ANL/ESD-22\\xa0...'}]\n```\nThe answer MUST contain the url link only\n", "value": "https://www.carpro.com/blog/full-year-2022-national-auto-sales-by-brand"}
{"key": "https://www.carpro.com/blog/full-year-2022-national-auto-sales-by-brand", "value": "\n\n\nFull-Year 2022 National Auto Sales By Brand\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  <img  src=\"https://data.adxcel-ec2.com/pixel/?ad_log=referer&amp;action=lead&amp;pixid=b719b86c-f9d4-4c28-a8a8-135a5ff2099d\" width=\"1\" height=\"1\" border=\"0\">\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSearch\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate Account\n\n\n\n\n\n\n\n\nLogin\n\n\n\n\n\n\n\n\nCarPro You have a friend.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nListen Live\n\n\n\n\n\nBuy a Car\n\nFind a CarPro Friend\nFind a Car\n\nSell Your Car\nCar Buying Resources\n\nCar Reviews\nFAQs\nNews\nLaura's Auto News\n\nRadio Show\n\nRadio Schedule\nRadio Blog\nDealer True Stories\nCarPro Radio Show Podcast\nDriving N Heels Podcast\nCarPro Radio Show Newsletter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nListen Live\n\n\n\n\n\n\n\nMenu\n\n\n\n\n\n\n\n\n\n\n\n\nNews,\u00a0\n          \n\nAuto Sales\n\n\nFull-Year 2022 National Auto Sales By Brand\nWritten by Jerry Reynolds\nJanuary 12, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShare: \n\n\n\nFacebook\n\n\n\n\n\n\n\nTwitter\n\n\n\n\n\n\n\nLinkedIn\n\n\n\n\n\n\n\nEmail\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIt was a challenging year for the auto industry, primarily due to the microchip shortages, and certainly rising interest rates did not help.\u00a0 There was also a noticeable lack of incentives from the automakers, and lease deals were not nearly as good as in years past.\n\nDecember showed some sparks of life for many car companies, as sales rose 7.2%, but not enough to put the sales numbers over the 14 million mark, making 2022 sales the lowest since 2011.\nGeneral Motors regained the #1 sales leadership spot, wrestling it away from Toyota, which was #1 in 2021.\u00a0 Ford F-Series trucks retained the title of #1 truck in America for 46 straight years and the #1 selling vehicle overall for 41 straight years.\nHere are your winners and losers by brand for the full year of 2022 and how the numbers fared versus the year of 2021:\n\u00a0\n\u00a0\n\n\n\u00a0\n\nBrand\n\n\n\u00a02022 U.S. Sales\n\n\nVS 2021\n\n\n\n1.\nToyota\n1,849,751 \u00a0\nDown 9%\n\n\n2.\nFord\n1,767,439\u00a0\u00a0\nDown 2%\n\n\n3.\nChevrolet\n1,502,389\u00a0\u00a0\nUp 6%\n\n\n4.\nHonda\n881,201\u00a0\nDown 33%\n\n\n5.\nHyundai\n724,265\u00a0\nDown 2%\n\n\n6.\nKia\n693,549\u00a0\nDown 1%\n\n\n7.\nJeep\n684,612\u00a0\nDown 12%\n\n\n8.\nNissan\n682,731\u00a0\u00a0\nDown 25%\n\n\n9.\nSubaru\u00a0\n556,581\u00a0\u00a0\nDown 5%\n\n\n10.\u00a0\nRam Trucks\n545,194\u00a0\nDown 16%\n\n\n11.\nGMC\n517,649\u00a0\u00a0\nUp 7%\n\n\n12.\nMercedes-Benz\n350,949\u00a0\nUp 7%\n\n\n13.\nBMW\n332,388\u00a0\nDown 1%\n\n\n14.\nVolkswagen\n301,069\u00a0\nDown 20%\n\n\n15.\nMazda\n294,908\u00a0\nDown 11%\n\n\n16.\nLexus\n258,704\u00a0\nDown 15%\n\n\n17.\nDodge\n190,793\u00a0\u00a0\nDown 12%\n\n\n18.\nAudi\n186,875\u00a0\nDown 5%\n\n\n19.\nCadillac\n134,726\u00a0\nUp 14%\n\n\n20.\nChrysler\u00a0\n112,713\nDown 2%\n\n\n21.\nBuick\n103,519\u00a0\nDown 42%\n\n\n22.\nAcura\n102,306\u00a0\u00a0\nDown 35%\n\n\n23.\nVolvo\n102,038\u00a0\nDown 16%\n\n\n24.\nMitsubishi\n102,037 \nDown 16%\n\n\n25.\nLincoln\n83,486\u00a0\nDown 4%\n\n\n26.\nPorsche\n\n70,065\n\n\nFlat\n\n\n\n27.\nGenesis\n\n56,410\u00a0\n\n\nUp 14%\n\n\n\n28.\nINFINITI\n46,619\u00a0\nDown 20%\n\n\n29.\nMINI\n29,504\u00a0\nDown 1%\n\n\n30.\nAlfa Romeo\n12,845\u00a0\u00a0\nDown 30%\n\n\n31.\nMaserati\n\u00a06,413\u00a0\nDown 10%\n\n\n32.\nBentley\n3,975\u00a0 \u00a0 \u00a0\u00a0\nFLAT\n\n\n33.\nLamborghini\n3,134\u00a0\nUp 3%\n\n\n34.\nFiat\u00a0\n915\u00a0\u00a0\nDown 61%\n\n\n35.\nMcLaren\n\n840\u00a0\n\n\nDown 35%\n\n\n\n36.\nRolls-Royce\n460\u00a0\nUp 7%\n\n\n\n\n\u00a0\nNote: Jaguar and Land Rover have not reported 2022 sales. Also, the all-electric makes like Tesla, Lucid, Karma, and Polestar do not report sales, only how many vehicles were produced, but that is not a reflection of actual sales since we don\u2019t know how many were built, but not sold. \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\n\nPhoto Credit: Toyota.\n\n\n\n\n\n\n\nShare: \n\n\n\nFacebook\n\n\n\n\n\n\n\nTwitter\n\n\n\n\n\n\n\nLinkedIn\n\n\n\n\n\n\n\nEmail\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJerry Reynolds\n\n\nFrom police officer to top-selling Ford dealer to on-air car expert, Jerry helms our weekly radio show. Since selling his dealerships in 2006, Jerry has pursued his top three passions: helping consumers have a great car buying experience, supporting the military and first responders, being a loyal servant to his dog! While Jerry admits to hitting the pedal to the metal on test drives, it's all the service of finding out just how fast he can go from 0 to 60.\n\n\n\n\n\nShare On Facebook\n\n\n\n\n\n\n\nShare On Twitter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRecent Posts\n\n\n\n\n\n\n\n\n\n\nCrime Wave:\u00a0 Two Vehicles Stolen Every Minute\n\n\n\n            \n              Read Post\n            \n          \n\n\n\n\n\n\n\n\n\n\n\n\n\nSummer Road Trip Checklist For Your Car\n\n\n\n            \n              Read Post\n            \n          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCarPro\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFollow us on Facebook\n\n\n\n\n\nFollow us on Twitter\n\n\n\n\n\n\nFollow us on Youtube\n\n\n\n\n\n\nFollow us on Instagram\n\n\n\n\n\n\n\n\nFind a CarPro Friend\n\nFind a Car\n\nRadio Show\n\nAbout Us\n\nWhy CarPro\n\n\nFAQs\n\nNews\n\nCar Reviews\n\nLaura's Auto News\n\nRadio Show Newsletter\n\n\nWebsite Help\n\nEmail the CarPro\n\nMedia Company Inquiry\n\nBecome a Radio Partner\n\nBecome a Certified CarPro\n\n\n\n\n\u00a92023 CarPro\n\n\nPrivacy Policy\nTerms Of Use\nAccessibility Statement\n\n\n\n\nCarPro requires our Certified Dealers to meet certain customer service requirements in accordance with our Certification Process and Agreement. CarPro does not broker, sell, or lease vehicles. All vehicles shown on this website are offered for sale by licensed motor vehicle dealers, unless where otherwise noted. Used vehicles are subject to prior sale. By accessing this website, you agree to the CarPro Terms of Service and Privacy Policy. We strive to update our website in a timely manner however CarPro cannot guarantee that the inventory shown will be available at the dealership.\nWe are not responsible for typographical and other errors, including data transmissions or software errors that may appear on the site. If the posted price, incentive, offer or other service is incorrect due to typographical or other error we will only be responsible for honoring the correct price, incentive or offer. We make every effort to provide you the most accurate, up-to-the-minute information however when you are ready to purchase products or services, it is your responsibility to verify with us that all details listed are accurate. Prices include all applicable rebates.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"key": "Given the following question:\n```\n2022 USA national auto sales by brand\n```\nI got the following answer from a web page:\n```\nFull-Year 2022 National Auto Sales By Brand <img src=\"https://data.adxcel-ec2.com/pixel/?ad_log=referer&amp;action=lead&amp;pixid=b719b86c-f9d4-4c28-a8a8-135a5ff2099d\" width=\"1\" height=\"1\" border=\"0\"> Search Create Account Login CarPro You have a friend. Listen Live Buy a Car Find a CarPro Friend Find a Car Sell Your Car Car Buying Resources Car Reviews FAQs News Laura's Auto News Radio Show Radio Schedule Radio Blog Dealer True Stories CarPro Radio Show Podcast Driving N Heels Podcast CarPro Radio Show Newsletter Listen Live Menu News, Auto Sales Full-Year 2022 National Auto Sales By Brand Written by Jerry Reynolds January 12, 2023 Share: Facebook Twitter LinkedIn Email It was a challenging year for the auto industry, primarily due to the microchip shortages, and certainly rising interest rates did not help. There was also a noticeable lack of incentives from the automakers, and lease deals were not nearly as good as in years past. December showed some sparks of life for many car companies, as sales rose 7.2%, but not enough to put the sales numbers over the 14 million mark, making 2022 sales the lowest since 2011. General Motors regained the #1 sales leadership spot, wrestling it away from Toyota, which was #1 in 2021. Ford F-Series trucks retained the title of #1 truck in America for 46 straight years and the #1 selling vehicle overall for 41 straight years. Here are your winners and losers by brand for the full year of 2022 and how the numbers fared versus the year of 2021: Brand 2022 U.S. Sales VS 2021 1. Toyota 1,849,751 Down 9% 2. Ford 1,767,439 Down 2% 3. Chevrolet 1,502,389 Up 6% 4. Honda 881,201 Down 33% 5. Hyundai 724,265 Down 2% 6. Kia 693,549 Down 1% 7. Jeep 684,612 Down 12% 8. Nissan 682,731 Down 25% 9. Subaru 556,581 Down 5% 10. Ram Trucks 545,194 Down 16% 11. GMC 517,649 Up 7% 12. Mercedes-Benz 350,949 Up 7% 13. BMW 332,388 Down 1% 14. Volkswagen 301,069 Down 20% 15. Mazda 294,908 Down 11% 16. Lexus 258,704 Down 15% 17. Dodge 190,793 Down 12% 18. Audi 186,875 Down 5% 19. Cadillac 134,726 Up 14% 20. Chrysler 112,713 Down 2% 21. Buick 103,519 Down 42% 22. Acura 102,306 Down 35% 23. Volvo 102,038 Down 16% 24. Mitsubishi 102,037 Down 16% 25. Lincoln 83,486 Down 4% 26. Porsche 70,065 Flat 27. Genesis 56,410 Up 14% 28. INFINITI 46,619 Down 20% 29. MINI 29,504 Down 1% 30. Alfa Romeo 12,845 Down 30% 31. Maserati 6,413 Down 10% 32. Bentley 3,975 FLAT 33. Lamborghini 3,134 Up 3% 34. Fiat 915 Down 61% 35. McLaren 840 Down 35% 36. Rolls-Royce 460 Up 7% Note: Jaguar and Land Rover have not reported 2022 sales. Also, the all-electric makes like Tesla, Lucid, Karma, and Polestar do not report sales, only how many vehicles were produced, but that is not a reflection of actual sales since we don\u2019t know how many were built, but not sold. Photo Credit: Toyota. Share: Facebook Twitter LinkedIn Email Jerry Reynolds From police officer to top-selling Ford dealer to on-air car expert, Jerry helms our weekly radio show. Since selling his dealerships in 2006, Jerry has pursued his top three passions: helping consumers have a great car buying experience, supporting the military and first responders, being a loyal servant to his dog! While Jerry admits to hitting the pedal to the metal on test drives, it's all the service of finding out just how fast he can go from 0 to 60. Share On Facebook Share On Twitter Recent Posts Crime Wave: Two Vehicles Stolen Every Minute Read Post Summer Road Trip Checklist For Your Car Read Post CarPro Follow us on Facebook Follow us on Twitter Follow us on Youtube Follow us on Instagram Find a CarPro Friend Find a Car Radio Show About Us Why CarPro FAQs News Car Reviews Laura's Auto News Radio Show Newsletter Website Help Email the CarPro Media Company Inquiry Become a Radio Partner Become a Certified CarPro \u00a92023 CarPro Privacy Policy Terms Of Use Accessibility Statement CarPro requires our Certified Dealers to meet certain customer service requirements in accordance with our Certification Process and Agreement. CarPro does not broker, sell, or lease vehicles. All vehicles shown on this website are offered for sale by licensed motor vehicle dealers, unless where otherwise noted. Used vehicles are subject to prior sale. By accessing this website, you agree to the CarPro Terms of Service and Privacy Policy. We strive to update our website in a timely manner however CarPro cannot guarantee that the inventory shown will be available at the dealership. We are not responsible for typographical and other errors, including data transmissions or software errors that may appear on the site. If the posted price, incentive, offer or other service is incorrect due to typographical or other error we will only be responsible for honoring the correct price, incentive or offer. We make every effort to provide you the most accurate, up-to-the-minute information however when you are ready to purchase products or services, it is your responsibility to verify with us that all details listed are accurate. Prices include all applicable rebates.\n```\nNow help me write a SQL query to store the answer into a temp view. \nGive each column a clearly descriptive name (no abbreviations).\nHere is an example of how to store data into a temp view:\n```\nCREATE OR REPLACE TEMP VIEW movies AS SELECT * FROM VALUES('Citizen Kane', 1941), ('Schindler's List', 1993) AS v1(title, year)\n```\n\nThe answer MUST contain query only.\n", "value": "CREATE OR REPLACE TEMP VIEW auto_sales_2022 AS SELECT * FROM VALUES\n(1, 'Toyota', 1849751, -9),\n(2, 'Ford', 1767439, -2),\n(3, 'Chevrolet', 1502389, 6),\n(4, 'Honda', 881201, -33),\n(5, 'Hyundai', 724265, -2),\n(6, 'Kia', 693549, -1),\n(7, 'Jeep', 684612, -12),\n(8, 'Nissan', 682731, -25),\n(9, 'Subaru', 556581, -5),\n(10, 'Ram Trucks', 545194, -16),\n(11, 'GMC', 517649, 7),\n(12, 'Mercedes-Benz', 350949, 7),\n(13, 'BMW', 332388, -1),\n(14, 'Volkswagen', 301069, -20),\n(15, 'Mazda', 294908, -11),\n(16, 'Lexus', 258704, -15),\n(17, 'Dodge', 190793, -12),\n(18, 'Audi', 186875, -5),\n(19, 'Cadillac', 134726, 14),\n(20, 'Chrysler', 112713, -2),\n(21, 'Buick', 103519, -42),\n(22, 'Acura', 102306, -35),\n(23, 'Volvo', 102038, -16),\n(24, 'Mitsubishi', 102037, -16),\n(25, 'Lincoln', 83486, -4),\n(26, 'Porsche', 70065, 0),\n(27, 'Genesis', 56410, 14),\n(28, 'INFINITI', 46619, -20),\n(29, 'MINI', 29504, -1),\n(30, 'Alfa Romeo', 12845, -30),\n(31, 'Maserati', 6413, -10),\n(32, 'Bentley', 3975, 0),\n(33, 'Lamborghini', 3134, 3),\n(34, 'Fiat', 915, -61),\n(35, 'McLaren', 840, -35),\n(36, 'Rolls-Royce', 460, 7)\nAS v1(rank, brand, us_sales, sales_change_percentage)"}
{"key": "You are an Apache Spark SQL expert, who can summary what a dataframe retrieves. Given an analyzed \nquery plan of a dataframe, you will \n1. convert the dataframe to SQL query. Note that an explain output contains plan \nnodes separated by `\\n`. Each plan node has its own expressions and expression ids. \n2. summary what the sql query retrieves. \n\n\n\nanalyzed_plan: \nGlobalLimit 100\n    +- LocalLimit 100\n       +- Sort [d_year ASC NULLS FIRST, sum_agg DESC NULLS LAST, brand_id ASC NULLS FIRST], true\n          +- Aggregate [d_year, i_brand, i_brand_id], [d_year, i_brand_id AS brand_id, i_brand AS brand, sum(ss_ext_sales_price) AS sum_agg]\n             +- Filter (((d_date_sk = ss_sold_date_sk) AND (ss_item_sk = i_item_sk)) AND ((i_manufact_id = 128) AND (d_moy = 11)))\n                +- Join Inner\n                   :- Join Inner\n                   :  :- SubqueryAlias dt\n                   :  :  +- SubqueryAlias spark_catalog.tpcds_sf1_delta.date_dim\n                   :  :     +- Relation spark_catalog.tpcds_sf1_delta.date_dim[d_date_sk,d_date_id,d_date,d_month_seq,d_week_seq,d_quarter_seq,d_year,d_dow,d_moy,d_dom,d_qoy,d_fy_year,d_fy_quarter_seq,d_fy_week_seq,d_day_name,d_quarter_name,d_holiday,d_weekend,d_following_holiday,d_first_dom,d_last_dom,d_same_day_ly,d_same_day_lq,d_current_day,... 4 more fields] parquet\n                   :  +- SubqueryAlias spark_catalog.tpcds_sf1_delta.store_sales\n                   :     +- Relation spark_catalog.tpcds_sf1_delta.store_sales[ss_sold_date_sk,ss_sold_time_sk,ss_item_sk,ss_customer_sk,ss_cdemo_sk,ss_hdemo_sk,ss_addr_sk,ss_store_sk,ss_promo_sk,ss_ticket_numberL,ss_quantity,ss_wholesale_cost,ss_list_price,ss_sales_price,ss_ext_discount_amt,ss_ext_sales_price,ss_ext_wholesale_cost,ss_ext_list_price,ss_ext_tax,ss_coupon_amt,ss_net_paid,ss_net_paid_inc_tax,ss_net_profit] parquet\n                   +- SubqueryAlias spark_catalog.tpcds_sf1_delta.item\n                      +- Relation spark_catalog.tpcds_sf1_delta.item[i_item_sk,i_item_id,i_rec_start_date,i_rec_end_date,i_item_desc,i_current_price,i_wholesale_cost,i_brand_id,i_brand,i_class_id,i_class,i_category_id,i_category,i_manufact_id,i_manufact,i_size,i_formulation,i_color,i_units,i_container,i_manager_id,i_product_name] parquet\n\nexplain: \nThe analyzed plan can be translated into the following SQL query:\n```sql\nSELECT\n  dt.d_year,\n  item.i_brand_id brand_id,\n  item.i_brand brand,\n  SUM(ss_ext_sales_price) sum_agg\nFROM date_dim dt, store_sales, item\nWHERE dt.d_date_sk = store_sales.ss_sold_date_sk\n  AND store_sales.ss_item_sk = item.i_item_sk\n  AND item.i_manufact_id = 128\n  AND dt.d_moy = 11\nGROUP BY dt.d_year, item.i_brand, item.i_brand_id\nORDER BY dt.d_year, sum_agg DESC, brand_id\nLIMIT 100\n```\nIn summary, this dataframe is retrieving the top 100 brands (specifically of items manufactured by manufacturer with id 128) with the highest total sales price for each year in the month of November. It presents the results sorted by year, total sales (in descending order), and brand id.\n\n\n\nanalyzed_plan: SubqueryAlias auto_sales_2022\n+- View (`auto_sales_2022`, [rank,brand,us_sales,sales_change_percentage])\n   +- Project [cast(rank as int) AS rank, cast(brand as string) AS brand, cast(us_sales as int) AS us_sales, cast(sales_change_percentage as int) AS sales_change_percentage]\n      +- Project [rank, brand, us_sales, sales_change_percentage]\n         +- SubqueryAlias v1\n            +- LocalRelation [rank, brand, us_sales, sales_change_percentage]\n\nexplain:", "value": "The analyzed plan can be translated into the following SQL query:\n```sql\nCREATE VIEW auto_sales_2022 AS\nSELECT\n  CAST(rank AS INT) AS rank,\n  CAST(brand AS STRING) AS brand,\n  CAST(us_sales AS INT) AS us_sales,\n  CAST(sales_change_percentage AS INT) AS sales_change_percentage\nFROM v1\n```\nIn summary, this dataframe is creating a view called `auto_sales_2022` with columns rank, brand, us_sales, and sales_change_percentage. The view is based on the local relation `v1` and casts the columns to their respective data types (int for rank, us_sales, and sales_change_percentage; string for brand)."}
{"key": "\nGiven a Spark temp view `temp_view_for_transform` with the following columns:\n```\nrank: int\nbrand: string\nus_sales: int\nsales_change_percentage: int\n```\nWrite a Spark SQL query to retrieve: brand with the highest growth\nThe answer MUST contain query only. Ensure your answer is correct.\n", "value": "SELECT brand FROM temp_view_for_transform WHERE sales_change_percentage = (SELECT MAX(sales_change_percentage) FROM temp_view_for_transform)"}
{"key": "You are an Apache Spark SQL expert, who can summary what a dataframe retrieves. Given an analyzed \nquery plan of a dataframe, you will \n1. convert the dataframe to SQL query. Note that an explain output contains plan \nnodes separated by `\\n`. Each plan node has its own expressions and expression ids. \n2. summary what the sql query retrieves. \n\n\n\nanalyzed_plan: \nGlobalLimit 100\n    +- LocalLimit 100\n       +- Sort [d_year ASC NULLS FIRST, sum_agg DESC NULLS LAST, brand_id ASC NULLS FIRST], true\n          +- Aggregate [d_year, i_brand, i_brand_id], [d_year, i_brand_id AS brand_id, i_brand AS brand, sum(ss_ext_sales_price) AS sum_agg]\n             +- Filter (((d_date_sk = ss_sold_date_sk) AND (ss_item_sk = i_item_sk)) AND ((i_manufact_id = 128) AND (d_moy = 11)))\n                +- Join Inner\n                   :- Join Inner\n                   :  :- SubqueryAlias dt\n                   :  :  +- SubqueryAlias spark_catalog.tpcds_sf1_delta.date_dim\n                   :  :     +- Relation spark_catalog.tpcds_sf1_delta.date_dim[d_date_sk,d_date_id,d_date,d_month_seq,d_week_seq,d_quarter_seq,d_year,d_dow,d_moy,d_dom,d_qoy,d_fy_year,d_fy_quarter_seq,d_fy_week_seq,d_day_name,d_quarter_name,d_holiday,d_weekend,d_following_holiday,d_first_dom,d_last_dom,d_same_day_ly,d_same_day_lq,d_current_day,... 4 more fields] parquet\n                   :  +- SubqueryAlias spark_catalog.tpcds_sf1_delta.store_sales\n                   :     +- Relation spark_catalog.tpcds_sf1_delta.store_sales[ss_sold_date_sk,ss_sold_time_sk,ss_item_sk,ss_customer_sk,ss_cdemo_sk,ss_hdemo_sk,ss_addr_sk,ss_store_sk,ss_promo_sk,ss_ticket_numberL,ss_quantity,ss_wholesale_cost,ss_list_price,ss_sales_price,ss_ext_discount_amt,ss_ext_sales_price,ss_ext_wholesale_cost,ss_ext_list_price,ss_ext_tax,ss_coupon_amt,ss_net_paid,ss_net_paid_inc_tax,ss_net_profit] parquet\n                   +- SubqueryAlias spark_catalog.tpcds_sf1_delta.item\n                      +- Relation spark_catalog.tpcds_sf1_delta.item[i_item_sk,i_item_id,i_rec_start_date,i_rec_end_date,i_item_desc,i_current_price,i_wholesale_cost,i_brand_id,i_brand,i_class_id,i_class,i_category_id,i_category,i_manufact_id,i_manufact,i_size,i_formulation,i_color,i_units,i_container,i_manager_id,i_product_name] parquet\n\nexplain: \nThe analyzed plan can be translated into the following SQL query:\n```sql\nSELECT\n  dt.d_year,\n  item.i_brand_id brand_id,\n  item.i_brand brand,\n  SUM(ss_ext_sales_price) sum_agg\nFROM date_dim dt, store_sales, item\nWHERE dt.d_date_sk = store_sales.ss_sold_date_sk\n  AND store_sales.ss_item_sk = item.i_item_sk\n  AND item.i_manufact_id = 128\n  AND dt.d_moy = 11\nGROUP BY dt.d_year, item.i_brand, item.i_brand_id\nORDER BY dt.d_year, sum_agg DESC, brand_id\nLIMIT 100\n```\nIn summary, this dataframe is retrieving the top 100 brands (specifically of items manufactured by manufacturer with id 128) with the highest total sales price for each year in the month of November. It presents the results sorted by year, total sales (in descending order), and brand id.\n\n\n\nanalyzed_plan: Project [brand]\n+- Filter (sales_change_percentage = scalar-subquery [])\n   :  +- Aggregate [max(sales_change_percentage) AS max(sales_change_percentage)]\n   :     +- SubqueryAlias temp_view_for_transform\n   :        +- View (`temp_view_for_transform`, [rank,brand,us_sales,sales_change_percentage])\n   :           +- SubqueryAlias auto_sales_2022\n   :              +- View (`auto_sales_2022`, [rank,brand,us_sales,sales_change_percentage])\n   :                 +- Project [cast(rank as int) AS rank, cast(brand as string) AS brand, cast(us_sales as int) AS us_sales, cast(sales_change_percentage as int) AS sales_change_percentage]\n   :                    +- Project [rank, brand, us_sales, sales_change_percentage]\n   :                       +- SubqueryAlias v1\n   :                          +- LocalRelation [rank, brand, us_sales, sales_change_percentage]\n   +- SubqueryAlias temp_view_for_transform\n      +- View (`temp_view_for_transform`, [rank,brand,us_sales,sales_change_percentage])\n         +- SubqueryAlias auto_sales_2022\n            +- View (`auto_sales_2022`, [rank,brand,us_sales,sales_change_percentage])\n               +- Project [cast(rank as int) AS rank, cast(brand as string) AS brand, cast(us_sales as int) AS us_sales, cast(sales_change_percentage as int) AS sales_change_percentage]\n                  +- Project [rank, brand, us_sales, sales_change_percentage]\n                     +- SubqueryAlias v1\n                        +- LocalRelation [rank, brand, us_sales, sales_change_percentage]\n\nexplain:", "value": "The analyzed plan can be translated into the following SQL query:\n```sql\nWITH temp_view_for_transform AS (\n  SELECT\n    CAST(rank AS INT) AS rank,\n    CAST(brand AS STRING) AS brand,\n    CAST(us_sales AS INT) AS us_sales,\n    CAST(sales_change_percentage AS INT) AS sales_change_percentage\n  FROM auto_sales_2022\n)\nSELECT\n  brand\nFROM temp_view_for_transform\nWHERE sales_change_percentage = (\n  SELECT\n    MAX(sales_change_percentage)\n  FROM temp_view_for_transform\n)\n```\nIn summary, this dataframe is retrieving the brand(s) with the highest sales change percentage from the `auto_sales_2022` table."}
{"key": "web_search:USA presidents", "value": "[{'title': 'Presidents | The White House', 'link': 'https://www.whitehouse.gov/about-the-white-house/presidents/', 'snippet': 'Presidents ; George Washington. The 1st President of the United States ; John Adams. The 2nd President of the United States ; Thomas Jefferson. The 3rd President\\xa0...'}, {'title': 'Chronological List of Presidents, First Ladies, and Vice Presidents of ...', 'link': 'https://www.loc.gov/rr/print/list/057_chron.html', 'snippet': 'Illustrations from the holdings of the Library of Congress Prints and Photographs Division on the subject of U.S. Presidents, First Ladies, and Vice\\xa0...'}, {'title': 'The White House', 'link': 'https://www.whitehouse.gov/', 'snippet': 'About The White House. Portrait of George Washington, the 1st President of the United States Past Presidents JFK and his family in\\xa0...'}, {'title': 'List of presidents of the United States - Wikipedia', 'link': 'https://en.wikipedia.org/wiki/List_of_presidents_of_the_United_States', 'snippet': 'The incumbent president is Joe Biden. The White House, official residence of the president of the United States, pictured in May 2006.'}, {'title': 'Presidents of the United States: Resource Guides (Virtual Programs ...', 'link': 'https://www.loc.gov/rr/program/bib/presidents/', 'snippet': 'List of U.S. Presidents \u00b7 1. George Washington \u00b7 2. John Adams \u00b7 3. Thomas Jefferson \u00b7 4. James Madison \u00b7 5. James Monroe \u00b7 6. John Quincy Adams \u00b7 7. Andrew Jackson \u00b7 8\\xa0...'}, {'title': 'Presidential election process | USAGov', 'link': 'https://www.usa.gov/election', 'snippet': 'Learn about the presidential election process, including the Electoral College, ... Learn the steps that result in the election of a U.S. president.'}, {'title': 'U.S. Presidents | Miller Center', 'link': 'https://millercenter.org/president', 'snippet': 'U.S. Presidents ; George Washington. 1 \u00b7 1789. 1797 ; John Adams. 2 \u00b7 1797. 1801 ; Thomas Jefferson. 3 \u00b7 1801. 1809 ; James Madison. 4 \u00b7 1809. 1817 ; James Monroe. 5.'}, {'title': 'Presidential $1 Coin Program | U.S. Mint', 'link': 'https://www.usmint.gov/learn/coin-and-medal-programs/presidential-dollar-coin', 'snippet': \"Dec 27, 2021 ... The United States Mint honors our nation's presidents by issuing $1 coins featuring their images in the order they served in office.\"}, {'title': 'Presidents, vice presidents, and first ladies | USAGov', 'link': 'https://www.usa.gov/presidents', 'snippet': 'Apr 20, 2023 ... Learn about the duties of the U.S. president, vice president, and first lady. Find out how to contact and learn more about current and past\\xa0...'}, {'title': 'President', 'link': 'https://history.house.gov/Institution/Presidents-Coinciding/Presidents-Coinciding/'}]"}
{"key": "Given a Query and a list of Google Search Results, return the link\nfrom a reputable website which contains the data set to answer the question. {'The best search results should contain as many as possible of these info: president,vice_president'}\nQuery:USA presidents\nGoogle Search Results: \n```\n[{'title': 'Presidents | The White House', 'link': 'https://www.whitehouse.gov/about-the-white-house/presidents/', 'snippet': 'Presidents ; George Washington. The 1st President of the United States ; John Adams. The 2nd President of the United States ; Thomas Jefferson. The 3rd President\\xa0...'}, {'title': 'Chronological List of Presidents, First Ladies, and Vice Presidents of ...', 'link': 'https://www.loc.gov/rr/print/list/057_chron.html', 'snippet': 'Illustrations from the holdings of the Library of Congress Prints and Photographs Division on the subject of U.S. Presidents, First Ladies, and Vice\\xa0...'}, {'title': 'The White House', 'link': 'https://www.whitehouse.gov/', 'snippet': 'About The White House. Portrait of George Washington, the 1st President of the United States Past Presidents JFK and his family in\\xa0...'}, {'title': 'List of presidents of the United States - Wikipedia', 'link': 'https://en.wikipedia.org/wiki/List_of_presidents_of_the_United_States', 'snippet': 'The incumbent president is Joe Biden. The White House, official residence of the president of the United States, pictured in May 2006.'}, {'title': 'Presidents of the United States: Resource Guides (Virtual Programs ...', 'link': 'https://www.loc.gov/rr/program/bib/presidents/', 'snippet': 'List of U.S. Presidents \u00b7 1. George Washington \u00b7 2. John Adams \u00b7 3. Thomas Jefferson \u00b7 4. James Madison \u00b7 5. James Monroe \u00b7 6. John Quincy Adams \u00b7 7. Andrew Jackson \u00b7 8\\xa0...'}, {'title': 'Presidential election process | USAGov', 'link': 'https://www.usa.gov/election', 'snippet': 'Learn about the presidential election process, including the Electoral College, ... Learn the steps that result in the election of a U.S. president.'}, {'title': 'U.S. Presidents | Miller Center', 'link': 'https://millercenter.org/president', 'snippet': 'U.S. Presidents ; George Washington. 1 \u00b7 1789. 1797 ; John Adams. 2 \u00b7 1797. 1801 ; Thomas Jefferson. 3 \u00b7 1801. 1809 ; James Madison. 4 \u00b7 1809. 1817 ; James Monroe. 5.'}, {'title': 'Presidential $1 Coin Program | U.S. Mint', 'link': 'https://www.usmint.gov/learn/coin-and-medal-programs/presidential-dollar-coin', 'snippet': \"Dec 27, 2021 ... The United States Mint honors our nation's presidents by issuing $1 coins featuring their images in the order they served in office.\"}, {'title': 'Presidents, vice presidents, and first ladies | USAGov', 'link': 'https://www.usa.gov/presidents', 'snippet': 'Apr 20, 2023 ... Learn about the duties of the U.S. president, vice president, and first lady. Find out how to contact and learn more about current and past\\xa0...'}, {'title': 'President', 'link': 'https://history.house.gov/Institution/Presidents-Coinciding/Presidents-Coinciding/'}]\n```\nThe answer MUST contain the url link only\n", "value": "https://www.loc.gov/rr/print/list/057_chron.html"}
{"key": "https://www.loc.gov/rr/print/list/057_chron.html", "value": "\n\n\n\nChronological List of Presidents, First Ladies, and Vice Presidents of the United States - Guides, Reference Aids, and Finding Aids (Prints andPhotographs Reading Room, Library of Congress)\n\n\n\n\n\n\n\n\n\n\n\n \u00a0The\n        Library of Congress >> Researchers\n\n\n\n\n\n\n\n\n\n\n\n\u00a0 Home >> \nImage Lists >> Presidents\n\n\n\n\n\nFind\n\n\n\n\nin\n\n\n\nImage Lists\nPrints\n                      and Photographs Pages\nResearchers\n                      Web Pages\nAll Library\n                      of Congress Pages\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n \nChronological List of Presidents, First Ladies, and Vice Presidents of the United States\nSelected Images From the Collections of the Library of Congress\nPrints and Photographs Division, Library of\n              Congress, Washington, D.C., 20540-4730\n\n\nThis chronological list contains entries for each president with his corresponding first lady and vice president. Note: Multiple entries appear for a president whenever there was a change in the office of vice president.\n\n\n\n\nYEAR\nPRESIDENT\nFIRST LADY\nVICE PRESIDENT\n\n\n1789-1797\nGeorge Washington\nMartha Washington\nJohn Adams\n\n\n1797-1801\nJohn Adams\nAbigail Adams\nThomas Jefferson\n\n\n1801-1805\nThomas Jefferson\n[Martha Wayles Skelton Jefferson \n    died before Jefferson assumed office;\nno image of her in P&P collections]\nAaron Burr\n\n\n1805-1809\nThomas Jefferson\nsee above\nGeorge Clinton\n\n\n1809-1812\nJames Madison\nDolley Madison\nGeorge Clinton\n\n\n1812-1813\nJames Madison\nDolley Madison\noffice vacant\n\n\n1813-1814\nJames Madison\nDolley Madison\nElbridge Gerry\n\n\n1814-1817\nJames Madison\nDolley Madison\noffice vacant\n\n\n1817-1825\nJames Monroe\nElizabeth Kortright Monroe\n   (no image)\nDaniel D. Tompkins\n\n\n1825-1829\nJohn Quincy Adams\nLouisa Catherine Adams\nJohn C. Calhoun\n\n\n1829-1832\nAndrew Jackson\nRachel Jackson [Rachel Donelson Jackson \ndied before Jackson assumed office and did not serve as first lady]\nJohn C. Calhoun\n\n\n1833-1837\nAndrew Jackson\nRachel Jackson [Rachel Donelson Jackson \ndied before Jackson assumed office and did not serve as first lady]\nMartin Van Buren\n\n\n1837-1841\nMartin Van Buren\nHannah Hoes Van Buren\nRichard M. Johnson\n\n\n1841\nWilliam Henry Harrison\nAnna Tuthill Symmes Harrison\nJohn Tyler\n\n\n1841-1845\nJohn Tyler\nLetitia Christian Tyler and Julia Gardiner Tyler (no images)\noffice vacant\n\n\n1845-1849\nJames K. Polk\nSarah Childress Polk\nGeorge M. Dallas\n\n\n1849-1850\nZachary Taylor\nMargaret Mackall Smith Taylor\n   (no image)\nMillard Fillmore\n\n\n1850-1853\nMillard Fillmore\nAbigail Powers Fillmore\noffice vacant\n\n\n1853\nFranklin Pierce\nJane M. Pierce\nWilliam R. King\n\n\n1853-1857\nFranklin Pierce\nJane M. Pierce\noffice vacant\n\n\n1857-1861\nJames Buchanan\n(never married)\nJohn C. Breckinridge\n\n\n1861-1865\nAbraham Lincoln\nMary Todd Lincoln\nHannibal Hamlin\n\n\n1865\nAbraham Lincoln\nMary Todd Lincoln\nAndrew Johnson\n\n\n1865-1869\nAndrew Johnson\nEliza McCardle Johnson\noffice vacant\n\n\n1869-1873\nUlysses S. Grant\nJulia Dent Grant\nSchuyler Colfax\n\n\n1873-1875\nUlysses S. Grant\nJulia Dent Grant\nHenry Wilson\n\n\n1875-1877\nUlysses S. Grant\nJulia Dent Grant\noffice vacant\n\n\n1877-1881\nRutherford Birchard Hayes\nLucy Webb Hayes\nWilliam A. Wheeler\n\n\n1881\nJames A. Garfield\nLucretia Rudolph Garfield\nChester A. Arthur\n\n\n1881-1885\nChester A. Arthur\nEllen Lewis Herndon Arthur\noffice vacant\n\n\n1885\nGrover Cleveland\nFrances Folsom Cleveland\nThomas A. Hendricks\n\n\n1885-1889\nGrover Cleveland\nFrances Folsom Cleveland\noffice vacant\n\n\n1889-1893\nBenjamin Harrison\nCaroline Lavinia Scott Harrison\nMary Lord Harrison\n   [Harrison's second wife,\n    but never a first lady]\nLevi P. Morton\n\n\n1893-1897\nGrover Cleveland\nFrances Folsom Cleveland\nAdlai E. Stevenson\n\n\n1897-1899\nWilliam McKinley\nIda Saxton McKinley\nGarret A. Hobart\n\n\n1899-1901\nWilliam McKinley\nIda Saxton McKinley\noffice vacant\n\n\n1901\nWilliam McKinley\nIda Saxton McKinley\nTheodore Roosevelt\n\n\n1901-1905\nTheodore Roosevelt\nEdith Kermit Carow Roosevelt\noffice vacant\n\n\n1905-1909\nTheodore Roosevelt\nEdith Kermit Carow Roosevelt\nCharles W. Fairbanks\n\n\n1909-1912\nWilliam H. Taft\nHelen Herron Taft\nJames S. Sherman\n\n\n1912-1913\nWilliam H. Taft\nHelen Herron Taft\noffice vacant\n\n\n1913-1921\nWoodrow Wilson\nEllen Axson Wilson and \nEdith\n      Bolling Galt Wilson\nThomas R. Marshall\n\n\n1921-1923\nWarren G. Harding\nFlorence Kling Harding\nCalvin Coolidge\n\n\n1923-1925\nCalvin Coolidge\nGrace Goodhue Coolidge\noffice vacant\n\n\n1925-1929\nCalvin Coolidge\nGrace Goodhue Coolidge\nCharles G. Dawes\n\n\n1929-1933\nHerbert Hoover\nLou Henry Hoover\nCharles Curtis\n\n\n1933-1941\nFranklin D. Roosevelt\nEleanor Roosevelt\nJohn N. Garner\n\n\n1941-1945\nFranklin D. Roosevelt\nEleanor Roosevelt\nHenry A. Wallace\n\n\n1945\nFranklin D. Roosevelt\nEleanor Roosevelt\nHarry S. Truman\n\n\n1945-1949\nHarry S. Truman\nBess Wallace Truman\noffice vacant\n\n\n1949-1953\nHarry S. Truman\nBess Wallace Truman\nBarkley, Alben W.\n\n\n1953-1961\nDwight D. Eisenhower\nMamie Doud Eisenhower\nRichard M. Nixon\n\n\n1961-1963\nJohn F. Kennedy\nJacqueline Kennedy\nLyndon B. Johnson\n\n\n1963-1965\nLyndon B. Johnson\nLady Bird Johnson\noffice vacant\n\n\n1965-1969\nLyndon B. Johnson\nLady Bird Johnson\nHubert H. Humphrey\n\n\n1969-1973\nRichard M. Nixon\nPat Nixon\nSpiro T. Agnew\n\n\n1973-1974\nRichard M. Nixon\nPat Nixon\nGerald R. Ford\n\n\n1974-1977\nGerald R. Ford\nBetty Ford\nNelson Rockefeller\n\n\n1977-1981\nJimmy Carter\nRosalynn Carter\nWalter F. Mondale\n\n\n1981-1989\nRonald Reagan\nNancy Reagan\nGeorge Bush\n\n\n1989-1993\nGeorge Bush\nBarbara Bush\nDan Quayle\n\n\n1993-2001\nBill Clinton\nHillary Rodham Clinton\nAlbert Gore\n\n\n2001-2009\nGeorge W. Bush\nLaura Bush\nRichard Cheney\n\n\n2009-2017\nBarack Obama\nMichelle Obama\nJoseph R. Biden\n\n\n2017-2021\nDonald J. Trump\nMelania Trump\nMike Pence\n\n\n2021-\nJoseph R. Biden\nJill Biden\nKamala Harris\n\n\n\n\n\n\nPresidents: Introduction (Rights/Ordering\n      Info.) | Adams\n        - Cleveland | Clinton - Harding \nHarrison\n        - Jefferson | Johnson - McKinley | Monroe\n          - Roosevelt | Taft - Trump | Tyler\n            - Wilson\nList of names, Alphabetically | List\n        of names, Chronologically\n\n\n\n\n\nFirst Ladies: Introduction\n      (Rights/Ordering Info.) | Adams\n        - Coolidge | Eisenhower - Hoover\nJackson\n            - Pierce |  Polk - Wilson | List\n              of names, Alphabetically\n\n\n\n\n\n\n Vice Presidents: Introduction (Rights/Ordering Info.) | Adams - Coolidge | Curtis - Hobart \nHumphrey - Rockefeller | Roosevelt - Wilson\nList of names, Alphabetically | List of names, Chronologically\n\n\n\n\n\n Top\n              of Page \n\n\n\n\n\n\n\n\n\n\n\n \u00a0 Home >> \nImage Lists >> Presidents\n\n\n\n\n\nFind\n\n\n\nin\n\n\nImage Lists\nPrints and Photographs Pages\nResearchers\n                Web Pages\nAll Library of Congress Pages\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0 The\n          Library of Congress >> Researchers\n\u00a0\n            December 21, 2020\n\nLegal | External Link Disclaimer\n\nContact\n          Us: \u00a0\nAsk\n            a Librarian\u00a0\u00a0\n\n\n\n\n\n\n\n"}
{"key": "Given the following question:\n```\nUSA presidents\n```\nI got the following answer from a web page:\n```\nChronological List of Presidents, First Ladies, and Vice Presidents of the United States - Guides, Reference Aids, and Finding Aids (Prints andPhotographs Reading Room, Library of Congress) The Library of Congress >> Researchers Home >> Image Lists >> Presidents Find in Image Lists Prints and Photographs Pages Researchers Web Pages All Library of Congress Pages Chronological List of Presidents, First Ladies, and Vice Presidents of the United States Selected Images From the Collections of the Library of Congress Prints and Photographs Division, Library of Congress, Washington, D.C., 20540-4730 This chronological list contains entries for each president with his corresponding first lady and vice president. Note: Multiple entries appear for a president whenever there was a change in the office of vice president. YEAR PRESIDENT FIRST LADY VICE PRESIDENT 1789-1797 George Washington Martha Washington John Adams 1797-1801 John Adams Abigail Adams Thomas Jefferson 1801-1805 Thomas Jefferson [Martha Wayles Skelton Jefferson died before Jefferson assumed office; no image of her in P&P collections] Aaron Burr 1805-1809 Thomas Jefferson see above George Clinton 1809-1812 James Madison Dolley Madison George Clinton 1812-1813 James Madison Dolley Madison office vacant 1813-1814 James Madison Dolley Madison Elbridge Gerry 1814-1817 James Madison Dolley Madison office vacant 1817-1825 James Monroe Elizabeth Kortright Monroe (no image) Daniel D. Tompkins 1825-1829 John Quincy Adams Louisa Catherine Adams John C. Calhoun 1829-1832 Andrew Jackson Rachel Jackson [Rachel Donelson Jackson died before Jackson assumed office and did not serve as first lady] John C. Calhoun 1833-1837 Andrew Jackson Rachel Jackson [Rachel Donelson Jackson died before Jackson assumed office and did not serve as first lady] Martin Van Buren 1837-1841 Martin Van Buren Hannah Hoes Van Buren Richard M. Johnson 1841 William Henry Harrison Anna Tuthill Symmes Harrison John Tyler 1841-1845 John Tyler Letitia Christian Tyler and Julia Gardiner Tyler (no images) office vacant 1845-1849 James K. Polk Sarah Childress Polk George M. Dallas 1849-1850 Zachary Taylor Margaret Mackall Smith Taylor (no image) Millard Fillmore 1850-1853 Millard Fillmore Abigail Powers Fillmore office vacant 1853 Franklin Pierce Jane M. Pierce William R. King 1853-1857 Franklin Pierce Jane M. Pierce office vacant 1857-1861 James Buchanan (never married) John C. Breckinridge 1861-1865 Abraham Lincoln Mary Todd Lincoln Hannibal Hamlin 1865 Abraham Lincoln Mary Todd Lincoln Andrew Johnson 1865-1869 Andrew Johnson Eliza McCardle Johnson office vacant 1869-1873 Ulysses S. Grant Julia Dent Grant Schuyler Colfax 1873-1875 Ulysses S. Grant Julia Dent Grant Henry Wilson 1875-1877 Ulysses S. Grant Julia Dent Grant office vacant 1877-1881 Rutherford Birchard Hayes Lucy Webb Hayes William A. Wheeler 1881 James A. Garfield Lucretia Rudolph Garfield Chester A. Arthur 1881-1885 Chester A. Arthur Ellen Lewis Herndon Arthur office vacant 1885 Grover Cleveland Frances Folsom Cleveland Thomas A. Hendricks 1885-1889 Grover Cleveland Frances Folsom Cleveland office vacant 1889-1893 Benjamin Harrison Caroline Lavinia Scott Harrison Mary Lord Harrison [Harrison's second wife, but never a first lady] Levi P. Morton 1893-1897 Grover Cleveland Frances Folsom Cleveland Adlai E. Stevenson 1897-1899 William McKinley Ida Saxton McKinley Garret A. Hobart 1899-1901 William McKinley Ida Saxton McKinley office vacant 1901 William McKinley Ida Saxton McKinley Theodore Roosevelt 1901-1905 Theodore Roosevelt Edith Kermit Carow Roosevelt office vacant 1905-1909 Theodore Roosevelt Edith Kermit Carow Roosevelt Charles W. Fairbanks 1909-1912 William H. Taft Helen Herron Taft James S. Sherman 1912-1913 William H. Taft Helen Herron Taft office vacant 1913-1921 Woodrow Wilson Ellen Axson Wilson and Edith Bolling Galt Wilson Thomas R. Marshall 1921-1923 Warren G. Harding Florence Kling Harding Calvin Coolidge 1923-1925 Calvin Coolidge Grace Goodhue Coolidge office vacant 1925-1929 Calvin Coolidge Grace Goodhue Coolidge Charles G. Dawes 1929-1933 Herbert Hoover Lou Henry Hoover Charles Curtis 1933-1941 Franklin D. Roosevelt Eleanor Roosevelt John N. Garner 1941-1945 Franklin D. Roosevelt Eleanor Roosevelt Henry A. Wallace 1945 Franklin D. Roosevelt Eleanor Roosevelt Harry S. Truman 1945-1949 Harry S. Truman Bess Wallace Truman office vacant 1949-1953 Harry S. Truman Bess Wallace Truman Barkley, Alben W. 1953-1961 Dwight D. Eisenhower Mamie Doud Eisenhower Richard M. Nixon 1961-1963 John F. Kennedy Jacqueline Kennedy Lyndon B. Johnson 1963-1965 Lyndon B. Johnson Lady Bird Johnson office vacant 1965-1969 Lyndon B. Johnson Lady Bird Johnson Hubert H. Humphrey 1969-1973 Richard M. Nixon Pat Nixon Spiro T. Agnew 1973-1974 Richard M. Nixon Pat Nixon Gerald R. Ford 1974-1977 Gerald R. Ford Betty Ford Nelson Rockefeller 1977-1981 Jimmy Carter Rosalynn Carter Walter F. Mondale 1981-1989 Ronald Reagan Nancy Reagan George Bush 1989-1993 George Bush Barbara Bush Dan Quayle 1993-2001 Bill Clinton Hillary Rodham Clinton Albert Gore 2001-2009 George W. Bush Laura Bush Richard Cheney 2009-2017 Barack Obama Michelle Obama Joseph R. Biden 2017-2021 Donald J. Trump Melania Trump Mike Pence 2021- Joseph R. Biden Jill Biden Kamala Harris Presidents: Introduction (Rights/Ordering Info.) | Adams - Cleveland | Clinton - Harding Harrison - Jefferson | Johnson - McKinley | Monroe - Roosevelt | Taft - Trump | Tyler - Wilson List of names, Alphabetically | List of names, Chronologically First Ladies: Introduction (Rights/Ordering Info.) | Adams - Coolidge | Eisenhower - Hoover Jackson - Pierce | Polk - Wilson | List of names, Alphabetically Vice Presidents: Introduction (Rights/Ordering Info.) | Adams - Coolidge | Curtis - Hobart Humphrey - Rockefeller | Roosevelt - Wilson List of names, Alphabetically | List of names, Chronologically Top of Page Home >> Image Lists >> Presidents Find in Image Lists Prints and Photographs Pages Researchers Web Pages All Library of Congress Pages The Library of Congress >> Researchers December 21, 2020 Legal | External Link Disclaimer Contact Us: Ask a Librarian\n```\nNow help me write a SQL query to store the answer into a temp view. \nGive each column a clearly descriptive name (no abbreviations).\nHere is an example of how to store data into a temp view:\n```\nCREATE OR REPLACE TEMP VIEW movies AS SELECT * FROM VALUES('Citizen Kane', 1941), ('Schindler's List', 1993) AS v1(title, year)\n```\nThe result view MUST contain following columns: ['president', 'vice_president']\nThe answer MUST contain query only.\n", "value": "CREATE OR REPLACE TEMP VIEW usa_presidents AS SELECT * FROM VALUES\n('George Washington', 'John Adams'),\n('John Adams', 'Thomas Jefferson'),\n('Thomas Jefferson', 'Aaron Burr'),\n('Thomas Jefferson', 'George Clinton'),\n('James Madison', 'George Clinton'),\n('James Madison', 'Elbridge Gerry'),\n('James Monroe', 'Daniel D. Tompkins'),\n('John Quincy Adams', 'John C. Calhoun'),\n('Andrew Jackson', 'John C. Calhoun'),\n('Andrew Jackson', 'Martin Van Buren'),\n('Martin Van Buren', 'Richard M. Johnson'),\n('William Henry Harrison', 'John Tyler'),\n('John Tyler', 'office vacant'),\n('James K. Polk', 'George M. Dallas'),\n('Zachary Taylor', 'Millard Fillmore'),\n('Millard Fillmore', 'office vacant'),\n('Franklin Pierce', 'William R. King'),\n('Franklin Pierce', 'office vacant'),\n('James Buchanan', 'John C. Breckinridge'),\n('Abraham Lincoln', 'Hannibal Hamlin'),\n('Abraham Lincoln', 'Andrew Johnson'),\n('Andrew Johnson', 'office vacant'),\n('Ulysses S. Grant', 'Schuyler Colfax'),\n('Ulysses S. Grant', 'Henry Wilson'),\n('Ulysses S. Grant', 'office vacant'),\n('Rutherford Birchard Hayes', 'William A. Wheeler'),\n('James A. Garfield', 'Chester A. Arthur'),\n('Chester A. Arthur', 'office vacant'),\n('Grover Cleveland', 'Thomas A. Hendricks'),\n('Grover Cleveland', 'office vacant'),\n('Benjamin Harrison', 'Levi P. Morton'),\n('Grover Cleveland', 'Adlai E. Stevenson'),\n('William McKinley', 'Garret A. Hobart'),\n('William McKinley', 'office vacant'),\n('William McKinley', 'Theodore Roosevelt'),\n('Theodore Roosevelt', 'office vacant'),\n('Theodore Roosevelt', 'Charles W. Fairbanks'),\n('William H. Taft', 'James S. Sherman'),\n('William H. Taft', 'office vacant'),\n('Woodrow Wilson', 'Thomas R. Marshall'),\n('Warren G. Harding', 'Calvin Coolidge'),\n('Calvin Coolidge', 'office vacant'),\n('Calvin Coolidge', 'Charles G. Dawes'),\n('Herbert Hoover', 'Charles Curtis'),\n('Franklin D. Roosevelt', 'John N. Garner'),\n('Franklin D. Roosevelt', 'Henry A. Wallace'),\n('Franklin D. Roosevelt', 'Harry S. Truman'),\n('Harry S. Truman', 'office vacant'),\n('Harry S. Truman', 'Alben W. Barkley'),\n('Dwight D. Eisenhower', 'Richard M. Nixon'),\n('John F. Kennedy', 'Lyndon B. Johnson'),\n('Lyndon B. Johnson', 'office vacant'),\n('Lyndon B. Johnson', 'Hubert H. Humphrey'),\n('Richard M. Nixon', 'Spiro T. Agnew'),\n('Richard M. Nixon', 'Gerald R. Ford'),\n('Gerald R. Ford', 'Nelson Rockefeller'),\n('Jimmy Carter', 'Walter F. Mondale'),\n('Ronald Reagan', 'George Bush'),\n('George Bush', 'Dan Quayle'),\n('Bill Clinton', 'Albert Gore'),\n('George W. Bush', 'Richard Cheney'),\n('Barack Obama', 'Joseph R. Biden'),\n('Donald J. Trump', 'Mike Pence'),\n('Joseph R. Biden', 'Kamala Harris')\nAS v1(president, vice_president)"}
{"key": "\nGiven a Spark temp view `temp_view_for_transform` with the following columns:\n```\npresident: string\nvice_president: string\n```\nWrite a Spark SQL query to retrieve: presidents who were also vice presidents\nThe answer MUST contain query only. Ensure your answer is correct.\n", "value": "SELECT DISTINCT president\nFROM temp_view_for_transform\nWHERE president IN (SELECT vice_president FROM temp_view_for_transform)"}
{"key": "You are an Apache Spark SQL expert, who can summary what a dataframe retrieves. Given an analyzed \nquery plan of a dataframe, you will \n1. convert the dataframe to SQL query. Note that an explain output contains plan \nnodes separated by `\\n`. Each plan node has its own expressions and expression ids. \n2. summary what the sql query retrieves. \n\n\n\nanalyzed_plan: \nGlobalLimit 100\n    +- LocalLimit 100\n       +- Sort [d_year ASC NULLS FIRST, sum_agg DESC NULLS LAST, brand_id ASC NULLS FIRST], true\n          +- Aggregate [d_year, i_brand, i_brand_id], [d_year, i_brand_id AS brand_id, i_brand AS brand, sum(ss_ext_sales_price) AS sum_agg]\n             +- Filter (((d_date_sk = ss_sold_date_sk) AND (ss_item_sk = i_item_sk)) AND ((i_manufact_id = 128) AND (d_moy = 11)))\n                +- Join Inner\n                   :- Join Inner\n                   :  :- SubqueryAlias dt\n                   :  :  +- SubqueryAlias spark_catalog.tpcds_sf1_delta.date_dim\n                   :  :     +- Relation spark_catalog.tpcds_sf1_delta.date_dim[d_date_sk,d_date_id,d_date,d_month_seq,d_week_seq,d_quarter_seq,d_year,d_dow,d_moy,d_dom,d_qoy,d_fy_year,d_fy_quarter_seq,d_fy_week_seq,d_day_name,d_quarter_name,d_holiday,d_weekend,d_following_holiday,d_first_dom,d_last_dom,d_same_day_ly,d_same_day_lq,d_current_day,... 4 more fields] parquet\n                   :  +- SubqueryAlias spark_catalog.tpcds_sf1_delta.store_sales\n                   :     +- Relation spark_catalog.tpcds_sf1_delta.store_sales[ss_sold_date_sk,ss_sold_time_sk,ss_item_sk,ss_customer_sk,ss_cdemo_sk,ss_hdemo_sk,ss_addr_sk,ss_store_sk,ss_promo_sk,ss_ticket_numberL,ss_quantity,ss_wholesale_cost,ss_list_price,ss_sales_price,ss_ext_discount_amt,ss_ext_sales_price,ss_ext_wholesale_cost,ss_ext_list_price,ss_ext_tax,ss_coupon_amt,ss_net_paid,ss_net_paid_inc_tax,ss_net_profit] parquet\n                   +- SubqueryAlias spark_catalog.tpcds_sf1_delta.item\n                      +- Relation spark_catalog.tpcds_sf1_delta.item[i_item_sk,i_item_id,i_rec_start_date,i_rec_end_date,i_item_desc,i_current_price,i_wholesale_cost,i_brand_id,i_brand,i_class_id,i_class,i_category_id,i_category,i_manufact_id,i_manufact,i_size,i_formulation,i_color,i_units,i_container,i_manager_id,i_product_name] parquet\n\nexplain: \nThe analyzed plan can be translated into the following SQL query:\n```sql\nSELECT\n  dt.d_year,\n  item.i_brand_id brand_id,\n  item.i_brand brand,\n  SUM(ss_ext_sales_price) sum_agg\nFROM date_dim dt, store_sales, item\nWHERE dt.d_date_sk = store_sales.ss_sold_date_sk\n  AND store_sales.ss_item_sk = item.i_item_sk\n  AND item.i_manufact_id = 128\n  AND dt.d_moy = 11\nGROUP BY dt.d_year, item.i_brand, item.i_brand_id\nORDER BY dt.d_year, sum_agg DESC, brand_id\nLIMIT 100\n```\nIn summary, this dataframe is retrieving the top 100 brands (specifically of items manufactured by manufacturer with id 128) with the highest total sales price for each year in the month of November. It presents the results sorted by year, total sales (in descending order), and brand id.\n\n\n\nanalyzed_plan: Distinct\n+- Project [president]\n   +- Filter president IN (list [])\n      :  +- Project [vice_president]\n      :     +- SubqueryAlias temp_view_for_transform\n      :        +- View (`temp_view_for_transform`, [president,vice_president])\n      :           +- SubqueryAlias usa_presidents\n      :              +- View (`usa_presidents`, [president,vice_president])\n      :                 +- Project [cast(president as string) AS president, cast(vice_president as string) AS vice_president]\n      :                    +- Project [president, vice_president]\n      :                       +- SubqueryAlias v1\n      :                          +- LocalRelation [president, vice_president]\n      +- SubqueryAlias temp_view_for_transform\n         +- View (`temp_view_for_transform`, [president,vice_president])\n            +- SubqueryAlias usa_presidents\n               +- View (`usa_presidents`, [president,vice_president])\n                  +- Project [cast(president as string) AS president, cast(vice_president as string) AS vice_president]\n                     +- Project [president, vice_president]\n                        +- SubqueryAlias v1\n                           +- LocalRelation [president, vice_president]\n\nexplain:", "value": "The analyzed plan can be translated into the following SQL query:\n```sql\nSELECT DISTINCT president\nFROM usa_presidents\nWHERE president NOT IN (\n  SELECT vice_president\n  FROM usa_presidents\n)\n```\nIn summary, this dataframe is retrieving the list of presidents who have never been vice-presidents from the `usa_presidents` table."}
{"key": "web_search:Top 10 tech companies by market cap", "value": "[{'title': 'Largest tech companies by market cap', 'link': 'https://companiesmarketcap.com/tech/largest-tech-companies-by-market-cap/', 'snippet': 'Largest tech companies by market cap ; 3. Alphabet (Google) logo. Alphabet (Google). 3GOOG. $1.557 T ; 4. Amazon logo. Amazon. 4AMZN. $1.326 T ; 5. NVIDIA logo.'}, {'title': '15 Biggest Global Tech Companies by Market Cap', 'link': 'https://www.yahoo.com/video/15-biggest-global-tech-companies-170240907.html', 'snippet': 'Oct 31, 2022 ... 15 Biggest Global Tech Companies by Market Cap \u00b7 15. Alibaba Group Holding Limited (NYSE:BABA) \u00b7 14. Cisco Systems, Inc. (NASDAQ:CSCO) \u00b7 13.'}, {'title': 'Top publicly traded tech companies by revenue', 'link': 'https://companiesmarketcap.com/tech/largest-tech-companies-by-revenue/', 'snippet': 'Top publicly traded tech companies by revenue ; 1. Amazon logo. Amazon. 1AMZN. $524.89 B ; 2. Apple logo. Apple. 2AAPL. $385.09 B ; 3. Alphabet (Google) logo.'}, {'title': 'Top 10 tech companies by market cap 2022 | Statista', 'link': 'https://www.statista.com/statistics/1350976/leading-tech-companies-worldwide-by-market-cap/', 'snippet': 'Jan 13, 2023 ... In 2022, Apple was the leading tech company by market capitalization globally at around 2.2 trillion U.S. dollars. Microsoft ranked second\\xa0...'}, {'title': 'Companies ranked by Market Cap - CompaniesMarketCap.com', 'link': 'https://companiesmarketcap.com/', 'snippet': \"Ranking the world's top companies by market cap, market value, revenue and many more metrics.\"}, {'title': 'The Largest Companies by Market Cap in 2023 | The Motley Fool', 'link': 'https://www.fool.com/research/largest-companies-by-market-cap/', 'snippet': \"Jun 16, 2023 ... Key findings. Apple is the largest company in the world, with a market cap of $2.89 trillion. It's followed by Microsoft ($2.47 trillion), Saudi\\xa0...\"}, {'title': 'Largest software companies by market cap', 'link': 'https://companiesmarketcap.com/software/largest-software-companies-by-market-cap/', 'snippet': 'Largest software companies by market cap ; 3. Alphabet (Google) logo. Alphabet (Google). 3GOOG. $1.557 T ; 4. Oracle logo. Oracle. 4ORCL. $322.01 B ; 5. Adobe logo.'}, {'title': 'Animation: The Biggest Tech Companies by Market Cap Over 23 ...', 'link': 'https://www.visualcapitalist.com/biggest-tech-companies-market-cap-23-years/', 'snippet': 'Mar 18, 2019 ... In business, the only constant is change - and for tech companies, this is even more true. Here are the biggest tech companies over 23\\xa0...'}, {'title': 'Biggest Companies in the World by Market Cap', 'link': 'https://www.investopedia.com/biggest-companies-in-the-world-by-market-cap-5212784', 'snippet': 'Biggest Companies in the World by Market Cap \u00b7 1. Apple Inc. (AAPL) \u00b7 2. Saudi Aramco (2222.SR) \u00b7 3. Microsoft Corp. (MSFT) \u00b7 4. Alphabet Inc. (GOOGL) \u00b7 5. Amazon.'}, {'title': 'Top 1000 largest US Companies in the Technology sector by Market ...', 'link': 'https://disfold.com/united-states/sector/technology/companies/', 'snippet': 'Top 1000 largest US Companies in the Technology sector by Market Cap \u00b7 1. Apple \u00b7 2. Microsoft \u00b7 3. Nvidia \u00b7 4. Broadcom \u00b7 5. Oracle \u00b7 6. Cisco \u00b7 7. Adobe \u00b7 8. Texas\\xa0...'}]"}
{"key": "Given a Query and a list of Google Search Results, return the link\nfrom a reputable website which contains the data set to answer the question. {'The best search results should contain as many as possible of these info: company,cap,country'}\nQuery:Top 10 tech companies by market cap\nGoogle Search Results: \n```\n[{'title': 'Largest tech companies by market cap', 'link': 'https://companiesmarketcap.com/tech/largest-tech-companies-by-market-cap/', 'snippet': 'Largest tech companies by market cap ; 3. Alphabet (Google) logo. Alphabet (Google). 3GOOG. $1.557 T ; 4. Amazon logo. Amazon. 4AMZN. $1.326 T ; 5. NVIDIA logo.'}, {'title': '15 Biggest Global Tech Companies by Market Cap', 'link': 'https://www.yahoo.com/video/15-biggest-global-tech-companies-170240907.html', 'snippet': 'Oct 31, 2022 ... 15 Biggest Global Tech Companies by Market Cap \u00b7 15. Alibaba Group Holding Limited (NYSE:BABA) \u00b7 14. Cisco Systems, Inc. (NASDAQ:CSCO) \u00b7 13.'}, {'title': 'Top publicly traded tech companies by revenue', 'link': 'https://companiesmarketcap.com/tech/largest-tech-companies-by-revenue/', 'snippet': 'Top publicly traded tech companies by revenue ; 1. Amazon logo. Amazon. 1AMZN. $524.89 B ; 2. Apple logo. Apple. 2AAPL. $385.09 B ; 3. Alphabet (Google) logo.'}, {'title': 'Top 10 tech companies by market cap 2022 | Statista', 'link': 'https://www.statista.com/statistics/1350976/leading-tech-companies-worldwide-by-market-cap/', 'snippet': 'Jan 13, 2023 ... In 2022, Apple was the leading tech company by market capitalization globally at around 2.2 trillion U.S. dollars. Microsoft ranked second\\xa0...'}, {'title': 'Companies ranked by Market Cap - CompaniesMarketCap.com', 'link': 'https://companiesmarketcap.com/', 'snippet': \"Ranking the world's top companies by market cap, market value, revenue and many more metrics.\"}, {'title': 'The Largest Companies by Market Cap in 2023 | The Motley Fool', 'link': 'https://www.fool.com/research/largest-companies-by-market-cap/', 'snippet': \"Jun 16, 2023 ... Key findings. Apple is the largest company in the world, with a market cap of $2.89 trillion. It's followed by Microsoft ($2.47 trillion), Saudi\\xa0...\"}, {'title': 'Largest software companies by market cap', 'link': 'https://companiesmarketcap.com/software/largest-software-companies-by-market-cap/', 'snippet': 'Largest software companies by market cap ; 3. Alphabet (Google) logo. Alphabet (Google). 3GOOG. $1.557 T ; 4. Oracle logo. Oracle. 4ORCL. $322.01 B ; 5. Adobe logo.'}, {'title': 'Animation: The Biggest Tech Companies by Market Cap Over 23 ...', 'link': 'https://www.visualcapitalist.com/biggest-tech-companies-market-cap-23-years/', 'snippet': 'Mar 18, 2019 ... In business, the only constant is change - and for tech companies, this is even more true. Here are the biggest tech companies over 23\\xa0...'}, {'title': 'Biggest Companies in the World by Market Cap', 'link': 'https://www.investopedia.com/biggest-companies-in-the-world-by-market-cap-5212784', 'snippet': 'Biggest Companies in the World by Market Cap \u00b7 1. Apple Inc. (AAPL) \u00b7 2. Saudi Aramco (2222.SR) \u00b7 3. Microsoft Corp. (MSFT) \u00b7 4. Alphabet Inc. (GOOGL) \u00b7 5. Amazon.'}, {'title': 'Top 1000 largest US Companies in the Technology sector by Market ...', 'link': 'https://disfold.com/united-states/sector/technology/companies/', 'snippet': 'Top 1000 largest US Companies in the Technology sector by Market Cap \u00b7 1. Apple \u00b7 2. Microsoft \u00b7 3. Nvidia \u00b7 4. Broadcom \u00b7 5. Oracle \u00b7 6. Cisco \u00b7 7. Adobe \u00b7 8. Texas\\xa0...'}]\n```\nThe answer MUST contain the url link only\n", "value": "https://www.statista.com/statistics/1350976/leading-tech-companies-worldwide-by-market-cap/"}
{"key": "https://www.statista.com/statistics/1350976/leading-tech-companies-worldwide-by-market-cap/", "value": "\nTop 10 tech companies by market cap 2022 | StatistaSkip to main contentStatista LogoStatista Logostatista.comstatista.esstatista.destatista.frPrices & Access\n            \n                                Single Accounts\n                            \n                            Business Solutions\n                        \n                                Academia and Government\n                            \n            Statistics\n            \n                                            All Industries\n                                        \n                                            Consumer Goods & FMCG\n                                        \n                                            Internet\n                                        \n                                            Media & Advertising\n                                        \n                                            Retail & Trade\n                                        \n                                            Sports & Recreation\n                                        \n                                            Technology & Telecommunications\n                                        \n                                            Transportation & Logistics\n                                        \n                                            Travel, Tourism & Hospitality\n                                        \n                                                Most-viewed Statistics\n                                            \n                                                Recent Statistics\n                                            \n                                                Popular Statistics\n                                            \n                                                        Quarterly smartphone market share worldwide by vendor 2009-2023\n                                                    \n                                                        Mobile phone users worldwide 2015-2020\n                                                    \n                                                        Apple iPhone unit sales worldwide 2007-2018, by quarter\n                                                    \n                                                        Global market share held by smartphone operating systems 2009-2018, by quarter\n                                                    \n                                                        Smartphone users in India 2010-2040\n                                                    \n                                                Topics\n                                            \n                                                    More Topics\n                                                \n                                                            Smartphones - statistics & facts\n                                                        \n                                                            Virtual reality (VR) - statistics & facts\n                                                        \n                                                    Top Report\n                                                View Report\n        Reports\n        \n                        Report Shop\n                    Search our report databaseDigital & TrendsDigital & Trend reportsOverview and forecasts on trending topicsIndustries & MarketsIndustry & Market reportsIndustry and market insights and forecastsCompanies & ProductsCompanies & Products reportsKey figures and rankings about companies and productsConsumers & BrandsConsumer & Brand reportsConsumer and brand insights and preferences in various industriesPolitics & SocietyPolitics & Society reportsDetailed information about political and social topicsCountries & RegionsCountry & Region reportsAll key figures about countries and regions\n                        Find your information in our database containing over 20,000 reports\n                        \n        Insights\n        \n            New\n        Market Insights\n                    Market forecast and expert KPIs for 1000+ markets in 190+ countries & territories\n                \n                            Explore Market Insights\n                            \n                            Consumer\n                        \n                            Digital\n                        \n                            Mobility\n                        Consumer Insights\n                            Insights on consumer attitudes and behavior worldwide\n                        \n                                2,000,000+ interviews\n                            \n                                15,000+ brands\n                            \n                        Explore Consumer Insights\n                        Company Insights\n                    Business information on 70m+ public and private companies\n                \n                        100+ industries\n                    \n                        200+ countries and territories\n                    Explore Company Insights\n                        eCommerce Insights\n                        Detailed information for 35,000+ online stores and marketplaces\n                    \n                            70+ KPIs per store\n                        \n                            Revenue analytics and forecasts\n                        \n                        Explore eCommerce Insights\n                        \n        Infographics\n    \n        Services\n        \n                    The Statistics Portal\n                \n                \n                    Directly accessible data for 170 industries from 150+ countries\n                    and over 1\u00a0Mio. facts.\n                \n            \n                        About Statista\n                        Why trust Statista\n                        First Steps and Help Centre\n                            \n                    Live webinars & recordings\n                \n                        \n                        Tools\n                    \n                            Business Plan Export\n                            Publication Finder\n                            \n                            Statista Services\n                    \n                                Statista Q\n                            \n                                \n                    Customized Research & Analysis projects:\n                \n                            \n                            Statista Q\n                            \n                                askStatista\n                            \n                                \n                    Get quick analyses with our professional research service\n                \n                            \n                            askStatista\n                                \n                                Statista R\n                            \n                                The best of the best: the portal for top lists & rankings:\n                            \n                            Statista R\n                            \n                        Statista Content & Design\n                    \n                        Transforming Data into Design:\n                    Customized infographic servicePresentation DesignAnimated videosWhitepapers, E-Books, etc.\n                        Statista Content & Design\n                        \n                        nxt statista\n                    \n                        Strategy and business building for the data-driven economy:\n                    \n                    nxt statista\n                    Prices & AccessSingle AccountsBusiness SolutionsAcademia and GovernmentStatisticsPopular StatisticsTopicsMarketsReportsMarket InsightsConsumer InsightsCompany InsightseCommerce InsightsInfographicsServicesContent & DesignResearch projectsAsk StatistaBusiness Plan ExportPublication FinderStatista RDEESFRTechnology & Telecommunications\n                            Leading tech companies worldwide 2022, by market cap\n                        \n                                                                                                    Published by\n                                    Federica Laricchia,\n                                    \n                                                                            Jan 13, 2023\n                                                                    \n                            In 2022, Apple was the leading tech company by market capitalization globally at around 2.2 trillion U.S. dollars. Microsoft ranked second, totaling around 1.8 trillion U.S. dollars in market capitalization. Alphabet (Google), Amazon, and Tesla were also in the top ten. By contrast, Samsung ranked tenth, with a market capitalization of over 300 billion U.S. dollars.\r\n\r\nApple  \r\n\r\nSince its foundation in a Californian garage in 1976, Apple expanded massively and became one of the most valuable companies in the world. The company started its origins in the PC industry with the Macintosh, but soon entered other segments of the consumer electronics market. Today, the iPhone is the most profitable Apple product, although Mac, iPad, wearables, and services also contribute to its high revenues. Aiming at innovation, Apple invests every year in research and development, with its latest hardware product, an AR headset, to be released in 2023.\r\n\r\nSamsung \r\n\r\nApple\u2019s biggest rival in the consumer electronics industry is the South Korean tech giant Samsung. Founded in 1938 as a trading company, it developed in several sectors, including electronics and insurance, recording revenues in excess of 200 billion U.S. dollars over recent years. Despite Samsung being active in several markets across multiple divisions, it is today best known for its consumer tech products. Smartphones, tablets, and TVs are among the most popular. Samsung sits as the leading smartphone vendor, holding a market share of over 20 percent through 2022.   \n                            \n                                Read more\n                            \n                        Leading tech companies worldwide 2022, by market capitalization \n                    \n                            (in billion U.S. dollars)\n                        \n                                    table\n                                \n                                    column chart\n                                CharacteristicMarket capitalization in billion U.S. dollarsApple2,242Microsoft1,821Alphabet (Google)1,229Amazon902.4Tesla541.4TSMC410.9NVIDIA401.7Tencet377.8Meta Platforms (Facebook)302.1Samsung301.7\n                                                Loading statistic... \n                                            \n                                    Additional Information\n                                \u00a9 Statista 2023\n                                Show source\n                                \n                Download for free\n            \n                        Download\n                    PDF+XLS+PNG+PPT+SourceShow detailed source information?Register for freeAlready a member?Log inSource\n                                Show sources information\n                            \n                                Show publisher information\n                            \n                                Use Ask Statista Research Service\n                            \n                            Release date\n                        December 2022More information\n                            Region\n                        WorldwideSurvey time period2022\n                    Supplementary notes\n                The date of release is the date of access.Citation formatsCitation formats\n                        View options\n                    Other statistics on the topic+Financial Instruments & InvestmentsLondon Stock Exchange (UK): largest technology companies 2022IT ServicesIT, software and computer services economy employment in the UK 2011-2021+TelecommunicationsIT services and software market value in the United Kingdom (UK) 2009-2017Medical TechnologyCompanies in the life science industry sector United Kingdom (UK) 2021, by sector\n                                Federica Laricchia\n                            \n                                Research expert covering the global consumer technology industry\n                            Get in touch with us now\n                    \n                    Profit from additional features with an Employee Account\n                \n                \n                    \n                    Please create an employee account to be able to mark statistics as favorites.\n                    Then you can access your favorite statistics via the star in the header.\n                \n                \n                    Register now\n                \n                    \n                    Profit from the additional features of your individual account\n                \n                \n                    \n                    Currently, you are using a shared account. To use individual functions (e.g., mark statistics as favourites, set\n                    statistic alerts) please log in with your personal account.\n                    If you are an admin, please authenticate by logging in again.\n                \n                \n                    Login\n                To access this feature you need a Statista AccountRegister for freeAlready have an account?\n    LoginYou need one of our Business Solutions to use this functionImmediate access to statistics, forecasts & reportsUsage and publication rightsDownload in various formatsView Business SolutionsAlready have an account?\n    LoginStatista Accounts:\n                                                                                                                                                                    Access All Statistics. Starting from $588 USD\u00a0/\u00a0Year\n                        Basic Account\n                Get to know the platformYou only have access to basic statistics.Starter AccountThe ideal entry-level account for individual usersInstant access\u00a0to 1m statisticsDownload\u00a0in XLS, PDF & PNG formatDetailed\u00a0references$69 USD\u00a0$49 USD\u00a0/\u00a0Month *\n                                        in the first 12 months\n                                    Professional AccountFull accessBusiness Solutions including all features.\n            \n                        * Prices do not include sales tax.\n                \n        \n                Other statistics that may interest you\n            The most important statisticsLondon Stock Exchange (UK): market cap of technology companies 2022London Stock Exchange (UK): largest technology companies 2022IT services and software market value in the United Kingdom (UK) 2009-2017IT, software and computer services industry GVA in the UK 2010-2021IT, software and computer services economy employment in the UK 2011-2021Investments made to improve digital marketing in the UK 2021The most important statisticsNumber of biotechnology R&D enterprises in the UK 2008-2020Turnover of biotechnology R&D enterprises in the United Kingdom (UK) 2008-2020GVA of biotechnology research and development enterprises in the UK 2008-2020Medical technology service sector employment in the United Kingdom 2021, by regionCompanies in the biopharmaceutical sector in the United Kingdom 2017, by segmentBiopharmaceutical companies by turnover size band in the United Kingdom (UK) 2017Biopharmaceutical companies by employment size in the United Kingdom (UK) 2017Industrial biotechnology employment CAGR in the United Kingdom (UK) 2009-2014The most important statisticsCompanies in the life science industry sector United Kingdom (UK) 2021, by sectorlife science sectors employment compound annual growth rate in the UK 2016, by sectorLife science sectors turnover compound annual growth rate in the UK 2016, by sectorMedical technology companies by turnover size band in the United Kingdom (UK) 2017Medical technology companies by employment size band in the United Kingdom (UK) 2017Medical technology: companies in the major segments in the United Kingdom (UK) 2017Medical technology segment turnover CAGR in the United Kingdom (UK) 2011-2016Medical technology employment CAGR in the United Kingdom (UK) 2011-2016The most important statisticsSoftware publishing sector GVA in the UK 2010-2021United Kingdom (UK): Packaged software sales 2008-2017UK cyber security: total software & IT services market size 2010-2017UK cyber security: software solution segment size 2010-2017Number of software publishing businesses in the UK from 2010-2022Employment in computer programming activities in the UK 2011-2021Programmers and software developers outside the UK creative industries 2011-2021Computer software and games: weekly UK household expenditure 2021, by gross incomeOther statistics that may interest you \n                Overview\n            \n                6\n            \n                                Premium Statistic\n                            London Stock Exchange (UK): market cap of technology companies 2022\n                                Premium Statistic\n                            London Stock Exchange (UK): largest technology companies 2022\n                                Premium Statistic\n                            IT services and software market value in the United Kingdom (UK) 2009-2017\n                                Basic Statistic\n                            IT, software and computer services industry GVA in the UK 2010-2021\n                                Basic Statistic\n                            IT, software and computer services economy employment in the UK 2011-2021\n                                Premium Statistic\n                            Investments made to improve digital marketing in the UK 2021\n                Biotechnology\n            \n                8\n            \n                                Basic Statistic\n                            Number of biotechnology R&D enterprises in the UK 2008-2020\n                                Basic Statistic\n                            Turnover of biotechnology R&D enterprises in the United Kingdom (UK) 2008-2020\n                                Basic Statistic\n                            GVA of biotechnology research and development enterprises in the UK 2008-2020\n                                Basic Statistic\n                            Medical technology service sector employment in the United Kingdom 2021, by region\n                                Basic Statistic\n                            Companies in the biopharmaceutical sector in the United Kingdom 2017, by segment\n                                Basic Statistic\n                            Biopharmaceutical companies by turnover size band in the United Kingdom (UK) 2017\n                                Premium Statistic\n                            Biopharmaceutical companies by employment size in the United Kingdom (UK) 2017\n                                Basic Statistic\n                            Industrial biotechnology employment CAGR in the United Kingdom (UK) 2009-2014\n                Medical Technology\n            \n                8\n            \n                                Basic Statistic\n                            Companies in the life science industry sector United Kingdom (UK) 2021, by sector\n                                Basic Statistic\n                            life science sectors employment compound annual growth rate in the UK 2016, by sector\n                                Basic Statistic\n                            Life science sectors turnover compound annual growth rate in the UK 2016, by sector\n                                Premium Statistic\n                            Medical technology companies by turnover size band in the United Kingdom (UK) 2017\n                                Premium Statistic\n                            Medical technology companies by employment size band in the United Kingdom (UK) 2017\n                                Basic Statistic\n                            Medical technology: companies in the major segments in the United Kingdom (UK) 2017\n                                Basic Statistic\n                            Medical technology segment turnover CAGR in the United Kingdom (UK) 2011-2016\n                                Basic Statistic\n                            Medical technology employment CAGR in the United Kingdom (UK) 2011-2016\n                Software\n            \n                8\n            \n                                Basic Statistic\n                            Software publishing sector GVA in the UK 2010-2021\n                                Premium Statistic\n                            United Kingdom (UK): Packaged software sales 2008-2017\n                                Basic Statistic\n                            UK cyber security: total software & IT services market size 2010-2017\n                                Basic Statistic\n                            UK cyber security: software solution segment size 2010-2017\n                                Premium Statistic\n                            Number of software publishing businesses in the UK from 2010-2022\n                                Premium Statistic\n                            Employment in computer programming activities in the UK 2011-2021\n                                Premium Statistic\n                            Programmers and software developers outside the UK creative industries 2011-2021\n                                Premium Statistic\n                            Computer software and games: weekly UK household expenditure 2021, by gross incomeFurther Content: You might find this interesting as well\n                TopicsTech Companies in the United Kingdom (UK)Business digitizationBiotech drugsBig dataEnterprise softwareStatista Accounts:\n                                                                                                                                                                    Access All Statistics. Starting from $588 USD\u00a0/\u00a0YearLearn more about how Statista can support your business.Request webinarCompaniesMarketCap.com. (December 8, 2022). Leading tech companies worldwide 2022, by market capitalization (in billion U.S. dollars) [Graph]. In Statista. Retrieved June 26, 2023, from https://www.statista.com/statistics/1350976/leading-tech-companies-worldwide-by-market-cap/CompaniesMarketCap.com. \"Leading tech companies worldwide 2022, by market capitalization (in billion U.S. dollars).\" Chart. December 8, 2022. Statista. Accessed June 26, 2023. https://www.statista.com/statistics/1350976/leading-tech-companies-worldwide-by-market-cap/CompaniesMarketCap.com. (2022). Leading tech companies worldwide 2022, by market capitalization (in billion U.S. dollars). Statista. Statista Inc.. Accessed: June 26, 2023. https://www.statista.com/statistics/1350976/leading-tech-companies-worldwide-by-market-cap/CompaniesMarketCap.com. \"Leading Tech Companies Worldwide 2022, by Market Capitalization (in Billion U.S. Dollars).\" Statista, Statista Inc., 8 Dec 2022, https://www.statista.com/statistics/1350976/leading-tech-companies-worldwide-by-market-cap/CompaniesMarketCap.com, Leading tech companies worldwide 2022, by market capitalization (in billion U.S. dollars) Statista, https://www.statista.com/statistics/1350976/leading-tech-companies-worldwide-by-market-cap/ (last visited June 26, 2023)Leading tech companies worldwide 2022, by market capitalization (in billion U.S. dollars) [Graph], CompaniesMarketCap.com, December 8, 2022. [Online]. Available: https://www.statista.com/statistics/1350976/leading-tech-companies-worldwide-by-market-cap/HomeAbout StatistaCareerContactHelp & FAQReport BugOur Media Partners PrivacyImprintMenu\n                        Prices & Access\n                    \n                    Popular Statistics\n                \n                    Industries\n                \n                    Infographics\n                \n                    Content & Design projects\n                \n                    Research projects\n                \n                        AskStatista\n                    \n                                statista.de\n                            \n                                statista.es\n                            \n                                statista.fr\n                            "}
{"key": "Given the following question:\n```\nTop 10 tech companies by market cap\n```\nI got the following answer from a web page:\n```\nTop 10 tech companies by market cap 2022 | StatistaSkip to main contentStatista LogoStatista Logostatista.comstatista.esstatista.destatista.frPrices & Access Single Accounts Business Solutions Academia and Government Statistics All Industries Consumer Goods & FMCG Internet Media & Advertising Retail & Trade Sports & Recreation Technology & Telecommunications Transportation & Logistics Travel, Tourism & Hospitality Most-viewed Statistics Recent Statistics Popular Statistics Quarterly smartphone market share worldwide by vendor 2009-2023 Mobile phone users worldwide 2015-2020 Apple iPhone unit sales worldwide 2007-2018, by quarter Global market share held by smartphone operating systems 2009-2018, by quarter Smartphone users in India 2010-2040 Topics More Topics Smartphones - statistics & facts Virtual reality (VR) - statistics & facts Top Report View Report Reports Report Shop Search our report databaseDigital & TrendsDigital & Trend reportsOverview and forecasts on trending topicsIndustries & MarketsIndustry & Market reportsIndustry and market insights and forecastsCompanies & ProductsCompanies & Products reportsKey figures and rankings about companies and productsConsumers & BrandsConsumer & Brand reportsConsumer and brand insights and preferences in various industriesPolitics & SocietyPolitics & Society reportsDetailed information about political and social topicsCountries & RegionsCountry & Region reportsAll key figures about countries and regions Find your information in our database containing over 20,000 reports Insights New Market Insights Market forecast and expert KPIs for 1000+ markets in 190+ countries & territories Explore Market Insights Consumer Digital Mobility Consumer Insights Insights on consumer attitudes and behavior worldwide 2,000,000+ interviews 15,000+ brands Explore Consumer Insights Company Insights Business information on 70m+ public and private companies 100+ industries 200+ countries and territories Explore Company Insights eCommerce Insights Detailed information for 35,000+ online stores and marketplaces 70+ KPIs per store Revenue analytics and forecasts Explore eCommerce Insights Infographics Services The Statistics Portal Directly accessible data for 170 industries from 150+ countries and over 1 Mio. facts. About Statista Why trust Statista First Steps and Help Centre Live webinars & recordings Tools Business Plan Export Publication Finder Statista Services Statista Q Customized Research & Analysis projects: Statista Q askStatista Get quick analyses with our professional research service askStatista Statista R The best of the best: the portal for top lists & rankings: Statista R Statista Content & Design Transforming Data into Design: Customized infographic servicePresentation DesignAnimated videosWhitepapers, E-Books, etc. Statista Content & Design nxt statista Strategy and business building for the data-driven economy: nxt statista Prices & AccessSingle AccountsBusiness SolutionsAcademia and GovernmentStatisticsPopular StatisticsTopicsMarketsReportsMarket InsightsConsumer InsightsCompany InsightseCommerce InsightsInfographicsServicesContent & DesignResearch projectsAsk StatistaBusiness Plan ExportPublication FinderStatista RDEESFRTechnology & Telecommunications Leading tech companies worldwide 2022, by market cap Published by Federica Laricchia, Jan 13, 2023 In 2022, Apple was the leading tech company by market capitalization globally at around 2.2 trillion U.S. dollars. Microsoft ranked second, totaling around 1.8 trillion U.S. dollars in market capitalization. Alphabet (Google), Amazon, and Tesla were also in the top ten. By contrast, Samsung ranked tenth, with a market capitalization of over 300 billion U.S. dollars. Apple Since its foundation in a Californian garage in 1976, Apple expanded massively and became one of the most valuable companies in the world. The company started its origins in the PC industry with the Macintosh, but soon entered other segments of the consumer electronics market. Today, the iPhone is the most profitable Apple product, although Mac, iPad, wearables, and services also contribute to its high revenues. Aiming at innovation, Apple invests every year in research and development, with its latest hardware product, an AR headset, to be released in 2023. Samsung Apple\u2019s biggest rival in the consumer electronics industry is the South Korean tech giant Samsung. Founded in 1938 as a trading company, it developed in several sectors, including electronics and insurance, recording revenues in excess of 200 billion U.S. dollars over recent years. Despite Samsung being active in several markets across multiple divisions, it is today best known for its consumer tech products. Smartphones, tablets, and TVs are among the most popular. Samsung sits as the leading smartphone vendor, holding a market share of over 20 percent through 2022. Read more Leading tech companies worldwide 2022, by market capitalization (in billion U.S. dollars) table column chart CharacteristicMarket capitalization in billion U.S. dollarsApple2,242Microsoft1,821Alphabet (Google)1,229Amazon902.4Tesla541.4TSMC410.9NVIDIA401.7Tencet377.8Meta Platforms (Facebook)302.1Samsung301.7 Loading statistic... Additional Information \u00a9 Statista 2023 Show source Download for free Download PDF+XLS+PNG+PPT+SourceShow detailed source information?Register for freeAlready a member?Log inSource Show sources information Show publisher information Use Ask Statista Research Service Release date December 2022More information Region WorldwideSurvey time period2022 Supplementary notes The date of release is the date of access.Citation formatsCitation formats View options Other statistics on the topic+Financial Instruments & InvestmentsLondon Stock Exchange (UK): largest technology companies 2022IT ServicesIT, software and computer services economy employment in the UK 2011-2021+TelecommunicationsIT services and software market value in the United Kingdom (UK) 2009-2017Medical TechnologyCompanies in the life science industry sector United Kingdom (UK) 2021, by sector Federica Laricchia Research expert covering the global consumer technology industry Get in touch with us now Profit from additional features with an Employee Account Please create an employee account to be able to mark statistics as favorites. Then you can access your favorite statistics via the star in the header. Register now Profit from the additional features of your individual account Currently, you are using a shared account. To use individual functions (e.g., mark statistics as favourites, set statistic alerts) please log in with your personal account. If you are an admin, please authenticate by logging in again. Login To access this feature you need a Statista AccountRegister for freeAlready have an account? LoginYou need one of our Business Solutions to use this functionImmediate access to statistics, forecasts & reportsUsage and publication rightsDownload in various formatsView Business SolutionsAlready have an account? LoginStatista Accounts: Access All Statistics. Starting from $588 USD / Year Basic Account Get to know the platformYou only have access to basic statistics.Starter AccountThe ideal entry-level account for individual usersInstant access to 1m statisticsDownload in XLS, PDF & PNG formatDetailed references$69 USD $49 USD / Month * in the first 12 months Professional AccountFull accessBusiness Solutions including all features. * Prices do not include sales tax. Other statistics that may interest you The most important statisticsLondon Stock Exchange (UK): market cap of technology companies 2022London Stock Exchange (UK): largest technology companies 2022IT services and software market value in the United Kingdom (UK) 2009-2017IT, software and computer services industry GVA in the UK 2010-2021IT, software and computer services economy employment in the UK 2011-2021Investments made to improve digital marketing in the UK 2021The most important statisticsNumber of biotechnology R&D enterprises in the UK 2008-2020Turnover of biotechnology R&D enterprises in the United Kingdom (UK) 2008-2020GVA of biotechnology research and development enterprises in the UK 2008-2020Medical technology service sector employment in the United Kingdom 2021, by regionCompanies in the biopharmaceutical sector in the United Kingdom 2017, by segmentBiopharmaceutical companies by turnover size band in the United Kingdom (UK) 2017Biopharmaceutical companies by employment size in the United Kingdom (UK) 2017Industrial biotechnology employment CAGR in the United Kingdom (UK) 2009-2014The most important statisticsCompanies in the life science industry sector United Kingdom (UK) 2021, by sectorlife science sectors employment compound annual growth rate in the UK 2016, by sectorLife science sectors turnover compound annual growth rate in the UK 2016, by sectorMedical technology companies by turnover size band in the United Kingdom (UK) 2017Medical technology companies by employment size band in the United Kingdom (UK) 2017Medical technology: companies in the major segments in the United Kingdom (UK) 2017Medical technology segment turnover CAGR in the United Kingdom (UK) 2011-2016Medical technology employment CAGR in the United Kingdom (UK) 2011-2016The most important statisticsSoftware publishing sector GVA in the UK 2010-2021United Kingdom (UK): Packaged software sales 2008-2017UK cyber security: total software & IT services market size 2010-2017UK cyber security: software solution segment size 2010-2017Number of software publishing businesses in the UK from 2010-2022Employment in computer programming activities in the UK 2011-2021Programmers and software developers outside the UK creative industries 2011-2021Computer software and games: weekly UK household expenditure 2021, by gross incomeOther statistics that may interest you Overview 6 Premium Statistic London Stock Exchange (UK): market cap of technology companies 2022 Premium Statistic London Stock Exchange (UK): largest technology companies 2022 Premium Statistic IT services and software market value in the United Kingdom (UK) 2009-2017 Basic Statistic IT, software and computer services industry GVA in the UK 2010-2021 Basic Statistic IT, software and computer services economy employment in the UK 2011-2021 Premium Statistic Investments made to improve digital marketing in the UK 2021 Biotechnology 8 Basic Statistic Number of biotechnology R&D enterprises in the UK 2008-2020 Basic Statistic Turnover of biotechnology R&D enterprises in the United Kingdom (UK) 2008-2020 Basic Statistic GVA of biotechnology research and development enterprises in the UK 2008-2020 Basic Statistic Medical technology service sector employment in the United Kingdom 2021, by region Basic Statistic Companies in the biopharmaceutical sector in the United Kingdom 2017, by segment Basic Statistic Biopharmaceutical companies by turnover size band in the United Kingdom (UK) 2017 Premium Statistic Biopharmaceutical companies by employment size in the United Kingdom (UK) 2017 Basic Statistic Industrial biotechnology employment CAGR in the United Kingdom (UK) 2009-2014 Medical Technology 8 Basic Statistic Companies in the life science industry sector United Kingdom (UK) 2021, by sector Basic Statistic life science sectors employment compound annual growth rate in the UK 2016, by sector Basic Statistic Life science sectors turnover compound annual growth rate in the UK 2016, by sector Premium Statistic Medical technology companies by turnover size band in the United Kingdom (UK) 2017 Premium Statistic Medical technology companies by employment size band in the United Kingdom (UK) 2017 Basic Statistic Medical technology: companies in the major segments in the United Kingdom (UK) 2017 Basic Statistic Medical technology segment turnover CAGR in the United Kingdom (UK) 2011-2016 Basic Statistic Medical technology employment CAGR in the United Kingdom (UK) 2011-2016 Software 8 Basic Statistic Software publishing sector GVA in the UK 2010-2021 Premium Statistic United Kingdom (UK): Packaged software sales 2008-2017 Basic Statistic UK cyber security: total software & IT services market size 2010-2017 Basic Statistic UK cyber security: software solution segment size 2010-2017 Premium Statistic Number of software publishing businesses in the UK from 2010-2022 Premium Statistic Employment in computer programming activities in the UK 2011-2021 Premium Statistic Programmers and software developers outside the UK creative industries 2011-2021 Premium Statistic Computer software and games: weekly UK household expenditure 2021, by gross incomeFurther Content: You might find this interesting as well TopicsTech Companies in the United Kingdom (UK)Business digitizationBiotech drugsBig dataEnterprise softwareStatista Accounts: Access All Statistics. Starting from $588 USD / YearLearn more about how Statista can support your business.Request webinarCompaniesMarketCap.com. (December 8, 2022). Leading tech companies worldwide 2022, by market capitalization (in billion U.S. dollars) [Graph]. In Statista. Retrieved June 26, 2023, from https://www.statista.com/statistics/1350976/leading-tech-companies-worldwide-by-market-cap/CompaniesMarketCap.com. \"Leading tech companies worldwide 2022, by market capitalization (in billion U.S. dollars).\" Chart. December 8, 2022. Statista. Accessed June 26, 2023. https://www.statista.com/statistics/1350976/leading-tech-companies-worldwide-by-market-cap/CompaniesMarketCap.com. (2022). Leading tech companies worldwide 2022, by market capitalization (in billion U.S. dollars). Statista. Statista Inc.. Accessed: June 26, 2023. https://www.statista.com/statistics/1350976/leading-tech-companies-worldwide-by-market-cap/CompaniesMarketCap.com. \"Leading Tech Companies Worldwide 2022, by Market Capitalization (in Billion U.S. Dollars).\" Statista, Statista Inc., 8 Dec 2022, https://www.statista.com/statistics/1350976/leading-tech-companies-worldwide-by-market-cap/CompaniesMarketCap.com, Leading tech companies worldwide 2022, by market capitalization (in billion U.S. dollars) Statista, https://www.statista.com/statistics/1350976/leading-tech-companies-worldwide-by-market-cap/ (last visited June 26, 2023)Leading tech companies worldwide 2022, by market capitalization (in billion U\n```\nNow help me write a SQL query to store the answer into a temp view. \nGive each column a clearly descriptive name (no abbreviations).\nHere is an example of how to store data into a temp view:\n```\nCREATE OR REPLACE TEMP VIEW movies AS SELECT * FROM VALUES('Citizen Kane', 1941), ('Schindler's List', 1993) AS v1(title, year)\n```\nThe result view MUST contain following columns: ['company', 'cap', 'country']\nThe answer MUST contain query only.\n", "value": "CREATE OR REPLACE TEMP VIEW top_tech_companies AS SELECT * FROM VALUES\n('Apple', 2242, 'United States'),\n('Microsoft', 1821, 'United States'),\n('Alphabet (Google)', 1229, 'United States'),\n('Amazon', 902.4, 'United States'),\n('Tesla', 541.4, 'United States'),\n('TSMC', 410.9, 'Taiwan'),\n('NVIDIA', 401.7, 'United States'),\n('Tencent', 377.8, 'China'),\n('Meta Platforms (Facebook)', 302.1, 'United States'),\n('Samsung', 301.7, 'South Korea')\nAS v1(company, cap, country)"}
{"key": "\nGiven a Spark temp view `temp_view_for_transform` with the following columns:\n```\ncompany: string\ncap: decimal(11,1)\ncountry: string\n```\nWrite a Spark SQL query to retrieve: companies in United States\nThe answer MUST contain query only. Ensure your answer is correct.\n", "value": "SELECT company, cap, country\nFROM temp_view_for_transform\nWHERE country = 'United States'"}
{"key": "You are an Apache Spark SQL expert, who can summary what a dataframe retrieves. Given an analyzed \nquery plan of a dataframe, you will \n1. convert the dataframe to SQL query. Note that an explain output contains plan \nnodes separated by `\\n`. Each plan node has its own expressions and expression ids. \n2. summary what the sql query retrieves. \n\n\n\nanalyzed_plan: \nGlobalLimit 100\n    +- LocalLimit 100\n       +- Sort [d_year ASC NULLS FIRST, sum_agg DESC NULLS LAST, brand_id ASC NULLS FIRST], true\n          +- Aggregate [d_year, i_brand, i_brand_id], [d_year, i_brand_id AS brand_id, i_brand AS brand, sum(ss_ext_sales_price) AS sum_agg]\n             +- Filter (((d_date_sk = ss_sold_date_sk) AND (ss_item_sk = i_item_sk)) AND ((i_manufact_id = 128) AND (d_moy = 11)))\n                +- Join Inner\n                   :- Join Inner\n                   :  :- SubqueryAlias dt\n                   :  :  +- SubqueryAlias spark_catalog.tpcds_sf1_delta.date_dim\n                   :  :     +- Relation spark_catalog.tpcds_sf1_delta.date_dim[d_date_sk,d_date_id,d_date,d_month_seq,d_week_seq,d_quarter_seq,d_year,d_dow,d_moy,d_dom,d_qoy,d_fy_year,d_fy_quarter_seq,d_fy_week_seq,d_day_name,d_quarter_name,d_holiday,d_weekend,d_following_holiday,d_first_dom,d_last_dom,d_same_day_ly,d_same_day_lq,d_current_day,... 4 more fields] parquet\n                   :  +- SubqueryAlias spark_catalog.tpcds_sf1_delta.store_sales\n                   :     +- Relation spark_catalog.tpcds_sf1_delta.store_sales[ss_sold_date_sk,ss_sold_time_sk,ss_item_sk,ss_customer_sk,ss_cdemo_sk,ss_hdemo_sk,ss_addr_sk,ss_store_sk,ss_promo_sk,ss_ticket_numberL,ss_quantity,ss_wholesale_cost,ss_list_price,ss_sales_price,ss_ext_discount_amt,ss_ext_sales_price,ss_ext_wholesale_cost,ss_ext_list_price,ss_ext_tax,ss_coupon_amt,ss_net_paid,ss_net_paid_inc_tax,ss_net_profit] parquet\n                   +- SubqueryAlias spark_catalog.tpcds_sf1_delta.item\n                      +- Relation spark_catalog.tpcds_sf1_delta.item[i_item_sk,i_item_id,i_rec_start_date,i_rec_end_date,i_item_desc,i_current_price,i_wholesale_cost,i_brand_id,i_brand,i_class_id,i_class,i_category_id,i_category,i_manufact_id,i_manufact,i_size,i_formulation,i_color,i_units,i_container,i_manager_id,i_product_name] parquet\n\nexplain: \nThe analyzed plan can be translated into the following SQL query:\n```sql\nSELECT\n  dt.d_year,\n  item.i_brand_id brand_id,\n  item.i_brand brand,\n  SUM(ss_ext_sales_price) sum_agg\nFROM date_dim dt, store_sales, item\nWHERE dt.d_date_sk = store_sales.ss_sold_date_sk\n  AND store_sales.ss_item_sk = item.i_item_sk\n  AND item.i_manufact_id = 128\n  AND dt.d_moy = 11\nGROUP BY dt.d_year, item.i_brand, item.i_brand_id\nORDER BY dt.d_year, sum_agg DESC, brand_id\nLIMIT 100\n```\nIn summary, this dataframe is retrieving the top 100 brands (specifically of items manufactured by manufacturer with id 128) with the highest total sales price for each year in the month of November. It presents the results sorted by year, total sales (in descending order), and brand id.\n\n\n\nanalyzed_plan: Project [company, cap, country]\n+- Filter (country = United States)\n   +- SubqueryAlias temp_view_for_transform\n      +- View (`temp_view_for_transform`, [company,cap,country])\n         +- SubqueryAlias top_tech_companies\n            +- View (`top_tech_companies`, [company,cap,country])\n               +- Project [cast(company as string) AS company, cast(cap as decimal(11,1)) AS cap, cast(country as string) AS country]\n                  +- Project [company, cap, country]\n                     +- SubqueryAlias v1\n                        +- LocalRelation [company, cap, country]\n\nexplain:", "value": "The analyzed plan can be translated into the following SQL query:\n```sql\nSELECT\n  company,\n  cap,\n  country\nFROM top_tech_companies\nWHERE country = 'United States'\n```\nIn summary, this dataframe is retrieving the company name, market capitalization, and country for all the top tech companies that are located in the United States."}
{"key": "https://time.com/6235186/best-albums-2022/", "value": "\n\n\nThe Best Albums of 2022 | Time\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTIME logo\n\n\n\n\n\n\n\nConnect Wallet\n\n\n\nWallet Settings \nDisconnect Wallet\nMetaMask \nWalletConnect \n\n \n\n\n\n\n\n                          Sign In\n                        \n\n\n\n                          My Account\n                          \n\n\nMy Account\nDigital\n                            Magazines\nTIME Storefront\nHelp Center\nSign Out\n\n\n\n\n\n\n                                      Subscribe Now!\n                            \nSubscribe\n\n\n\n\n\n\n\n\n\nSpotlight \n                        We've Gotten 'Custer's Last Stand' Wrong for Nearly 150 Years\n                      \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nClose\n\n\n\n\n\n\n\n\n\n\n\n\nMy Account\n\n\nMy Account\n\n\nDigital\n                        Magazines\n\n\nTIME Storefront\n\n\nHelp Center\n\n\nSign Out\n\n\n\n\n\n\n                      Sign In\n                    \n\n\n\n                      Subscribe\n                    \n\n\n\n\nSections\n\n\n\n                      Home\n                    \n \n\n                      U.S.\n                    \n \n\n                      Politics\n                    \n \n\n                      World\n                    \n \n\n                      Health\n                    \n \n\n                      Climate\n                    \n \n\n                      Future of Work by Charter\n                    \n \n\n                      Business\n                    \n \n\n                      Tech\n                    \n \n\n                      Entertainment\n                    \n \n\n                      Ideas\n                    \n \n\n                      Science\n                    \n \n\n                      History\n                    \n \n\n                      Sports\n                    \n \n\n                      Magazine\n                    \n \n\n                      TIME 2030\n                    \n \n\n                      Next Generation Leaders\n                    \n \n\n                      TIME100 Leadership Series\n                    \n \n\n                      TIME Studios\n                    \n \n\n                      Video\n                    \n \n\n                      TIME100 Talks\n                    \n \n\n                      TIMEPieces\n                    \n \n\n                      The TIME Vault\n                    \n \n\n                      TIME for Health\n                    \n \n\n                      TIME for Kids\n                    \n \n\n                      TIME Edge\n                    \n \n\n                      TIME CO2\n                    \n \n\n                      Red Border: Branded Content by TIME\n                    \n \n\n                      Personal Finance by TIME Stamped\n                    \n \n\n                      Shopping by TIME Stamped\n                    \n \n\n\nJoin Us\n\n\n\n                      Newsletters\n                    \n \n\n                      Subscribe\n                    \n \n\n                      Give a Gift\n                    \n \n\n                      Shop the TIME Store\n                    \n \n\n                      TIME Cover Store\n                    \n \n\n\nCustomer Care\n\n\n\n                      US & Canada\n                    \n \n\n                      Global Help Center\n                    \n \n\n\nReach Out\n\n\n\n                      Careers\n                    \n \n\n                      Press Room\n                    \n \n\n                      Contact the Editors\n                    \n \n\n                      Media Kit\n                    \n \n\n                      Reprints and Permissions\n                    \n \n\n\nMore\n\n\n\n                      About Us\n                    \n \n\n                      Privacy Policy\n                    \n \n\n                      Your California Privacy Rights\n                    \n \n\n                      Terms of Use\n                    \n \n\n                      Site Map\n                    \n \n\n\nConnect with Us\n\n\n\n\n\n\n \n\n\n\n\n\n \n\n\n\n\n\n \n\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n\n\n\n\nPresented By\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                      Entertainment\n                                  \n\n\n\n\n\n                                      Music\n                                  \n\n\n\n                              The 10 Best Albums of 2022\n                            \n\n\n \nThe 10 Best Albums of 2022\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n                    By \n                        \n                          Cady Lang\n                        \n                        ,\n                        \n                          Andrew R. Chow\n                        \n                        and\n                        \n                          Moises Mendez II\n                        \n\n\nNovember 20, 2022 8:00 AM EST\n\n\n\n\n\n\nA wealth of new albums in 2022 pushed the boundaries of genre, theme, and sound. From seasoned veterans like Beyonc\u00e9 and Kendrick Lamar, returning in triumph with fresh records and even fresher perspectives, to exciting young artists like Saya Gray, whose debut album, 19 Masters, should make any listener excited for the future of music, here are the albums that we\u2019ve had on repeat all year. 10. Motomami, Rosal\u00eda \n\n\n\n\n\n\n\n\n\n\n\n\n \n Rosal\u00eda\u2019s 2018 conceptual masterpiece El Mal Querer is so intentional and powerful that it\u2019s hard to imagine her topping it. But this year, she stepped entirely outside the box, pushing her creative ability to its absolute limit to make Motomami. \n\n\n On this album, she worked with some of the best musicians in the industry from rapper/producer Pharrell Williams, who lent a hand on \u201cLa Combi Versace\u201d and on title track \u201cHENTAI,\u201d to Frank Ocean, to James Blake, whose voice can be heard at the end of \u201cDIABLO.\u201d Motomami is a triumphant amalgamation of diverse genres, blending jazz, reggaeton, bachata, flamenco, and pop. Rosal\u00eda\u2019s unwavering tenacity has allowed her to create a piece of art that fully showcases her stunning vocal and producing abilities.\u2014Moises Mendez II 9. You Can\u2019t Kill Me, 070 Shake \n\n\n\n\n\n\n\n\n\n\n\n\n \n Danielle Balbuena, the New Jersey-born rapper and R&B singer better known as 070 Shake, has made a name for herself in the industry for defying easy definition. With a powerhouse voice and tough yet tender songwriting, she\u2019s transcended genre and challenged notions of identity, forging a path all her own that has garnered co-signs ranging from Kanye West, who signed her to his G.O.O.D. Music imprint in 2016, to indie rock darlings The 1975, with whom she toured during the early years of her career.  \n On her second album, You Can\u2019t Kill Me, Shake continues to hone a skill set entirely her own, serving up a project that\u2019s surprisingly measured but no less intense. Over heavy beats and ambient synths, Shake returns to her usual contemplations: the hardships and wonders of life, the ups and downs of love. Teeming with smoldering desire and melancholic angst, the result is a moody, sensual offering from a deeply vulnerable artist who refuses simply coolly exist. \u201cI wanted your body, but it came with your soul,\u201d she laments on \u201cBody,\u201d channeling a tension that feeds into our universal ennui.\u2014Cady Lang 8. Mr. Morale & The Big Steppers, Kendrick Lamar \n\n\n\n\n\n\n\n\n\n\n\n\n \n In his decade in the spotlight, Kendrick Lamar has amassed a reputation that borders on messianic\u2014he\u2019s the Pulitzer-winning, civil-rights-anthem-penning, Tupac-inheriting genius destined to carry his city, if not his race, if not the world, on his narrow shoulders. No one man could possibly live up to those unbearable and escalating standards, and on Mr. Morale, Lamar actively renounces them: \u201cKendrick made you think about it, but he is not your savior,\u201d he says pointedly on \u201cSavior.\u201d  \n But if Mr. Morale isn\u2019t an epoch-defining masterwork on the level of Good Kid, m.A.A.d City or To Pimp a Butterfly, it\u2019s still a fantastically rich portrait of an artist in crisis. Lamar navigates familial tensions, pandemic anxiety, hypocrisy, and crushing public expectations with sharpness and poignancy, especially on \u201cMother | Sober\u201d and the aforementioned \u201cSavior.\u201d And there are several deeply polarizing songs on the album\u2014including the domestic dispute \u201cWe Cry Together\u201d and the trans anthem \u201cAuntie Diaries\u201d\u2014that nevertheless show Lamar probing the boundaries of his comfort zone and embracing the risk of backlash in order to create art he believes in.\u2014Andrew R. Chow 7. Big Time, Angel Olsen  \n\n\n\n\n\n\n\n\n\n\n\n\n \n \u201cBig\u201d is the operative word for the sixth album from the indie rock mainstay Angel Olsen: Recorded soon after both her parents died, it deals in big emotions, big musical arrangements, big vocals, big themes of love, loss and depression and perseverance. And just as Olsen has thrived across a range of setups\u2014from acoustic solo to scruffy electric rock band\u2014she likewise excels in belting out hugely stirring songs that sound destined to blast during climactic slow dances or while movie credits roll.  \n The songs on \u201cBig Time\u201d build patiently, and with few indicators as to the year they were created: there are steel pedal guitars, burnished strings, zithers, and harmoniums. The lush arrangements augment Olsen\u2019s arguably strongest vocal performance yet: she brings both power and subtlety to wrenchingly stark lyrics like \u201cI know you can\u2019t talk long/ But I\u2019m barely hanging on/ I\u2019m so tired of telling you/ It\u2019s a hard time again.\u201d\u2014A.R.C.  6. Electricity, Ibibio Sound Machine  \n\n\n\n\n\n\n\n\n\n\n\n\n \n You\u2019d be hard-pressed to find a more combustible minute of pop music in 2022 than the one that starts from the halfway point of \u201cProtection From Evil,\u201d the opening track of Ibibio Sound Machine\u2019s fourth album Electricity. Frontwoman Eno Williams delivers a furious stream-of-consciousness soliloquy in the Ibibio language, her syllables spilling over and between the pounding four-on-the-floor dance beat; she lapses into a simmering chorus run through a vocoder, which then gives way to a shrieking horn section and a seizing synthesizer reminiscent of LCD Soundsystem\u2019s best work. Electricity is filled with moments like this: of breathtaking sonic rises and falls, astonishing cultural exchanges, and flat-out infectious dance music.\u2014A.R.C.   \n 5. It\u2019s Almost Dry, Pusha T  \n\n\n\n\n\n\n\n\n\n\n\n\n \n If the rapper and impresario Pusha T is the \u201cMartin Scorsese of street rap,\u201d as he hopes to be, then It\u2019s Almost Dry might just be his Goodfellas: an immersive gangster epic that\u2019s brutal yet stylish, materialistic, and psychologically probing. Pusha T doesn\u2019t stray far from his favorite topic\u2014hustling\u2014but he doesn\u2019t need to, because of the care with which he imbues his wordcraft and storytelling. His dense references will send you scrambling for Genius annotations: \u201dSummertime, Winterfell, I\u2019m the Night King/ The Colgate kilo, the hood needs whitening/ We fishscale n\u2014-s like we all Pisces/ Your bitch in my bubble like I\u2019m still typing,\u201d he raps on \u201cNeck and Wrist.\u201d But even if you don\u2019t catch all the double and triple entendres, the music sounds fantastically luxurious. He recruited some of the most renowned producers in hip-hop, from Kanye West to Pharrell, and they delivered their A-game.\u2014A.R.C. \n 4. Chloe and the Next 20th Century, Father John Misty \n\n\n\n\n\n\n\n\n\n\n\n\n \n The musical polymath Josh Tillman, better known as his stage alter ego, Father John Misty, has made a name for himself as the most polarizing (and possibly most talented) man in the contemporary folk rock scene. With Chloe and the 20th Century, his fifth studio album as FJM, however, he takes a surprising and delightful departure from his usual form for a project that\u2019s grandiose in its ambition, theatrical in its presentation, and thrilling in its execution.  Drawing on elements like big band, bossa nova, and film scores from the golden age of Hollywood, the album is a lush and lofty epic that spins fictional vintage narratives into song. Through tragic vignettes that read like a screenplay of a fantasy L.A., the tracks detail torrid love affairs, untimely ends, and heartbreak, for the titular Chloe and her motley crew, showcasing not only FJM\u2019s signature wry cynicism and penchant for melodrama, but an impressive flair for worldbuilding.\u2014C.L. \n 3. Renaissance, Beyonc\u00e9 \n\n\n\n\n\n\n\n\n\n\n\n\n \n Ahead of the release of Renaissance, her seventh solo studio album, Beyonc\u00e9 shared via social media that it was a creative project born out of a need for escape, freedom, and exploration during the pandemic. The spirit of release is omnipresent in the album, a true celebration of dance music and its Black queer history. From her first single off the album, \u201cBreak My Soul,\u201d where Bey and Big Freedia urge us to \u201crelease your job/ release the time\u201d to the dedication of the album to her late queer uncle, Johnny, the album is an homage to the Black queer pioneers of genres like disco, bounce, house, techno, funk, and ballroom. There are few artists who can drop an album late in the game and still commandeer \u201csong of the summer\u201d along with every dance floor, but as she tells us on \u201cAlien Superstar,\u201d Beyonc\u00e9 is and forever will be that girl.\u2014C.L. \n 2. 19 Masters, Saya Gray  \n\n\n\n\n\n\n\n\n\n\n\n\n \n The debut album from the Toronto-based singer-songwriter Gray is not for the stadium rafters. It\u2019s full of half-fleshed-out ideas, spindly guitar wanderings, washed-out vocal recordings and stray voice memos. But Gray\u2019s strange restraint and restless curiosity are entirely the point: In its scattered and shaggy structure, there\u2019s something compelling to be found around every melodic corner, whether on your second or tenth listen. In this way, the album feels like a worthy inheritor of Frank Ocean\u2019s lo-fi masterpiece Blonde. Gray layers her scratchy voice upon itself to build breathtaking harmonies, and the tones she wrings out of her guitar and bass are impeccable.\u2014A.R.C. \n 1. Un Verano Sin Ti, Bad Bunny \n\n\n\n\n\n\n\n\n\n\n\n\n \n No other album had as much universal appeal (and, let\u2019s be honest, adoration) this year than Un Verano Sin Ti, Bad Bunny\u2019s glorious fourth solo studio album. It\u2019s an album about heartbreak, yes, but also a veritable love letter to his homeland of Puerto Rico and a sonic tribute to the Caribbean diaspora. Driven by the musical styles of El Caribe, ranging from reggaeton and dembow to merengue and cumbia, and bolstered by elements of dance hall and techno, Benito firmly roots the album in the deeply personal, mining the universal experiences of love, loss, and the supreme pleasure of being alive, for an exceptional project that is genre-defying, intergenerational, and groundbreaking.  \n Never one to shy away from getting political, Bad Bunny also uses the project to critique hot-button issues, from the privatization of power in Puerto Rico to how the current crisis of gentrification on the island is part of a long and troubled history of colonization. To listen to this album, to move to it and be moved by it, is an act of defiance, celebration, and radical love.\u2014C.L. \n\nMore Must-Reads From TIME\n\n\n America's Second Year Post-Roe Will Be Busy Singapore's LGBT Community Turns Its Attention to Family Acceptance Essay: I Fell for a Famed Artist. Then He Got Violent How the Women\u2019s World Cup Evolved Into What It Is Today The Dangers of Unregulated Deep-Sea Tourism Podcast: Elliott Page Steps Into His Truth The True History of 'Custer's Land Stand' These Are the 100 Most Influential Companies of 2023 \n Write to Cady Lang at cady.lang@timemagazine.com and Moises Mendez II at moises.mendez@time.com. \n\n\n \n\n\n\n\n\n\n\n\n \n\n\nYou May Also Like\n \n\n\n \n\n\n \n \n\n\n\nRead Next\n\n\n\nWhy Verified Fan Is Ruining the Concert Experience\n\n\n\n\n\nNext Up: Editor's Pick\n\n\n\nThe 25 Defining Works of the Black Renaissance\n\n\n\n\n\n\n\n EDIT POST\n\n\n\n\n\n\n\n\n\n\n\n                        Home\n                      \n\n\n\n                        U.S.\n                      \n\n\n\n                        Politics\n                      \n\n\n\n                        World\n                      \n\n\n\n                        Health\n                      \n\n\n\n                        Business\n                      \n\n\n\n                        Tech\n                      \n\n\n\n                        Personal Finance by TIME Stamped\n                      \n\n\n\n                        Shopping by TIME Stamped\n                      \n\n\n\n                        Future of Work by Charter\n                      \n\n\n\n\n\n\n\n                        Entertainment\n                      \n\n\n\n                        Ideas\n                      \n\n\n\n                        Science\n                      \n\n\n\n                        History\n                      \n\n\n\n                        Newsfeed\n                      \n\n\n\n                        Sports\n                      \n\n\n\n                        Magazine\n                      \n\n\n\n                        The TIME Vault\n                      \n\n\n\n                        TIME For Kids\n                      \n\n\n\n                        TIME CO2\n                      \n\n\n\n\n\n\n\n                        TIME Edge\n                      \n\n\n\n                        Video\n                      \n\n\n\n                        Masthead\n                      \n\n\n\n                        Newsletters\n                      \n\n\n\n                        Subscribe\n                      \n\n\n\n                        Subscriber Benefits\n                      \n\n\n\n                        Give a Gift\n                      \n\n\n\n                        Shop the TIME Store\n                      \n\n\n\n                        Careers\n                      \n\n\n\n\n\n\n\n                        Press Room\n                      \n\n\n\n                        TIME Studios\n                      \n\n\n\n                        U.S. & Canada Customer Care\n                      \n\n\n\n                        Global Help Center\n                      \n\n\n\n                        Contact the Editors\n                      \n\n\n\n                        Reprints and Permissions\n                      \n\n\n\n                        Site Map\n                      \n\n\n\n                        Media Kit\n                      \n\n\n\n                        Supplied Partner Content\n                      \n\n\n\n                        About Us\n                      \n\n\n\n\n\n             \u00a9 2023 TIME USA, LLC. All Rights Reserved. Use of this site constitutes acceptance of our Terms of Service, Privacy Policy (Your California Privacy Rights) and Do Not Sell or Share My Personal Information. TIME may receive compensation for some links to products and services on this website. Offers may be subject to change without notice.  \n        \n\n\n\n\n\n\n\n\n\n\n"}
{"key": "Given the following question:\n```\nThe Best Albums of 2022 | Time\n```\nI got the following answer from a web page:\n```\nThe Best Albums of 2022 | Time TIME logo Connect Wallet Wallet Settings Disconnect Wallet MetaMask WalletConnect Sign In My Account My Account Digital Magazines TIME Storefront Help Center Sign Out Subscribe Now! Subscribe Spotlight We've Gotten 'Custer's Last Stand' Wrong for Nearly 150 Years Close My Account My Account Digital Magazines TIME Storefront Help Center Sign Out Sign In Subscribe Sections Home U.S. Politics World Health Climate Future of Work by Charter Business Tech Entertainment Ideas Science History Sports Magazine TIME 2030 Next Generation Leaders TIME100 Leadership Series TIME Studios Video TIME100 Talks TIMEPieces The TIME Vault TIME for Health TIME for Kids TIME Edge TIME CO2 Red Border: Branded Content by TIME Personal Finance by TIME Stamped Shopping by TIME Stamped Join Us Newsletters Subscribe Give a Gift Shop the TIME Store TIME Cover Store Customer Care US & Canada Global Help Center Reach Out Careers Press Room Contact the Editors Media Kit Reprints and Permissions More About Us Privacy Policy Your California Privacy Rights Terms of Use Site Map Connect with Us Presented By Entertainment Music The 10 Best Albums of 2022 The 10 Best Albums of 2022 By Cady Lang , Andrew R. Chow and Moises Mendez II November 20, 2022 8:00 AM EST A wealth of new albums in 2022 pushed the boundaries of genre, theme, and sound. From seasoned veterans like Beyonc\u00e9 and Kendrick Lamar, returning in triumph with fresh records and even fresher perspectives, to exciting young artists like Saya Gray, whose debut album, 19 Masters, should make any listener excited for the future of music, here are the albums that we\u2019ve had on repeat all year. 10. Motomami, Rosal\u00eda Rosal\u00eda\u2019s 2018 conceptual masterpiece El Mal Querer is so intentional and powerful that it\u2019s hard to imagine her topping it. But this year, she stepped entirely outside the box, pushing her creative ability to its absolute limit to make Motomami. On this album, she worked with some of the best musicians in the industry from rapper/producer Pharrell Williams, who lent a hand on \u201cLa Combi Versace\u201d and on title track \u201cHENTAI,\u201d to Frank Ocean, to James Blake, whose voice can be heard at the end of \u201cDIABLO.\u201d Motomami is a triumphant amalgamation of diverse genres, blending jazz, reggaeton, bachata, flamenco, and pop. Rosal\u00eda\u2019s unwavering tenacity has allowed her to create a piece of art that fully showcases her stunning vocal and producing abilities.\u2014Moises Mendez II 9. You Can\u2019t Kill Me, 070 Shake Danielle Balbuena, the New Jersey-born rapper and R&B singer better known as 070 Shake, has made a name for herself in the industry for defying easy definition. With a powerhouse voice and tough yet tender songwriting, she\u2019s transcended genre and challenged notions of identity, forging a path all her own that has garnered co-signs ranging from Kanye West, who signed her to his G.O.O.D. Music imprint in 2016, to indie rock darlings The 1975, with whom she toured during the early years of her career. On her second album, You Can\u2019t Kill Me, Shake continues to hone a skill set entirely her own, serving up a project that\u2019s surprisingly measured but no less intense. Over heavy beats and ambient synths, Shake returns to her usual contemplations: the hardships and wonders of life, the ups and downs of love. Teeming with smoldering desire and melancholic angst, the result is a moody, sensual offering from a deeply vulnerable artist who refuses simply coolly exist. \u201cI wanted your body, but it came with your soul,\u201d she laments on \u201cBody,\u201d channeling a tension that feeds into our universal ennui.\u2014Cady Lang 8. Mr. Morale & The Big Steppers, Kendrick Lamar In his decade in the spotlight, Kendrick Lamar has amassed a reputation that borders on messianic\u2014he\u2019s the Pulitzer-winning, civil-rights-anthem-penning, Tupac-inheriting genius destined to carry his city, if not his race, if not the world, on his narrow shoulders. No one man could possibly live up to those unbearable and escalating standards, and on Mr. Morale, Lamar actively renounces them: \u201cKendrick made you think about it, but he is not your savior,\u201d he says pointedly on \u201cSavior.\u201d But if Mr. Morale isn\u2019t an epoch-defining masterwork on the level of Good Kid, m.A.A.d City or To Pimp a Butterfly, it\u2019s still a fantastically rich portrait of an artist in crisis. Lamar navigates familial tensions, pandemic anxiety, hypocrisy, and crushing public expectations with sharpness and poignancy, especially on \u201cMother | Sober\u201d and the aforementioned \u201cSavior.\u201d And there are several deeply polarizing songs on the album\u2014including the domestic dispute \u201cWe Cry Together\u201d and the trans anthem \u201cAuntie Diaries\u201d\u2014that nevertheless show Lamar probing the boundaries of his comfort zone and embracing the risk of backlash in order to create art he believes in.\u2014Andrew R. Chow 7. Big Time, Angel Olsen \u201cBig\u201d is the operative word for the sixth album from the indie rock mainstay Angel Olsen: Recorded soon after both her parents died, it deals in big emotions, big musical arrangements, big vocals, big themes of love, loss and depression and perseverance. And just as Olsen has thrived across a range of setups\u2014from acoustic solo to scruffy electric rock band\u2014she likewise excels in belting out hugely stirring songs that sound destined to blast during climactic slow dances or while movie credits roll. The songs on \u201cBig Time\u201d build patiently, and with few indicators as to the year they were created: there are steel pedal guitars, burnished strings, zithers, and harmoniums. The lush arrangements augment Olsen\u2019s arguably strongest vocal performance yet: she brings both power and subtlety to wrenchingly stark lyrics like \u201cI know you can\u2019t talk long/ But I\u2019m barely hanging on/ I\u2019m so tired of telling you/ It\u2019s a hard time again.\u201d\u2014A.R.C. 6. Electricity, Ibibio Sound Machine You\u2019d be hard-pressed to find a more combustible minute of pop music in 2022 than the one that starts from the halfway point of \u201cProtection From Evil,\u201d the opening track of Ibibio Sound Machine\u2019s fourth album Electricity. Frontwoman Eno Williams delivers a furious stream-of-consciousness soliloquy in the Ibibio language, her syllables spilling over and between the pounding four-on-the-floor dance beat; she lapses into a simmering chorus run through a vocoder, which then gives way to a shrieking horn section and a seizing synthesizer reminiscent of LCD Soundsystem\u2019s best work. Electricity is filled with moments like this: of breathtaking sonic rises and falls, astonishing cultural exchanges, and flat-out infectious dance music.\u2014A.R.C. 5. It\u2019s Almost Dry, Pusha T If the rapper and impresario Pusha T is the \u201cMartin Scorsese of street rap,\u201d as he hopes to be, then It\u2019s Almost Dry might just be his Goodfellas: an immersive gangster epic that\u2019s brutal yet stylish, materialistic, and psychologically probing. Pusha T doesn\u2019t stray far from his favorite topic\u2014hustling\u2014but he doesn\u2019t need to, because of the care with which he imbues his wordcraft and storytelling. His dense references will send you scrambling for Genius annotations: \u201dSummertime, Winterfell, I\u2019m the Night King/ The Colgate kilo, the hood needs whitening/ We fishscale n\u2014-s like we all Pisces/ Your bitch in my bubble like I\u2019m still typing,\u201d he raps on \u201cNeck and Wrist.\u201d But even if you don\u2019t catch all the double and triple entendres, the music sounds fantastically luxurious. He recruited some of the most renowned producers in hip-hop, from Kanye West to Pharrell, and they delivered their A-game.\u2014A.R.C. 4. Chloe and the Next 20th Century, Father John Misty The musical polymath Josh Tillman, better known as his stage alter ego, Father John Misty, has made a name for himself as the most polarizing (and possibly most talented) man in the contemporary folk rock scene. With Chloe and the 20th Century, his fifth studio album as FJM, however, he takes a surprising and delightful departure from his usual form for a project that\u2019s grandiose in its ambition, theatrical in its presentation, and thrilling in its execution. Drawing on elements like big band, bossa nova, and film scores from the golden age of Hollywood, the album is a lush and lofty epic that spins fictional vintage narratives into song. Through tragic vignettes that read like a screenplay of a fantasy L.A., the tracks detail torrid love affairs, untimely ends, and heartbreak, for the titular Chloe and her motley crew, showcasing not only FJM\u2019s signature wry cynicism and penchant for melodrama, but an impressive flair for worldbuilding.\u2014C.L. 3. Renaissance, Beyonc\u00e9 Ahead of the release of Renaissance, her seventh solo studio album, Beyonc\u00e9 shared via social media that it was a creative project born out of a need for escape, freedom, and exploration during the pandemic. The spirit of release is omnipresent in the album, a true celebration of dance music and its Black queer history. From her first single off the album, \u201cBreak My Soul,\u201d where Bey and Big Freedia urge us to \u201crelease your job/ release the time\u201d to the dedication of the album to her late queer uncle, Johnny, the album is an homage to the Black queer pioneers of genres like disco, bounce, house, techno, funk, and ballroom. There are few artists who can drop an album late in the game and still commandeer \u201csong of the summer\u201d along with every dance floor, but as she tells us on \u201cAlien Superstar,\u201d Beyonc\u00e9 is and forever will be that girl.\u2014C.L. 2. 19 Masters, Saya Gray The debut album from the Toronto-based singer-songwriter Gray is not for the stadium rafters. It\u2019s full of half-fleshed-out ideas, spindly guitar wanderings, washed-out vocal recordings and stray voice memos. But Gray\u2019s strange restraint and restless curiosity are entirely the point: In its scattered and shaggy structure, there\u2019s something compelling to be found around every melodic corner, whether on your second or tenth listen. In this way, the album feels like a worthy inheritor of Frank Ocean\u2019s lo-fi masterpiece Blonde. Gray layers her scratchy voice upon itself to build breathtaking harmonies, and the tones she wrings out of her guitar and bass are impeccable.\u2014A.R.C. 1. Un Verano Sin Ti, Bad Bunny No other album had as much universal appeal (and, let\u2019s be honest, adoration) this year than Un Verano Sin Ti, Bad Bunny\u2019s glorious fourth solo studio album. It\u2019s an album about heartbreak, yes, but also a veritable love letter to his homeland of Puerto Rico and a sonic tribute to the Caribbean diaspora. Driven by the musical styles of El Caribe, ranging from reggaeton and dembow to merengue and cumbia, and bolstered by elements of dance hall and techno, Benito firmly roots the album in the deeply personal, mining the universal experiences of love, loss, and the supreme pleasure of being alive, for an exceptional project that is genre-defying, intergenerational, and groundbreaking. Never one to shy away from getting political, Bad Bunny also uses the project to critique hot-button issues, from the privatization of power in Puerto Rico to how the current crisis of gentrification on the island is part of a long and troubled history of colonization. To listen to this album, to move to it and be moved by it, is an act of defiance, celebration, and radical love.\u2014C.L. More Must-Reads From TIME America's Second Year Post-Roe Will Be Busy Singapore's LGBT Community Turns Its Attention to Family Acceptance Essay: I Fell for a Famed Artist. Then He Got Violent How the Women\u2019s World Cup Evolved Into What It Is Today The Dangers of Unregulated Deep-Sea Tourism Podcast: Elliott Page Steps Into His Truth The True History of 'Custer's Land Stand' These Are the 100 Most Influential Companies of 2023 Write to Cady Lang at cady.lang@timemagazine.com and Moises Mendez II at moises.mendez@time.com. You May Also Like Read Next Why Verified Fan Is Ruining the Concert Experience Next Up: Editor's Pick The 25 Defining Works of the Black Renaissance EDIT POST Home U.S. Politics World Health Business Tech Personal Finance by TIME Stamped Shopping by TIME Stamped Future of Work by Charter Entertainment Ideas Science History Newsfeed Sports Magazine The TIME Vault TIME For Kids TIME CO2 TIME Edge Video Masthead Newsletters Subscribe Subscriber Benefits Give a Gift Shop the TIME Store Careers Press Room TIME Studios U.S. & Canada Customer Care Global Help Center Contact the Editors Reprints and Permissions Site Map Media Kit Supplied Partner Content About Us \u00a9 2023 TIME USA, LLC. All Rights Reserved. Use of this site constitutes acceptance of our Terms of Service, Privacy Policy (Your California Privacy Rights) and Do Not Sell or Share My Personal Information. TIME may receive compensation for some links to products and services on this website. Offers may be subject to change without notice.\n```\nNow help me write a SQL query to store the answer into a temp view. \nGive each column a clearly descriptive name (no abbreviations).\nHere is an example of how to store data into a temp view:\n```\nCREATE OR REPLACE TEMP VIEW movies AS SELECT * FROM VALUES('Citizen Kane', 1941), ('Schindler's List', 1993) AS v1(title, year)\n```\nThe result view MUST contain following columns: ['album', 'artist', 'year']\nThe answer MUST contain query only.\n", "value": "CREATE OR REPLACE TEMP VIEW best_albums_2022 AS SELECT * FROM VALUES\n('Motomami', 'Rosal\u00eda', 2022),\n('You Can\u2019t Kill Me', '070 Shake', 2022),\n('Mr. Morale & The Big Steppers', 'Kendrick Lamar', 2022),\n('Big Time', 'Angel Olsen', 2022),\n('Electricity', 'Ibibio Sound Machine', 2022),\n('It\u2019s Almost Dry', 'Pusha T', 2022),\n('Chloe and the Next 20th Century', 'Father John Misty', 2022),\n('Renaissance', 'Beyonc\u00e9', 2022),\n('19 Masters', 'Saya Gray', 2022),\n('Un Verano Sin Ti', 'Bad Bunny', 2022)\nAS v1(album, artist, year)"}
{"key": "\nThis is the documentation for a PySpark user-defined function (udf): pyspark.sql.functions.udf\n\nA udf creates a deterministic, reusable function in Spark. It can take any data type as a parameter, \nand by default returns a String (although it can return any data type). \nThe point is to reuse a function on several dataframes and SQL functions.\n\nGiven 1) input arguments, 2) a description of the udf functionality,\n3) the udf return type, and 4) the udf function name, \ngenerate and return a callable udf.\n        \nReturn ONLY the callable resulting udf function (no explanation words). \nInclude any necessary import statements INSIDE the function definition.\nFor example:\ndef gen_random():\n    import random\n    return random.randint(0, 10)\n\n\n\ninput_args_types: (s: str)\ndesc: Convert string s to uppercase\nreturn_type: str\nudf_name: to_upper\noutput: \ndef to_upper(s) -> str:\n    if s is not None:\n        return s.upper()\n\n\n\n\ninput_args_types: (x: int)\ndesc: Add 1\nreturn_type: int\nudf_name: add_one\noutput: \ndef add_one(x) -> int:\n    if x is not None:\n        return x + 1\n\n\n\n\ninput_args_types: (grade_percent: float)\ninput_desc: Convert the grade percent to a letter grade using standard cutoffs\nreturn_type: str\nudf_name: convert_grades\noutput:\n\n", "value": "def convert_grades(grade_percent: float) -> str:\n    if grade_percent is not None:\n        if grade_percent >= 90:\n            return \"A\"\n        elif grade_percent >= 80:\n            return \"B\"\n        elif grade_percent >= 70:\n            return \"C\"\n        elif grade_percent >= 60:\n            return \"D\"\n        else:\n            return \"F\""}
{"key": "\nGiven 1) a PySpark dataframe, df, and 2) a description of expected properties, desc,\ngenerate a Python function to test whether the given dataframe satisfies the expected properties.\nYour generated function should take 1 parameter, df, and the return type should be a boolean.\nYou will call the function, passing in df as the parameter, and return the output (True/False).\n\nIn total, your output must follow the format below, exactly (no explanation words):\n1. function definition f, in Python (Do NOT surround the function definition with quotes)\n2. 1 blank new line\n3. Call f on df and assign the result to a variable, result: result = name_of_f(df)\n\nInclude any necessary import statements INSIDE the function definition.\nFor example:\ndef gen_random():\n    import random\n    return random.randint(0, 10)\n\nFor example:\nInput:\ndf = DataFrame[name: string, age: int]\ndesc = \"expect 5 columns\"\n\nOutput:\ndef has_5_columns(df) -> bool:\n    # Get the number of columns in the DataFrame\n    num_columns = len(df.columns)\n\n    # Check if the number of columns is equal to 5\n    if num_columns == 5:\n        return True\n    else:\n        return False\n\nresult = has_5_columns(df)\n\nHere is your input df: DataFrame[rank: int, brand: string, us_sales: int, sales_change_percentage: int]\nHere is your input description: expect sales change percentage to be between -100 to 100\n", "value": "def check_sales_change_percentage(df) -> bool:\n    from pyspark.sql.functions import col\n\n    # Check if all values in the 'sales_change_percentage' column are between -100 and 100\n    if df.filter((col('sales_change_percentage') < -100) | (col('sales_change_percentage') > 100)).count() > 0:\n        return False\n    else:\n        return True\n\nresult = check_sales_change_percentage(df)"}
{"key": "\nGiven 1) a PySpark dataframe, df, and 2) a description of expected properties, desc,\ngenerate a Python function to test whether the given dataframe satisfies the expected properties.\nYour generated function should take 1 parameter, df, and the return type should be a boolean.\nYou will call the function, passing in df as the parameter, and return the output (True/False).\n\nIn total, your output must follow the format below, exactly (no explanation words):\n1. function definition f, in Python (Do NOT surround the function definition with quotes)\n2. 1 blank new line\n3. Call f on df and assign the result to a variable, result: result = name_of_f(df)\n\nInclude any necessary import statements INSIDE the function definition.\nFor example:\ndef gen_random():\n    import random\n    return random.randint(0, 10)\n\nFor example:\nInput:\ndf = DataFrame[name: string, age: int]\ndesc = \"expect 5 columns\"\n\nOutput:\ndef has_5_columns(df) -> bool:\n    # Get the number of columns in the DataFrame\n    num_columns = len(df.columns)\n\n    # Check if the number of columns is equal to 5\n    if num_columns == 5:\n        return True\n    else:\n        return False\n\nresult = has_5_columns(df)\n\nHere is your input df: DataFrame[president: string]\nHere is your input description: expect no NULL values\n", "value": "def has_no_null_values(df) -> bool:\n    from pyspark.sql.functions import col, sum as _sum\n\n    # Check if there are any null values in the DataFrame\n    null_counts = df.select([_sum(col(c).isNull().cast(\"int\")).alias(c) for c in df.columns]).collect()[0].asDict()\n\n    # If any column has null values, return False\n    for count in null_counts.values():\n        if count > 0:\n            return False\n\n    # If no column has null values, return True\n    return True\n\nresult = has_no_null_values(df)"}
{"key": "\nGiven 1) a PySpark dataframe, df, and 2) a description of expected properties, desc,\ngenerate a Python function to test whether the given dataframe satisfies the expected properties.\nYour generated function should take 1 parameter, df, and the return type should be a boolean.\nYou will call the function, passing in df as the parameter, and return the output (True/False).\n\nIn total, your output must follow the format below, exactly (no explanation words):\n1. function definition f, in Python (Do NOT surround the function definition with quotes)\n2. 1 blank new line\n3. Call f on df and assign the result to a variable, result: result = name_of_f(df)\n\nInclude any necessary import statements INSIDE the function definition.\nFor example:\ndef gen_random():\n    import random\n    return random.randint(0, 10)\n\nFor example:\nInput:\ndf = DataFrame[name: string, age: int]\ndesc = \"expect 5 columns\"\n\nOutput:\ndef has_5_columns(df) -> bool:\n    # Get the number of columns in the DataFrame\n    num_columns = len(df.columns)\n\n    # Check if the number of columns is equal to 5\n    if num_columns == 5:\n        return True\n    else:\n        return False\n\nresult = has_5_columns(df)\n\nHere is your input df: DataFrame[company: string, cap: decimal(11,1), country: string]\nHere is your input description: expect all company names to be unique\n", "value": "def has_unique_company_names(df) -> bool:\n    from pyspark.sql import functions as F\n\n    # Count the number of unique company names\n    unique_companies = df.select(F.countDistinct(\"company\")).collect()[0][0]\n\n    # Check if the number of unique company names is equal to the total number of rows\n    if unique_companies == df.count():\n        return True\n    else:\n        return False\n\nresult = has_unique_company_names(df)"}
{"key": "\nGiven 1) a PySpark dataframe, df, and 2) a description of expected properties, desc,\ngenerate a Python function to test whether the given dataframe satisfies the expected properties.\nYour generated function should take 1 parameter, df, and the return type should be a boolean.\nYou will call the function, passing in df as the parameter, and return the output (True/False).\n\nIn total, your output must follow the format below, exactly (no explanation words):\n1. function definition f, in Python (Do NOT surround the function definition with quotes)\n2. 1 blank new line\n3. Call f on df and assign the result to a variable, result: result = name_of_f(df)\n\nInclude any necessary import statements INSIDE the function definition.\nFor example:\ndef gen_random():\n    import random\n    return random.randint(0, 10)\n\nFor example:\nInput:\ndf = DataFrame[name: string, age: int]\ndesc = \"expect 5 columns\"\n\nOutput:\ndef has_5_columns(df) -> bool:\n    # Get the number of columns in the DataFrame\n    num_columns = len(df.columns)\n\n    # Check if the number of columns is equal to 5\n    if num_columns == 5:\n        return True\n    else:\n        return False\n\nresult = has_5_columns(df)\n\nHere is your input df: DataFrame[album: string, artist: string, year: int]\nHere is your input description: expect each year to be 2022\n", "value": "def check_year(df) -> bool:\n    from pyspark.sql.functions import col\n\n    # Check if all years in the DataFrame are 2022\n    if df.filter(col('year') != 2022).count() == 0:\n        return True\n    else:\n        return False\n\nresult = check_year(df)"}
{"key": "\nThis is the documentation for a PySpark user-defined function (udf): pyspark.sql.functions.udf\n\nA udf creates a deterministic, reusable function in Spark. It can take any data type as a parameter, \nand by default returns a String (although it can return any data type). \nThe point is to reuse a function on several dataframes and SQL functions.\n\nGiven 1) input arguments, 2) a description of the udf functionality,\n3) the udf return type, and 4) the udf function name, \ngenerate and return a callable udf.\n        \nReturn ONLY the callable resulting udf function (no explanation words).\nInclude any necessary import statements INSIDE the function definition.\nFor example:\ndef gen_random():\n    import random\n    return random.randint(0, 10)\n\n\n\ninput_args_types: (s: str)\ndesc: Convert string s to uppercase\nreturn_type: str\nudf_name: to_upper\noutput: \ndef to_upper(s) -> str:\n    if s is not None:\n        return s.upper()\n\n\n\n\ninput_args_types: (x: int)\ndesc: Add 1\nreturn_type: int\nudf_name: add_one\noutput: \ndef add_one(x) -> int:\n    if x is not None:\n        return x + 1\n\n\n\n\ninput_args_types: (grade_percent: float)\ninput_desc: Convert the grade percent to a letter grade using standard cutoffs\nreturn_type: str\nudf_name: convert_grades\noutput:\n\n", "value": "def convert_grades(grade_percent) -> str:\n    if grade_percent is not None:\n        if grade_percent >= 90.0:\n            return 'A'\n        elif grade_percent >= 80.0:\n            return 'B'\n        elif grade_percent >= 70.0:\n            return 'C'\n        elif grade_percent >= 60.0:\n            return 'D'\n        else:\n            return 'F'"}
{"key": "\nYou are an Apache Spark SQL expert programmer.\nIt is forbidden to include old deprecated APIs in your code.\nFor example, you will not use the pandas method \"append\" because it is deprecated.\n\nGiven a pyspark DataFrame `df`, with the output columns:\nrank: int\nbrand: string\nus_sales: int\nsales_change_percentage: int\n\nAnd an explanation of `df`: The analyzed plan can be translated into the following SQL query:\n```sql\nCREATE VIEW auto_sales_2022 AS\nSELECT\n  CAST(rank AS INT) AS rank,\n  CAST(brand AS STRING) AS brand,\n  CAST(us_sales AS INT) AS us_sales,\n  CAST(sales_change_percentage AS INT) AS sales_change_percentage\nFROM v1\n```\nIn summary, this dataframe is creating a view called `auto_sales_2022` with columns rank, brand, us_sales, and sales_change_percentage. The view is based on the local relation `v1` and casts the columns to their respective data types (int for rank, us_sales, and sales_change_percentage; string for brand).\n\nWrite Python code to visualize the result of `df` using plotly. Make sure to use the exact column names of `df`.\nYour code may NOT contain \"append\" anywhere. Instead of append, use pd.concat.\nThere is no need to install any package with pip. Do include any necessary import statements.\nDisplay the plot directly, instead of saving into an HTML.\nDo not use scatter plot to display any kind of percentage data.\nYou must import and start your Spark session if you use a Spark DataFrame.\nRemember to ensure that your code does NOT include \"append\" anywhere, under any circumstance (use pd.concat instead).\n\nEnsure that your code is correct.\n\n", "value": "Here is a Python code snippet that uses Plotly to visualize the result of `df`. This code assumes that `df` is a PySpark DataFrame and converts it to a Pandas DataFrame for visualization. \n\n```python\nimport plotly.express as px\nfrom pyspark.sql import SparkSession\nimport pandas as pd\n\n# Start Spark session\nspark = SparkSession.builder.appName('auto_sales_2022').getOrCreate()\n\n# Assuming df is a Spark DataFrame, convert it to Pandas DataFrame for visualization\npandas_df = df.toPandas()\n\n# Create a bar plot for us_sales by brand\nfig1 = px.bar(pandas_df, x='brand', y='us_sales', title='US Sales by Brand')\nfig1.show()\n\n# Create a bar plot for sales_change_percentage by brand\nfig2 = px.bar(pandas_df, x='brand', y='sales_change_percentage', title='Sales Change Percentage by Brand')\nfig2.show()\n```\n\nThis code creates two bar plots: one showing US sales by brand and another showing sales change percentage by brand. The plots are displayed directly using the `show()` method of the figure object. \n\nPlease note that the visualization type (bar plot in this case) and the columns used for x and y axes may need to be adjusted based on the actual data and the specific requirements of your analysis."}
{"key": "\nYou are an Apache Spark SQL expert programmer.\nIt is forbidden to include old deprecated APIs in your code.\nFor example, you will not use the pandas method \"append\" because it is deprecated.\n\nGiven a pyspark DataFrame `df`, with the output columns:\nrank: int\nbrand: string\nus_sales: int\nsales_change_percentage: int\n\nAnd an explanation of `df`: The analyzed plan can be translated into the following SQL query:\n```sql\nCREATE VIEW auto_sales_2022 AS\nSELECT\n  CAST(rank AS INT) AS rank,\n  CAST(brand AS STRING) AS brand,\n  CAST(us_sales AS INT) AS us_sales,\n  CAST(sales_change_percentage AS INT) AS sales_change_percentage\nFROM v1\n```\nIn summary, this dataframe is creating a view called `auto_sales_2022` with columns rank, brand, us_sales, and sales_change_percentage. The view is based on the local relation `v1` and casts the columns to their respective data types (int for rank, us_sales, and sales_change_percentage; string for brand).\n\nWrite Python code to visualize the result of `df` using plotly. Make sure to use the exact column names of `df`.\nYour code may NOT contain \"append\" anywhere. Instead of append, use pd.concat.\nThere is no need to install any package with pip. Do include any necessary import statements.\nDisplay the plot directly, instead of saving into an HTML.\nDo not use scatter plot to display any kind of percentage data.\nYou must import and start your Spark session if you use a Spark DataFrame.\nRemember to ensure that your code does NOT include \"append\" anywhere, under any circumstance (use pd.concat instead).\n\nEnsure that your code is correct.\nThe purpose of the plot: pie chart for US sales market shares, show the top 5 brands and the sum of others\n", "value": "Here is the Python code to visualize the result of `df` using plotly:\n\n```python\nimport plotly.graph_objects as go\nfrom pyspark.sql import SparkSession\nimport pandas as pd\n\n# Start Spark session\nspark = SparkSession.builder.getOrCreate()\n\n# Assuming df is a Spark DataFrame\n# Convert Spark DataFrame to Pandas DataFrame\npandas_df = df.toPandas()\n\n# Get top 5 brands by US sales\ntop_5_brands = pandas_df.nlargest(5, 'us_sales')\n\n# Get sum of US sales for other brands\nother_brands_sales = pandas_df[~pandas_df['brand'].isin(top_5_brands['brand'])]['us_sales'].sum()\n\n# Add other brands sales to top 5 brands DataFrame\nother_brands_df = pd.DataFrame({'brand': ['Others'], 'us_sales': [other_brands_sales]})\nfinal_df = pd.concat([top_5_brands, other_brands_df], ignore_index=True)\n\n# Create pie chart\nfig = go.Figure(data=[go.Pie(labels=final_df['brand'], values=final_df['us_sales'], hole=.3)])\n\n# Show plot\nfig.show()\n```\n\nThis code first converts the Spark DataFrame to a Pandas DataFrame. Then it gets the top 5 brands by US sales. It also calculates the sum of US sales for all other brands. This sum is then added to the DataFrame containing the top 5 brands. Finally, a pie chart is created using plotly, with the brands as labels and the US sales as values. The pie chart is then displayed."}
{"key": "Given the following question:\n```\n2022 USA national auto sales by brand\n```\nI got the following answer from a web page:\n```\nFull-Year 2022 National Auto Sales By Brand <img src=\"https://data.adxcel-ec2.com/pixel/?ad_log=referer&amp;action=lead&amp;pixid=b719b86c-f9d4-4c28-a8a8-135a5ff2099d\" width=\"1\" height=\"1\" border=\"0\"> Search Create Account Login CarPro You have a friend. Listen Live Buy a Car Find a CarPro Friend Find a Car Sell Your Car Car Buying Resources Car Reviews FAQs News Laura's Auto News Radio Show Radio Schedule Radio Blog Dealer True Stories CarPro Radio Show Podcast Driving N Heels Podcast CarPro Radio Show Newsletter Listen Live Menu News, Auto Sales Full-Year 2022 National Auto Sales By Brand Written by Jerry Reynolds January 12, 2023 Share: Facebook Twitter LinkedIn Email It was a challenging year for the auto industry, primarily due to the microchip shortages, and certainly rising interest rates did not help. There was also a noticeable lack of incentives from the automakers, and lease deals were not nearly as good as in years past. December showed some sparks of life for many car companies, as sales rose 7.2%, but not enough to put the sales numbers over the 14 million mark, making 2022 sales the lowest since 2011. General Motors regained the #1 sales leadership spot, wrestling it away from Toyota, which was #1 in 2021. Ford F-Series trucks retained the title of #1 truck in America for 46 straight years and the #1 selling vehicle overall for 41 straight years. Here are your winners and losers by brand for the full year of 2022 and how the numbers fared versus the year of 2021: Brand 2022 U.S. Sales VS 2021 1. Toyota 1,849,751 Down 9% 2. Ford 1,767,439 Down 2% 3. Chevrolet 1,502,389 Up 6% 4. Honda 881,201 Down 33% 5. Hyundai 724,265 Down 2% 6. Kia 693,549 Down 1% 7. Jeep 684,612 Down 12% 8. Nissan 682,731 Down 25% 9. Subaru 556,581 Down 5% 10. Ram Trucks 545,194 Down 16% 11. GMC 517,649 Up 7% 12. Mercedes-Benz 350,949 Up 7% 13. BMW 332,388 Down 1% 14. Volkswagen 301,069 Down 20% 15. Mazda 294,908 Down 11% 16. Lexus 258,704 Down 15% 17. Dodge 190,793 Down 12% 18. Audi 186,875 Down 5% 19. Cadillac 134,726 Up 14% 20. Chrysler 112,713 Down 2% 21. Buick 103,519 Down 42% 22. Acura 102,306 Down 35% 23. Volvo 102,038 Down 16% 24. Mitsubishi 102,037 Down 16% 25. Lincoln 83,486 Down 4% 26. Porsche 70,065 Flat 27. Genesis 56,410 Up 14% 28. INFINITI 46,619 Down 20% 29. MINI 29,504 Down 1% 30. Alfa Romeo 12,845 Down 30% 31. Maserati 6,413 Down 10% 32. Bentley 3,975 FLAT 33. Lamborghini 3,134 Up 3% 34. Fiat 915 Down 61% 35. McLaren 840 Down 35% 36. Rolls-Royce 460 Up 7% Note: Jaguar and Land Rover have not reported 2022 sales. Also, the all-electric makes like Tesla, Lucid, Karma, and Polestar do not report sales, only how many vehicles were produced, but that is not a reflection of actual sales since we don\u2019t know how many were built, but not sold. Photo Credit: Toyota. Share: Facebook Twitter LinkedIn Email Jerry Reynolds From police officer to top-selling Ford dealer to on-air car expert, Jerry helms our weekly radio show. Since selling his dealerships in 2006, Jerry has pursued his top three passions: helping consumers have a great car buying experience, supporting the military and first responders, being a loyal servant to his dog! While Jerry admits to hitting the pedal to the metal on test drives, it's all the service of finding out just how fast he can go from 0 to 60. Share On Facebook Share On Twitter Recent Posts Crime Wave: Two Vehicles Stolen Every Minute Read Post Summer Road Trip Checklist For Your Car Read Post CarPro Follow us on Facebook Follow us on Twitter Follow us on Youtube Follow us on Instagram Find a CarPro Friend Find a Car Radio Show About Us Why CarPro FAQs News Car Reviews Laura's Auto News Radio Show Newsletter Website Help Email the CarPro Media Company Inquiry Become a Radio Partner Become a Certified CarPro \u00a92023 CarPro Privacy Policy Terms Of Use Accessibility Statement CarPro requires our Certified Dealers to meet certain customer service requirements in accordance with our Certification Process and Agreement. CarPro does not broker, sell, or lease vehicles. All vehicles shown on this website are offered for sale by licensed motor vehicle dealers, unless where otherwise noted. Used vehicles are subject to prior sale. By accessing this website, you agree to the CarPro Terms of Service and Privacy Policy. We strive to update our website in a timely manner however CarPro cannot guarantee that the inventory shown will be available at the dealership. We are not responsible for typographical and other errors, including data transmissions or software errors that may appear on the site. If the posted price, incentive, offer or other service is incorrect due to typographical or other error we will only be responsible for honoring the correct price, incentive or offer. We make every effort to provide you the most accurate, up-to-the-minute information however when you are ready to purchase products or services, it is your responsibility to verify with us that all details listed are accurate. Prices include all applicable rebates.\n```\nNow help me write a SQL query to store the answer into a temp view. \nGive each column a clearly descriptive name (no abbreviations).\nIf a column can be either String or Numeric, ingest it as Numeric.\nHere is an example of how to store data into the temp view temp_view_118358:\n```\nCREATE OR REPLACE TEMP VIEW temp_view_118358 AS SELECT * FROM VALUES('Citizen Kane', 1941), ('Schindler's List', 1993) AS v1(title, year)\n```\n\nThe answer MUST contain query only and the temp view MUST be temp_view_118358.\n", "value": "Here is the SQL query to store the data into the temp view temp_view_118358:\n\n```sql\nCREATE OR REPLACE TEMP VIEW temp_view_118358 AS SELECT * FROM VALUES\n('Toyota', 1849751, -9),\n('Ford', 1767439, -2),\n('Chevrolet', 1502389, 6),\n('Honda', 881201, -33),\n('Hyundai', 724265, -2),\n('Kia', 693549, -1),\n('Jeep', 684612, -12),\n('Nissan', 682731, -25),\n('Subaru', 556581, -5),\n('Ram Trucks', 545194, -16),\n('GMC', 517649, 7),\n('Mercedes-Benz', 350949, 7),\n('BMW', 332388, -1),\n('Volkswagen', 301069, -20),\n('Mazda', 294908, -11),\n('Lexus', 258704, -15),\n('Dodge', 190793, -12),\n('Audi', 186875, -5),\n('Cadillac', 134726, 14),\n('Chrysler', 112713, -2),\n('Buick', 103519, -42),\n('Acura', 102306, -35),\n('Volvo', 102038, -16),\n('Mitsubishi', 102037, -16),\n('Lincoln', 83486, -4),\n('Porsche', 70065, 0),\n('Genesis', 56410, 14),\n('INFINITI', 46619, -20),\n('MINI', 29504, -1),\n('Alfa Romeo', 12845, -30),\n('Maserati', 6413, -10),\n('Bentley', 3975, 0),\n('Lamborghini', 3134, 3),\n('Fiat', 915, -61),\n('McLaren', 840, -35),\n('Rolls-Royce', 460, 7)\nAS v1(Brand, US_Sales_2022, Sales_Change_Percentage)\n```\n\nThis query creates a temporary view named `temp_view_118358` with three columns: `Brand`, `US_Sales_2022`, and `Sales_Change_Percentage`. The values are inserted into the view as specified in the question."}
{"key": "You are an Apache Spark SQL expert, who can summary what a dataframe retrieves. Given an analyzed \nquery plan of a dataframe, you will \n1. convert the dataframe to SQL query. Note that an explain output contains plan \nnodes separated by `\\n`. Each plan node has its own expressions and expression ids. \n2. summary what the sql query retrieves. \n\n\n\nanalyzed_plan: \nGlobalLimit 100\n    +- LocalLimit 100\n       +- Sort [d_year ASC NULLS FIRST, sum_agg DESC NULLS LAST, brand_id ASC NULLS FIRST], true\n          +- Aggregate [d_year, i_brand, i_brand_id], [d_year, i_brand_id AS brand_id, i_brand AS brand, sum(ss_ext_sales_price) AS sum_agg]\n             +- Filter (((d_date_sk = ss_sold_date_sk) AND (ss_item_sk = i_item_sk)) AND ((i_manufact_id = 128) AND (d_moy = 11)))\n                +- Join Inner\n                   :- Join Inner\n                   :  :- SubqueryAlias dt\n                   :  :  +- SubqueryAlias spark_catalog.tpcds_sf1_delta.date_dim\n                   :  :     +- Relation spark_catalog.tpcds_sf1_delta.date_dim[d_date_sk,d_date_id,d_date,d_month_seq,d_week_seq,d_quarter_seq,d_year,d_dow,d_moy,d_dom,d_qoy,d_fy_year,d_fy_quarter_seq,d_fy_week_seq,d_day_name,d_quarter_name,d_holiday,d_weekend,d_following_holiday,d_first_dom,d_last_dom,d_same_day_ly,d_same_day_lq,d_current_day,... 4 more fields] parquet\n                   :  +- SubqueryAlias spark_catalog.tpcds_sf1_delta.store_sales\n                   :     +- Relation spark_catalog.tpcds_sf1_delta.store_sales[ss_sold_date_sk,ss_sold_time_sk,ss_item_sk,ss_customer_sk,ss_cdemo_sk,ss_hdemo_sk,ss_addr_sk,ss_store_sk,ss_promo_sk,ss_ticket_numberL,ss_quantity,ss_wholesale_cost,ss_list_price,ss_sales_price,ss_ext_discount_amt,ss_ext_sales_price,ss_ext_wholesale_cost,ss_ext_list_price,ss_ext_tax,ss_coupon_amt,ss_net_paid,ss_net_paid_inc_tax,ss_net_profit] parquet\n                   +- SubqueryAlias spark_catalog.tpcds_sf1_delta.item\n                      +- Relation spark_catalog.tpcds_sf1_delta.item[i_item_sk,i_item_id,i_rec_start_date,i_rec_end_date,i_item_desc,i_current_price,i_wholesale_cost,i_brand_id,i_brand,i_class_id,i_class,i_category_id,i_category,i_manufact_id,i_manufact,i_size,i_formulation,i_color,i_units,i_container,i_manager_id,i_product_name] parquet\n\nexplain: \nThe analyzed plan can be translated into the following SQL query:\n```sql\nSELECT\n  dt.d_year,\n  item.i_brand_id brand_id,\n  item.i_brand brand,\n  SUM(ss_ext_sales_price) sum_agg\nFROM date_dim dt, store_sales, item\nWHERE dt.d_date_sk = store_sales.ss_sold_date_sk\n  AND store_sales.ss_item_sk = item.i_item_sk\n  AND item.i_manufact_id = 128\n  AND dt.d_moy = 11\nGROUP BY dt.d_year, item.i_brand, item.i_brand_id\nORDER BY dt.d_year, sum_agg DESC, brand_id\nLIMIT 100\n```\nIn summary, this dataframe is retrieving the top 100 brands (specifically of items manufactured by manufacturer with id 128) with the highest total sales price for each year in the month of November. It presents the results sorted by year, total sales (in descending order), and brand id.\n\n\n\nanalyzed_plan: SubqueryAlias temp_view_118358\n+- View (`temp_view_118358`, [Brand,US_Sales_2022,Sales_Change_Percentage])\n   +- Project [cast(Brand as string) AS Brand, cast(US_Sales_2022 as int) AS US_Sales_2022, cast(Sales_Change_Percentage as int) AS Sales_Change_Percentage]\n      +- Project [Brand, US_Sales_2022, Sales_Change_Percentage]\n         +- SubqueryAlias v1\n            +- LocalRelation [Brand, US_Sales_2022, Sales_Change_Percentage]\n\nexplain:", "value": "The analyzed plan can be translated into the following SQL query:\n```sql\nCREATE VIEW temp_view_118358 AS\nSELECT\n  CAST(Brand AS STRING) AS Brand,\n  CAST(US_Sales_2022 AS INT) AS US_Sales_2022,\n  CAST(Sales_Change_Percentage AS INT) AS Sales_Change_Percentage\nFROM v1\n```\nIn summary, this dataframe is creating a view named `temp_view_118358` from a local relation `v1`. The view contains three columns: `Brand`, `US_Sales_2022`, and `Sales_Change_Percentage`. The data types of these columns are string, integer, and integer respectively."}
{"key": "\nYou are an Apache Spark SQL expert programmer.\nIt is forbidden to include old deprecated APIs in your code.\nFor example, you will not use the pandas method \"append\" because it is deprecated.\n\nGiven a pyspark DataFrame `df`, with the output columns:\nBrand: string\nUS_Sales_2022: int\nSales_Change_Percentage: int\n\nAnd an explanation of `df`: The analyzed plan can be translated into the following SQL query:\n```sql\nCREATE VIEW temp_view_118358 AS\nSELECT\n  CAST(Brand AS STRING) AS Brand,\n  CAST(US_Sales_2022 AS INT) AS US_Sales_2022,\n  CAST(Sales_Change_Percentage AS INT) AS Sales_Change_Percentage\nFROM v1\n```\nIn summary, this dataframe is creating a view named `temp_view_118358` from a local relation `v1`. The view contains three columns: `Brand`, `US_Sales_2022`, and `Sales_Change_Percentage`. The data types of these columns are string, integer, and integer respectively.\n\nWrite Python code to visualize the result of `df` using plotly. Make sure to use the exact column names of `df`.\nYour code may NOT contain \"append\" anywhere. Instead of append, use pd.concat.\nThere is no need to install any package with pip. Do include any necessary import statements.\nDisplay the plot directly, instead of saving into an HTML.\nDo not use scatter plot to display any kind of percentage data.\nYou must import and start your Spark session if you use a Spark DataFrame.\nRemember to ensure that your code does NOT include \"append\" anywhere, under any circumstance (use pd.concat instead).\n\nEnsure that your code is correct.\nThe purpose of the plot: pie chart for US sales market shares, show the top 5 brands and the sum of others\n", "value": "Here is the Python code to visualize the result of `df` using plotly:\n\n```python\nimport plotly.graph_objects as go\nfrom pyspark.sql import SparkSession\nimport pandas as pd\n\n# Start Spark session\nspark = SparkSession.builder.getOrCreate()\n\n# Convert Spark DataFrame to Pandas DataFrame\npandas_df = df.toPandas()\n\n# Calculate the total sales\ntotal_sales = pandas_df['US_Sales_2022'].sum()\n\n# Calculate the sales percentage for each brand\npandas_df['Sales_Percentage'] = pandas_df['US_Sales_2022'] / total_sales * 100\n\n# Sort the dataframe by sales percentage in descending order\npandas_df = pandas_df.sort_values('Sales_Percentage', ascending=False)\n\n# Get the top 5 brands\ntop_5_brands = pandas_df.head(5)\n\n# Calculate the sum of sales percentage for other brands\nother_brands = pd.DataFrame([['Others', pandas_df[5:]['Sales_Percentage'].sum()]], columns=['Brand', 'Sales_Percentage'])\n\n# Concatenate the top 5 brands and other brands\nfinal_df = pd.concat([top_5_brands, other_brands], ignore_index=True)\n\n# Create a pie chart\nfig = go.Figure(data=[go.Pie(labels=final_df['Brand'], values=final_df['Sales_Percentage'], hole=.3)])\n\n# Show the plot\nfig.show()\n```\n\nThis code first converts the Spark DataFrame to a Pandas DataFrame. Then, it calculates the sales percentage for each brand and sorts the dataframe by sales percentage in descending order. It gets the top 5 brands and calculates the sum of sales percentage for other brands. Finally, it concatenates the top 5 brands and other brands and creates a pie chart to visualize the US sales market shares."}
{"key": "\nGiven a Spark temp view `temp_view_d8e783` with the following columns:\n```\nBrand: string\nUS_Sales_2022: int\nSales_Change_Percentage: int\n```\nWrite a Spark SQL query to retrieve: brand with the highest growth\nThe answer MUST contain query only. Ensure your answer is correct.\n", "value": "```sql\nSELECT Brand \nFROM temp_view_d8e783 \nORDER BY Sales_Change_Percentage DESC \nLIMIT 1\n```"}
{"key": "You are an Apache Spark SQL expert, who can summary what a dataframe retrieves. Given an analyzed \nquery plan of a dataframe, you will \n1. convert the dataframe to SQL query. Note that an explain output contains plan \nnodes separated by `\\n`. Each plan node has its own expressions and expression ids. \n2. summary what the sql query retrieves. \n\n\n\nanalyzed_plan: \nGlobalLimit 100\n    +- LocalLimit 100\n       +- Sort [d_year ASC NULLS FIRST, sum_agg DESC NULLS LAST, brand_id ASC NULLS FIRST], true\n          +- Aggregate [d_year, i_brand, i_brand_id], [d_year, i_brand_id AS brand_id, i_brand AS brand, sum(ss_ext_sales_price) AS sum_agg]\n             +- Filter (((d_date_sk = ss_sold_date_sk) AND (ss_item_sk = i_item_sk)) AND ((i_manufact_id = 128) AND (d_moy = 11)))\n                +- Join Inner\n                   :- Join Inner\n                   :  :- SubqueryAlias dt\n                   :  :  +- SubqueryAlias spark_catalog.tpcds_sf1_delta.date_dim\n                   :  :     +- Relation spark_catalog.tpcds_sf1_delta.date_dim[d_date_sk,d_date_id,d_date,d_month_seq,d_week_seq,d_quarter_seq,d_year,d_dow,d_moy,d_dom,d_qoy,d_fy_year,d_fy_quarter_seq,d_fy_week_seq,d_day_name,d_quarter_name,d_holiday,d_weekend,d_following_holiday,d_first_dom,d_last_dom,d_same_day_ly,d_same_day_lq,d_current_day,... 4 more fields] parquet\n                   :  +- SubqueryAlias spark_catalog.tpcds_sf1_delta.store_sales\n                   :     +- Relation spark_catalog.tpcds_sf1_delta.store_sales[ss_sold_date_sk,ss_sold_time_sk,ss_item_sk,ss_customer_sk,ss_cdemo_sk,ss_hdemo_sk,ss_addr_sk,ss_store_sk,ss_promo_sk,ss_ticket_numberL,ss_quantity,ss_wholesale_cost,ss_list_price,ss_sales_price,ss_ext_discount_amt,ss_ext_sales_price,ss_ext_wholesale_cost,ss_ext_list_price,ss_ext_tax,ss_coupon_amt,ss_net_paid,ss_net_paid_inc_tax,ss_net_profit] parquet\n                   +- SubqueryAlias spark_catalog.tpcds_sf1_delta.item\n                      +- Relation spark_catalog.tpcds_sf1_delta.item[i_item_sk,i_item_id,i_rec_start_date,i_rec_end_date,i_item_desc,i_current_price,i_wholesale_cost,i_brand_id,i_brand,i_class_id,i_class,i_category_id,i_category,i_manufact_id,i_manufact,i_size,i_formulation,i_color,i_units,i_container,i_manager_id,i_product_name] parquet\n\nexplain: \nThe analyzed plan can be translated into the following SQL query:\n```sql\nSELECT\n  dt.d_year,\n  item.i_brand_id brand_id,\n  item.i_brand brand,\n  SUM(ss_ext_sales_price) sum_agg\nFROM date_dim dt, store_sales, item\nWHERE dt.d_date_sk = store_sales.ss_sold_date_sk\n  AND store_sales.ss_item_sk = item.i_item_sk\n  AND item.i_manufact_id = 128\n  AND dt.d_moy = 11\nGROUP BY dt.d_year, item.i_brand, item.i_brand_id\nORDER BY dt.d_year, sum_agg DESC, brand_id\nLIMIT 100\n```\nIn summary, this dataframe is retrieving the top 100 brands (specifically of items manufactured by manufacturer with id 128) with the highest total sales price for each year in the month of November. It presents the results sorted by year, total sales (in descending order), and brand id.\n\n\n\nanalyzed_plan: GlobalLimit 1\n+- LocalLimit 1\n   +- Project [Brand]\n      +- Sort [Sales_Change_Percentage DESC NULLS LAST], true\n         +- Project [Brand, Sales_Change_Percentage]\n            +- SubqueryAlias temp_view_d8e783\n               +- View (`temp_view_d8e783`, [Brand,US_Sales_2022,Sales_Change_Percentage])\n                  +- SubqueryAlias temp_view_118358\n                     +- View (`temp_view_118358`, [Brand,US_Sales_2022,Sales_Change_Percentage])\n                        +- Project [cast(Brand as string) AS Brand, cast(US_Sales_2022 as int) AS US_Sales_2022, cast(Sales_Change_Percentage as int) AS Sales_Change_Percentage]\n                           +- Project [Brand, US_Sales_2022, Sales_Change_Percentage]\n                              +- SubqueryAlias v1\n                                 +- LocalRelation [Brand, US_Sales_2022, Sales_Change_Percentage]\n\nexplain:", "value": "The analyzed plan can be translated into the following SQL query:\n```sql\nSELECT\n  Brand,\n  US_Sales_2022,\n  Sales_Change_Percentage\nFROM v1\nORDER BY Sales_Change_Percentage DESC\nLIMIT 1\n```\nIn summary, this dataframe is retrieving the brand with the highest sales change percentage in 2022. It presents the brand name, its US sales in 2022, and the sales change percentage."}
{"key": "Given the following question:\n```\nUSA presidents\n```\nI got the following answer from a web page:\n```\nChronological List of Presidents, First Ladies, and Vice Presidents of the United States - Guides, Reference Aids, and Finding Aids (Prints andPhotographs Reading Room, Library of Congress) The Library of Congress >> Researchers Home >> Image Lists >> Presidents Find in Image Lists Prints and Photographs Pages Researchers Web Pages All Library of Congress Pages Chronological List of Presidents, First Ladies, and Vice Presidents of the United States Selected Images From the Collections of the Library of Congress Prints and Photographs Division, Library of Congress, Washington, D.C., 20540-4730 This chronological list contains entries for each president with his corresponding first lady and vice president. Note: Multiple entries appear for a president whenever there was a change in the office of vice president. YEAR PRESIDENT FIRST LADY VICE PRESIDENT 1789-1797 George Washington Martha Washington John Adams 1797-1801 John Adams Abigail Adams Thomas Jefferson 1801-1805 Thomas Jefferson [Martha Wayles Skelton Jefferson died before Jefferson assumed office; no image of her in P&P collections] Aaron Burr 1805-1809 Thomas Jefferson see above George Clinton 1809-1812 James Madison Dolley Madison George Clinton 1812-1813 James Madison Dolley Madison office vacant 1813-1814 James Madison Dolley Madison Elbridge Gerry 1814-1817 James Madison Dolley Madison office vacant 1817-1825 James Monroe Elizabeth Kortright Monroe (no image) Daniel D. Tompkins 1825-1829 John Quincy Adams Louisa Catherine Adams John C. Calhoun 1829-1832 Andrew Jackson Rachel Jackson [Rachel Donelson Jackson died before Jackson assumed office and did not serve as first lady] John C. Calhoun 1833-1837 Andrew Jackson Rachel Jackson [Rachel Donelson Jackson died before Jackson assumed office and did not serve as first lady] Martin Van Buren 1837-1841 Martin Van Buren Hannah Hoes Van Buren Richard M. Johnson 1841 William Henry Harrison Anna Tuthill Symmes Harrison John Tyler 1841-1845 John Tyler Letitia Christian Tyler and Julia Gardiner Tyler (no images) office vacant 1845-1849 James K. Polk Sarah Childress Polk George M. Dallas 1849-1850 Zachary Taylor Margaret Mackall Smith Taylor (no image) Millard Fillmore 1850-1853 Millard Fillmore Abigail Powers Fillmore office vacant 1853 Franklin Pierce Jane M. Pierce William R. King 1853-1857 Franklin Pierce Jane M. Pierce office vacant 1857-1861 James Buchanan (never married) John C. Breckinridge 1861-1865 Abraham Lincoln Mary Todd Lincoln Hannibal Hamlin 1865 Abraham Lincoln Mary Todd Lincoln Andrew Johnson 1865-1869 Andrew Johnson Eliza McCardle Johnson office vacant 1869-1873 Ulysses S. Grant Julia Dent Grant Schuyler Colfax 1873-1875 Ulysses S. Grant Julia Dent Grant Henry Wilson 1875-1877 Ulysses S. Grant Julia Dent Grant office vacant 1877-1881 Rutherford Birchard Hayes Lucy Webb Hayes William A. Wheeler 1881 James A. Garfield Lucretia Rudolph Garfield Chester A. Arthur 1881-1885 Chester A. Arthur Ellen Lewis Herndon Arthur office vacant 1885 Grover Cleveland Frances Folsom Cleveland Thomas A. Hendricks 1885-1889 Grover Cleveland Frances Folsom Cleveland office vacant 1889-1893 Benjamin Harrison Caroline Lavinia Scott Harrison Mary Lord Harrison [Harrison's second wife, but never a first lady] Levi P. Morton 1893-1897 Grover Cleveland Frances Folsom Cleveland Adlai E. Stevenson 1897-1899 William McKinley Ida Saxton McKinley Garret A. Hobart 1899-1901 William McKinley Ida Saxton McKinley office vacant 1901 William McKinley Ida Saxton McKinley Theodore Roosevelt 1901-1905 Theodore Roosevelt Edith Kermit Carow Roosevelt office vacant 1905-1909 Theodore Roosevelt Edith Kermit Carow Roosevelt Charles W. Fairbanks 1909-1912 William H. Taft Helen Herron Taft James S. Sherman 1912-1913 William H. Taft Helen Herron Taft office vacant 1913-1921 Woodrow Wilson Ellen Axson Wilson and Edith Bolling Galt Wilson Thomas R. Marshall 1921-1923 Warren G. Harding Florence Kling Harding Calvin Coolidge 1923-1925 Calvin Coolidge Grace Goodhue Coolidge office vacant 1925-1929 Calvin Coolidge Grace Goodhue Coolidge Charles G. Dawes 1929-1933 Herbert Hoover Lou Henry Hoover Charles Curtis 1933-1941 Franklin D. Roosevelt Eleanor Roosevelt John N. Garner 1941-1945 Franklin D. Roosevelt Eleanor Roosevelt Henry A. Wallace 1945 Franklin D. Roosevelt Eleanor Roosevelt Harry S. Truman 1945-1949 Harry S. Truman Bess Wallace Truman office vacant 1949-1953 Harry S. Truman Bess Wallace Truman Barkley, Alben W. 1953-1961 Dwight D. Eisenhower Mamie Doud Eisenhower Richard M. Nixon 1961-1963 John F. Kennedy Jacqueline Kennedy Lyndon B. Johnson 1963-1965 Lyndon B. Johnson Lady Bird Johnson office vacant 1965-1969 Lyndon B. Johnson Lady Bird Johnson Hubert H. Humphrey 1969-1973 Richard M. Nixon Pat Nixon Spiro T. Agnew 1973-1974 Richard M. Nixon Pat Nixon Gerald R. Ford 1974-1977 Gerald R. Ford Betty Ford Nelson Rockefeller 1977-1981 Jimmy Carter Rosalynn Carter Walter F. Mondale 1981-1989 Ronald Reagan Nancy Reagan George Bush 1989-1993 George Bush Barbara Bush Dan Quayle 1993-2001 Bill Clinton Hillary Rodham Clinton Albert Gore 2001-2009 George W. Bush Laura Bush Richard Cheney 2009-2017 Barack Obama Michelle Obama Joseph R. Biden 2017-2021 Donald J. Trump Melania Trump Mike Pence 2021- Joseph R. Biden Jill Biden Kamala Harris Presidents: Introduction (Rights/Ordering Info.) | Adams - Cleveland | Clinton - Harding Harrison - Jefferson | Johnson - McKinley | Monroe - Roosevelt | Taft - Trump | Tyler - Wilson List of names, Alphabetically | List of names, Chronologically First Ladies: Introduction (Rights/Ordering Info.) | Adams - Coolidge | Eisenhower - Hoover Jackson - Pierce | Polk - Wilson | List of names, Alphabetically Vice Presidents: Introduction (Rights/Ordering Info.) | Adams - Coolidge | Curtis - Hobart Humphrey - Rockefeller | Roosevelt - Wilson List of names, Alphabetically | List of names, Chronologically Top of Page Home >> Image Lists >> Presidents Find in Image Lists Prints and Photographs Pages Researchers Web Pages All Library of Congress Pages The Library of Congress >> Researchers December 21, 2020 Legal | External Link Disclaimer Contact Us: Ask a Librarian\n```\nNow help me write a SQL query to store the answer into a temp view. \nGive each column a clearly descriptive name (no abbreviations).\nIf a column can be either String or Numeric, ingest it as Numeric.\nHere is an example of how to store data into the temp view temp_view_0451bc:\n```\nCREATE OR REPLACE TEMP VIEW temp_view_0451bc AS SELECT * FROM VALUES('Citizen Kane', 1941), ('Schindler's List', 1993) AS v1(title, year)\n```\nThe result view MUST contain following columns: ['president', 'vice_president']\nThe answer MUST contain query only and the temp view MUST be temp_view_0451bc.\n", "value": "Here is the SQL query to store the data into a temp view:\n\n```sql\nCREATE OR REPLACE TEMP VIEW temp_view_0451bc AS SELECT * FROM VALUES\n('George Washington', 'John Adams'),\n('John Adams', 'Thomas Jefferson'),\n('Thomas Jefferson', 'Aaron Burr'),\n('Thomas Jefferson', 'George Clinton'),\n('James Madison', 'George Clinton'),\n('James Madison', 'Elbridge Gerry'),\n('James Monroe', 'Daniel D. Tompkins'),\n('John Quincy Adams', 'John C. Calhoun'),\n('Andrew Jackson', 'John C. Calhoun'),\n('Andrew Jackson', 'Martin Van Buren'),\n('Martin Van Buren', 'Richard M. Johnson'),\n('William Henry Harrison', 'John Tyler'),\n('John Tyler', NULL),\n('James K. Polk', 'George M. Dallas'),\n('Zachary Taylor', 'Millard Fillmore'),\n('Millard Fillmore', NULL),\n('Franklin Pierce', 'William R. King'),\n('Franklin Pierce', NULL),\n('James Buchanan', 'John C. Breckinridge'),\n('Abraham Lincoln', 'Hannibal Hamlin'),\n('Abraham Lincoln', 'Andrew Johnson'),\n('Andrew Johnson', NULL),\n('Ulysses S. Grant', 'Schuyler Colfax'),\n('Ulysses S. Grant', 'Henry Wilson'),\n('Ulysses S. Grant', NULL),\n('Rutherford Birchard Hayes', 'William A. Wheeler'),\n('James A. Garfield', 'Chester A. Arthur'),\n('Chester A. Arthur', NULL),\n('Grover Cleveland', 'Thomas A. Hendricks'),\n('Grover Cleveland', NULL),\n('Benjamin Harrison', 'Levi P. Morton'),\n('Grover Cleveland', 'Adlai E. Stevenson'),\n('William McKinley', 'Garret A. Hobart'),\n('William McKinley', NULL),\n('William McKinley', 'Theodore Roosevelt'),\n('Theodore Roosevelt', NULL),\n('Theodore Roosevelt', 'Charles W. Fairbanks'),\n('William H. Taft', 'James S. Sherman'),\n('William H. Taft', NULL),\n('Woodrow Wilson', 'Thomas R. Marshall'),\n('Warren G. Harding', 'Calvin Coolidge'),\n('Calvin Coolidge', NULL),\n('Calvin Coolidge', 'Charles G. Dawes'),\n('Herbert Hoover', 'Charles Curtis'),\n('Franklin D. Roosevelt', 'John N. Garner'),\n('Franklin D. Roosevelt', 'Henry A. Wallace'),\n('Franklin D. Roosevelt', 'Harry S. Truman'),\n('Harry S. Truman', NULL),\n('Harry S. Truman', 'Barkley, Alben W.'),\n('Dwight D. Eisenhower', 'Richard M. Nixon'),\n('John F. Kennedy', 'Lyndon B. Johnson'),\n('Lyndon B. Johnson', NULL),\n('Lyndon B. Johnson', 'Hubert H. Humphrey'),\n('Richard M. Nixon', 'Spiro T. Agnew'),\n('Richard M. Nixon', 'Gerald R. Ford'),\n('Gerald R. Ford', 'Nelson Rockefeller'),\n('Jimmy Carter', 'Walter F. Mondale'),\n('Ronald Reagan', 'George Bush'),\n('George Bush', 'Dan Quayle'),\n('Bill Clinton', 'Albert Gore'),\n('George W. Bush', 'Richard Cheney'),\n('Barack Obama', 'Joseph R. Biden'),\n('Donald J. Trump', 'Mike Pence'),\n('Joseph R. Biden', 'Kamala Harris')\nAS v1(president, vice_president)\n```\nThis query creates a temporary view named `temp_view_0451bc` with two columns: `president` and `vice_president`. The `VALUES` clause is used to insert the data into the view."}
{"key": "\nGiven a Spark temp view `temp_view_a6e278` with the following columns:\n```\npresident: string\nvice_president: string\n```\nWrite a Spark SQL query to retrieve: presidents who were also vice presidents\nThe answer MUST contain query only. Ensure your answer is correct.\n", "value": "SELECT DISTINCT president \nFROM temp_view_a6e278 \nWHERE president IN (SELECT vice_president FROM temp_view_a6e278)"}
{"key": "You are an Apache Spark SQL expert, who can summary what a dataframe retrieves. Given an analyzed \nquery plan of a dataframe, you will \n1. convert the dataframe to SQL query. Note that an explain output contains plan \nnodes separated by `\\n`. Each plan node has its own expressions and expression ids. \n2. summary what the sql query retrieves. \n\n\n\nanalyzed_plan: \nGlobalLimit 100\n    +- LocalLimit 100\n       +- Sort [d_year ASC NULLS FIRST, sum_agg DESC NULLS LAST, brand_id ASC NULLS FIRST], true\n          +- Aggregate [d_year, i_brand, i_brand_id], [d_year, i_brand_id AS brand_id, i_brand AS brand, sum(ss_ext_sales_price) AS sum_agg]\n             +- Filter (((d_date_sk = ss_sold_date_sk) AND (ss_item_sk = i_item_sk)) AND ((i_manufact_id = 128) AND (d_moy = 11)))\n                +- Join Inner\n                   :- Join Inner\n                   :  :- SubqueryAlias dt\n                   :  :  +- SubqueryAlias spark_catalog.tpcds_sf1_delta.date_dim\n                   :  :     +- Relation spark_catalog.tpcds_sf1_delta.date_dim[d_date_sk,d_date_id,d_date,d_month_seq,d_week_seq,d_quarter_seq,d_year,d_dow,d_moy,d_dom,d_qoy,d_fy_year,d_fy_quarter_seq,d_fy_week_seq,d_day_name,d_quarter_name,d_holiday,d_weekend,d_following_holiday,d_first_dom,d_last_dom,d_same_day_ly,d_same_day_lq,d_current_day,... 4 more fields] parquet\n                   :  +- SubqueryAlias spark_catalog.tpcds_sf1_delta.store_sales\n                   :     +- Relation spark_catalog.tpcds_sf1_delta.store_sales[ss_sold_date_sk,ss_sold_time_sk,ss_item_sk,ss_customer_sk,ss_cdemo_sk,ss_hdemo_sk,ss_addr_sk,ss_store_sk,ss_promo_sk,ss_ticket_numberL,ss_quantity,ss_wholesale_cost,ss_list_price,ss_sales_price,ss_ext_discount_amt,ss_ext_sales_price,ss_ext_wholesale_cost,ss_ext_list_price,ss_ext_tax,ss_coupon_amt,ss_net_paid,ss_net_paid_inc_tax,ss_net_profit] parquet\n                   +- SubqueryAlias spark_catalog.tpcds_sf1_delta.item\n                      +- Relation spark_catalog.tpcds_sf1_delta.item[i_item_sk,i_item_id,i_rec_start_date,i_rec_end_date,i_item_desc,i_current_price,i_wholesale_cost,i_brand_id,i_brand,i_class_id,i_class,i_category_id,i_category,i_manufact_id,i_manufact,i_size,i_formulation,i_color,i_units,i_container,i_manager_id,i_product_name] parquet\n\nexplain: \nThe analyzed plan can be translated into the following SQL query:\n```sql\nSELECT\n  dt.d_year,\n  item.i_brand_id brand_id,\n  item.i_brand brand,\n  SUM(ss_ext_sales_price) sum_agg\nFROM date_dim dt, store_sales, item\nWHERE dt.d_date_sk = store_sales.ss_sold_date_sk\n  AND store_sales.ss_item_sk = item.i_item_sk\n  AND item.i_manufact_id = 128\n  AND dt.d_moy = 11\nGROUP BY dt.d_year, item.i_brand, item.i_brand_id\nORDER BY dt.d_year, sum_agg DESC, brand_id\nLIMIT 100\n```\nIn summary, this dataframe is retrieving the top 100 brands (specifically of items manufactured by manufacturer with id 128) with the highest total sales price for each year in the month of November. It presents the results sorted by year, total sales (in descending order), and brand id.\n\n\n\nanalyzed_plan: Distinct\n+- Project [president]\n   +- Filter president IN (list [])\n      :  +- Project [vice_president]\n      :     +- SubqueryAlias temp_view_a6e278\n      :        +- View (`temp_view_a6e278`, [president,vice_president])\n      :           +- SubqueryAlias temp_view_0451bc\n      :              +- View (`temp_view_0451bc`, [president,vice_president])\n      :                 +- Project [cast(president as string) AS president, cast(vice_president as string) AS vice_president]\n      :                    +- Project [president, vice_president]\n      :                       +- SubqueryAlias v1\n      :                          +- LocalRelation [president, vice_president]\n      +- SubqueryAlias temp_view_a6e278\n         +- View (`temp_view_a6e278`, [president,vice_president])\n            +- SubqueryAlias temp_view_0451bc\n               +- View (`temp_view_0451bc`, [president,vice_president])\n                  +- Project [cast(president as string) AS president, cast(vice_president as string) AS vice_president]\n                     +- Project [president, vice_president]\n                        +- SubqueryAlias v1\n                           +- LocalRelation [president, vice_president]\n\nexplain:", "value": "The analyzed plan can be translated into the following SQL query:\n```sql\nSELECT DISTINCT president\nFROM temp_view_a6e278\nWHERE president IN (\n  SELECT vice_president\n  FROM temp_view_a6e278\n)\n```\nIn summary, this dataframe is retrieving the distinct presidents who have also served as vice presidents. The data is sourced from a temporary view named `temp_view_a6e278`."}
{"key": "\nGiven 1) a PySpark dataframe, df, and 2) a description of expected properties, desc,\ngenerate a Python function to test whether the given dataframe satisfies the expected properties.\nYour generated function should take 1 parameter, df, and the return type should be a boolean.\nYou will call the function, passing in df as the parameter, and return the output (True/False).\n\nIn total, your output must follow the format below, exactly (no explanation words):\n1. function definition f, in Python (Do NOT surround the function definition with quotes)\n2. 1 blank new line\n3. Call f on df and assign the result to a variable, result: result = name_of_f(df)\n\nInclude any necessary import statements INSIDE the function definition, like this:\ndef gen_random():\n    import random\n    return random.randint(0, 10)\n\nYour output must follow the format of the example below, exactly:\nInput:\ndf = DataFrame[name: string, age: int]\ndesc = \"expect 5 columns\"\n\nOutput:\ndef has_5_columns(df) -> bool:\n    # Get the number of columns in the DataFrame\n    num_columns = len(df.columns)\n\n    # Check if the number of columns is equal to 5\n    if num_columns == 5:\n        return True\n    else:\n        return False\n\nresult = has_5_columns(df)\n\nHere is your input df: DataFrame[president: string]\nHere is your input description: expect no NULL values\n", "value": "def has_no_nulls(df) -> bool:\n    from pyspark.sql.functions import col, sum as _sum\n\n    # Check if any column has null values\n    for column in df.columns:\n        nulls = df.where(col(column).isNull()).count()\n        if nulls > 0:\n            return False\n    return True\n\nresult = has_no_nulls(df)"}
{"key": "Given the following question:\n```\nTop 10 tech companies by market cap\n```\nI got the following answer from a web page:\n```\nTop 10 tech companies by market cap 2022 | StatistaSkip to main contentStatista LogoStatista Logostatista.comstatista.esstatista.destatista.frPrices & Access Single Accounts Business Solutions Academia and Government Statistics All Industries Consumer Goods & FMCG Internet Media & Advertising Retail & Trade Sports & Recreation Technology & Telecommunications Transportation & Logistics Travel, Tourism & Hospitality Most-viewed Statistics Recent Statistics Popular Statistics Quarterly smartphone market share worldwide by vendor 2009-2023 Mobile phone users worldwide 2015-2020 Apple iPhone unit sales worldwide 2007-2018, by quarter Global market share held by smartphone operating systems 2009-2018, by quarter Smartphone users in India 2010-2040 Topics More Topics Smartphones - statistics & facts Virtual reality (VR) - statistics & facts Top Report View Report Reports Report Shop Search our report databaseDigital & TrendsDigital & Trend reportsOverview and forecasts on trending topicsIndustries & MarketsIndustry & Market reportsIndustry and market insights and forecastsCompanies & ProductsCompanies & Products reportsKey figures and rankings about companies and productsConsumers & BrandsConsumer & Brand reportsConsumer and brand insights and preferences in various industriesPolitics & SocietyPolitics & Society reportsDetailed information about political and social topicsCountries & RegionsCountry & Region reportsAll key figures about countries and regions Find your information in our database containing over 20,000 reports Insights New Market Insights Market forecast and expert KPIs for 1000+ markets in 190+ countries & territories Explore Market Insights Consumer Digital Mobility Consumer Insights Insights on consumer attitudes and behavior worldwide 2,000,000+ interviews 15,000+ brands Explore Consumer Insights Company Insights Business information on 70m+ public and private companies 100+ industries 200+ countries and territories Explore Company Insights eCommerce Insights Detailed information for 35,000+ online stores and marketplaces 70+ KPIs per store Revenue analytics and forecasts Explore eCommerce Insights Infographics Services The Statistics Portal Directly accessible data for 170 industries from 150+ countries and over 1 Mio. facts. About Statista Why trust Statista First Steps and Help Centre Live webinars & recordings Tools Business Plan Export Publication Finder Statista Services Statista Q Customized Research & Analysis projects: Statista Q askStatista Get quick analyses with our professional research service askStatista Statista R The best of the best: the portal for top lists & rankings: Statista R Statista Content & Design Transforming Data into Design: Customized infographic servicePresentation DesignAnimated videosWhitepapers, E-Books, etc. Statista Content & Design nxt statista Strategy and business building for the data-driven economy: nxt statista Prices & AccessSingle AccountsBusiness SolutionsAcademia and GovernmentStatisticsPopular StatisticsTopicsMarketsReportsMarket InsightsConsumer InsightsCompany InsightseCommerce InsightsInfographicsServicesContent & DesignResearch projectsAsk StatistaBusiness Plan ExportPublication FinderStatista RDEESFRTechnology & Telecommunications Leading tech companies worldwide 2022, by market cap Published by Federica Laricchia, Jan 13, 2023 In 2022, Apple was the leading tech company by market capitalization globally at around 2.2 trillion U.S. dollars. Microsoft ranked second, totaling around 1.8 trillion U.S. dollars in market capitalization. Alphabet (Google), Amazon, and Tesla were also in the top ten. By contrast, Samsung ranked tenth, with a market capitalization of over 300 billion U.S. dollars. Apple Since its foundation in a Californian garage in 1976, Apple expanded massively and became one of the most valuable companies in the world. The company started its origins in the PC industry with the Macintosh, but soon entered other segments of the consumer electronics market. Today, the iPhone is the most profitable Apple product, although Mac, iPad, wearables, and services also contribute to its high revenues. Aiming at innovation, Apple invests every year in research and development, with its latest hardware product, an AR headset, to be released in 2023. Samsung Apple\u2019s biggest rival in the consumer electronics industry is the South Korean tech giant Samsung. Founded in 1938 as a trading company, it developed in several sectors, including electronics and insurance, recording revenues in excess of 200 billion U.S. dollars over recent years. Despite Samsung being active in several markets across multiple divisions, it is today best known for its consumer tech products. Smartphones, tablets, and TVs are among the most popular. Samsung sits as the leading smartphone vendor, holding a market share of over 20 percent through 2022. Read more Leading tech companies worldwide 2022, by market capitalization (in billion U.S. dollars) table column chart CharacteristicMarket capitalization in billion U.S. dollarsApple2,242Microsoft1,821Alphabet (Google)1,229Amazon902.4Tesla541.4TSMC410.9NVIDIA401.7Tencet377.8Meta Platforms (Facebook)302.1Samsung301.7 Loading statistic... Additional Information \u00a9 Statista 2023 Show source Download for free Download PDF+XLS+PNG+PPT+SourceShow detailed source information?Register for freeAlready a member?Log inSource Show sources information Show publisher information Use Ask Statista Research Service Release date December 2022More information Region WorldwideSurvey time period2022 Supplementary notes The date of release is the date of access.Citation formatsCitation formats View options Other statistics on the topic+Financial Instruments & InvestmentsLondon Stock Exchange (UK): largest technology companies 2022IT ServicesIT, software and computer services economy employment in the UK 2011-2021+TelecommunicationsIT services and software market value in the United Kingdom (UK) 2009-2017Medical TechnologyCompanies in the life science industry sector United Kingdom (UK) 2021, by sector Federica Laricchia Research expert covering the global consumer technology industry Get in touch with us now Profit from additional features with an Employee Account Please create an employee account to be able to mark statistics as favorites. Then you can access your favorite statistics via the star in the header. Register now Profit from the additional features of your individual account Currently, you are using a shared account. To use individual functions (e.g., mark statistics as favourites, set statistic alerts) please log in with your personal account. If you are an admin, please authenticate by logging in again. Login To access this feature you need a Statista AccountRegister for freeAlready have an account? LoginYou need one of our Business Solutions to use this functionImmediate access to statistics, forecasts & reportsUsage and publication rightsDownload in various formatsView Business SolutionsAlready have an account? LoginStatista Accounts: Access All Statistics. Starting from $588 USD / Year Basic Account Get to know the platformYou only have access to basic statistics.Starter AccountThe ideal entry-level account for individual usersInstant access to 1m statisticsDownload in XLS, PDF & PNG formatDetailed references$69 USD $49 USD / Month * in the first 12 months Professional AccountFull accessBusiness Solutions including all features. * Prices do not include sales tax. Other statistics that may interest you The most important statisticsLondon Stock Exchange (UK): market cap of technology companies 2022London Stock Exchange (UK): largest technology companies 2022IT services and software market value in the United Kingdom (UK) 2009-2017IT, software and computer services industry GVA in the UK 2010-2021IT, software and computer services economy employment in the UK 2011-2021Investments made to improve digital marketing in the UK 2021The most important statisticsNumber of biotechnology R&D enterprises in the UK 2008-2020Turnover of biotechnology R&D enterprises in the United Kingdom (UK) 2008-2020GVA of biotechnology research and development enterprises in the UK 2008-2020Medical technology service sector employment in the United Kingdom 2021, by regionCompanies in the biopharmaceutical sector in the United Kingdom 2017, by segmentBiopharmaceutical companies by turnover size band in the United Kingdom (UK) 2017Biopharmaceutical companies by employment size in the United Kingdom (UK) 2017Industrial biotechnology employment CAGR in the United Kingdom (UK) 2009-2014The most important statisticsCompanies in the life science industry sector United Kingdom (UK) 2021, by sectorlife science sectors employment compound annual growth rate in the UK 2016, by sectorLife science sectors turnover compound annual growth rate in the UK 2016, by sectorMedical technology companies by turnover size band in the United Kingdom (UK) 2017Medical technology companies by employment size band in the United Kingdom (UK) 2017Medical technology: companies in the major segments in the United Kingdom (UK) 2017Medical technology segment turnover CAGR in the United Kingdom (UK) 2011-2016Medical technology employment CAGR in the United Kingdom (UK) 2011-2016The most important statisticsSoftware publishing sector GVA in the UK 2010-2021United Kingdom (UK): Packaged software sales 2008-2017UK cyber security: total software & IT services market size 2010-2017UK cyber security: software solution segment size 2010-2017Number of software publishing businesses in the UK from 2010-2022Employment in computer programming activities in the UK 2011-2021Programmers and software developers outside the UK creative industries 2011-2021Computer software and games: weekly UK household expenditure 2021, by gross incomeOther statistics that may interest you Overview 6 Premium Statistic London Stock Exchange (UK): market cap of technology companies 2022 Premium Statistic London Stock Exchange (UK): largest technology companies 2022 Premium Statistic IT services and software market value in the United Kingdom (UK) 2009-2017 Basic Statistic IT, software and computer services industry GVA in the UK 2010-2021 Basic Statistic IT, software and computer services economy employment in the UK 2011-2021 Premium Statistic Investments made to improve digital marketing in the UK 2021 Biotechnology 8 Basic Statistic Number of biotechnology R&D enterprises in the UK 2008-2020 Basic Statistic Turnover of biotechnology R&D enterprises in the United Kingdom (UK) 2008-2020 Basic Statistic GVA of biotechnology research and development enterprises in the UK 2008-2020 Basic Statistic Medical technology service sector employment in the United Kingdom 2021, by region Basic Statistic Companies in the biopharmaceutical sector in the United Kingdom 2017, by segment Basic Statistic Biopharmaceutical companies by turnover size band in the United Kingdom (UK) 2017 Premium Statistic Biopharmaceutical companies by employment size in the United Kingdom (UK) 2017 Basic Statistic Industrial biotechnology employment CAGR in the United Kingdom (UK) 2009-2014 Medical Technology 8 Basic Statistic Companies in the life science industry sector United Kingdom (UK) 2021, by sector Basic Statistic life science sectors employment compound annual growth rate in the UK 2016, by sector Basic Statistic Life science sectors turnover compound annual growth rate in the UK 2016, by sector Premium Statistic Medical technology companies by turnover size band in the United Kingdom (UK) 2017 Premium Statistic Medical technology companies by employment size band in the United Kingdom (UK) 2017 Basic Statistic Medical technology: companies in the major segments in the United Kingdom (UK) 2017 Basic Statistic Medical technology segment turnover CAGR in the United Kingdom (UK) 2011-2016 Basic Statistic Medical technology employment CAGR in the United Kingdom (UK) 2011-2016 Software 8 Basic Statistic Software publishing sector GVA in the UK 2010-2021 Premium Statistic United Kingdom (UK): Packaged software sales 2008-2017 Basic Statistic UK cyber security: total software & IT services market size 2010-2017 Basic Statistic UK cyber security: software solution segment size 2010-2017 Premium Statistic Number of software publishing businesses in the UK from 2010-2022 Premium Statistic Employment in computer programming activities in the UK 2011-2021 Premium Statistic Programmers and software developers outside the UK creative industries 2011-2021 Premium Statistic Computer software and games: weekly UK household expenditure 2021, by gross incomeFurther Content: You might find this interesting as well TopicsTech Companies in the United Kingdom (UK)Business digitizationBiotech drugsBig dataEnterprise softwareStatista Accounts: Access All Statistics. Starting from $588 USD / YearLearn more about how Statista can support your business.Request webinarCompaniesMarketCap.com. (December 8, 2022). Leading tech companies worldwide 2022, by market capitalization (in billion U.S. dollars) [Graph]. In Statista. Retrieved June 26, 2023, from https://www.statista.com/statistics/1350976/leading-tech-companies-worldwide-by-market-cap/CompaniesMarketCap.com. \"Leading tech companies worldwide 2022, by market capitalization (in billion U.S. dollars).\" Chart. December 8, 2022. Statista. Accessed June 26, 2023. https://www.statista.com/statistics/1350976/leading-tech-companies-worldwide-by-market-cap/CompaniesMarketCap.com. (2022). Leading tech companies worldwide 2022, by market capitalization (in billion U.S. dollars). Statista. Statista Inc.. Accessed: June 26, 2023. https://www.statista.com/statistics/1350976/leading-tech-companies-worldwide-by-market-cap/CompaniesMarketCap.com. \"Leading Tech Companies Worldwide 2022, by Market Capitalization (in Billion U.S. Dollars).\" Statista, Statista Inc., 8 Dec 2022, https://www.statista.com/statistics/1350976/leading-tech-companies-worldwide-by-market-cap/CompaniesMarketCap.com, Leading tech companies worldwide 2022, by market capitalization (in billion U.S. dollars) Statista, https://www.statista.com/statistics/1350976/leading-tech-companies-worldwide-by-market-cap/ (last visited June 26, 2023)Leading tech companies worldwide 2022, by market capitalization (in billion U\n```\nNow help me write a SQL query to store the answer into a temp view. \nGive each column a clearly descriptive name (no abbreviations).\nIf a column can be either String or Numeric, ingest it as Numeric.\nHere is an example of how to store data into the temp view temp_view_a58845:\n```\nCREATE OR REPLACE TEMP VIEW temp_view_a58845 AS SELECT * FROM VALUES('Citizen Kane', 1941), ('Schindler's List', 1993) AS v1(title, year)\n```\nThe result view MUST contain following columns: ['company', 'cap', 'country']\nThe answer MUST contain query only and the temp view MUST be temp_view_a58845.\n", "value": "Here is the SQL query to store the data into a temp view:\n\n```sql\nCREATE OR REPLACE TEMP VIEW temp_view_a58845 AS \nSELECT * FROM VALUES\n('Apple', 2242, 'USA'),\n('Microsoft', 1821, 'USA'),\n('Alphabet (Google)', 1229, 'USA'),\n('Amazon', 902.4, 'USA'),\n('Tesla', 541.4, 'USA'),\n('TSMC', 410.9, 'Taiwan'),\n('NVIDIA', 401.7, 'USA'),\n('Tencent', 377.8, 'China'),\n('Meta Platforms (Facebook)', 302.1, 'USA'),\n('Samsung', 301.7, 'South Korea')\nAS v1(company, cap, country)\n```\n\nPlease note that the 'country' column is filled based on the known headquarters of these companies, as the original data does not provide this information."}
{"key": "\nGiven a Spark temp view `temp_view_826eb9` with the following columns:\n```\ncompany: string\ncap: decimal(11,1)\ncountry: string\n```\nWrite a Spark SQL query to retrieve: companies in United States\nThe answer MUST contain query only. Ensure your answer is correct.\n", "value": "SELECT * FROM temp_view_826eb9 WHERE country = 'United States'"}
{"key": "You are an Apache Spark SQL expert, who can summary what a dataframe retrieves. Given an analyzed \nquery plan of a dataframe, you will \n1. convert the dataframe to SQL query. Note that an explain output contains plan \nnodes separated by `\\n`. Each plan node has its own expressions and expression ids. \n2. summary what the sql query retrieves. \n\n\n\nanalyzed_plan: \nGlobalLimit 100\n    +- LocalLimit 100\n       +- Sort [d_year ASC NULLS FIRST, sum_agg DESC NULLS LAST, brand_id ASC NULLS FIRST], true\n          +- Aggregate [d_year, i_brand, i_brand_id], [d_year, i_brand_id AS brand_id, i_brand AS brand, sum(ss_ext_sales_price) AS sum_agg]\n             +- Filter (((d_date_sk = ss_sold_date_sk) AND (ss_item_sk = i_item_sk)) AND ((i_manufact_id = 128) AND (d_moy = 11)))\n                +- Join Inner\n                   :- Join Inner\n                   :  :- SubqueryAlias dt\n                   :  :  +- SubqueryAlias spark_catalog.tpcds_sf1_delta.date_dim\n                   :  :     +- Relation spark_catalog.tpcds_sf1_delta.date_dim[d_date_sk,d_date_id,d_date,d_month_seq,d_week_seq,d_quarter_seq,d_year,d_dow,d_moy,d_dom,d_qoy,d_fy_year,d_fy_quarter_seq,d_fy_week_seq,d_day_name,d_quarter_name,d_holiday,d_weekend,d_following_holiday,d_first_dom,d_last_dom,d_same_day_ly,d_same_day_lq,d_current_day,... 4 more fields] parquet\n                   :  +- SubqueryAlias spark_catalog.tpcds_sf1_delta.store_sales\n                   :     +- Relation spark_catalog.tpcds_sf1_delta.store_sales[ss_sold_date_sk,ss_sold_time_sk,ss_item_sk,ss_customer_sk,ss_cdemo_sk,ss_hdemo_sk,ss_addr_sk,ss_store_sk,ss_promo_sk,ss_ticket_numberL,ss_quantity,ss_wholesale_cost,ss_list_price,ss_sales_price,ss_ext_discount_amt,ss_ext_sales_price,ss_ext_wholesale_cost,ss_ext_list_price,ss_ext_tax,ss_coupon_amt,ss_net_paid,ss_net_paid_inc_tax,ss_net_profit] parquet\n                   +- SubqueryAlias spark_catalog.tpcds_sf1_delta.item\n                      +- Relation spark_catalog.tpcds_sf1_delta.item[i_item_sk,i_item_id,i_rec_start_date,i_rec_end_date,i_item_desc,i_current_price,i_wholesale_cost,i_brand_id,i_brand,i_class_id,i_class,i_category_id,i_category,i_manufact_id,i_manufact,i_size,i_formulation,i_color,i_units,i_container,i_manager_id,i_product_name] parquet\n\nexplain: \nThe analyzed plan can be translated into the following SQL query:\n```sql\nSELECT\n  dt.d_year,\n  item.i_brand_id brand_id,\n  item.i_brand brand,\n  SUM(ss_ext_sales_price) sum_agg\nFROM date_dim dt, store_sales, item\nWHERE dt.d_date_sk = store_sales.ss_sold_date_sk\n  AND store_sales.ss_item_sk = item.i_item_sk\n  AND item.i_manufact_id = 128\n  AND dt.d_moy = 11\nGROUP BY dt.d_year, item.i_brand, item.i_brand_id\nORDER BY dt.d_year, sum_agg DESC, brand_id\nLIMIT 100\n```\nIn summary, this dataframe is retrieving the top 100 brands (specifically of items manufactured by manufacturer with id 128) with the highest total sales price for each year in the month of November. It presents the results sorted by year, total sales (in descending order), and brand id.\n\n\n\nanalyzed_plan: Project [company, cap, country]\n+- Filter (country = United States)\n   +- SubqueryAlias temp_view_826eb9\n      +- View (`temp_view_826eb9`, [company,cap,country])\n         +- SubqueryAlias temp_view_a58845\n            +- View (`temp_view_a58845`, [company,cap,country])\n               +- Project [cast(company as string) AS company, cast(cap as decimal(11,1)) AS cap, cast(country as string) AS country]\n                  +- Project [company, cap, country]\n                     +- SubqueryAlias v1\n                        +- LocalRelation [company, cap, country]\n\nexplain:", "value": "The analyzed plan can be translated into the following SQL query:\n```sql\nSELECT\n  company,\n  cap,\n  country\nFROM temp_view_826eb9\nWHERE country = 'United States'\n```\nIn summary, this dataframe is retrieving the company, capitalization, and country information for companies located in the United States from a temporary view named `temp_view_826eb9`."}
{"key": "\nGiven 1) a PySpark dataframe, df, and 2) a description of expected properties, desc,\ngenerate a Python function to test whether the given dataframe satisfies the expected properties.\nYour generated function should take 1 parameter, df, and the return type should be a boolean.\nYou will call the function, passing in df as the parameter, and return the output (True/False).\n\nIn total, your output must follow the format below, exactly (no explanation words):\n1. function definition f, in Python (Do NOT surround the function definition with quotes)\n2. 1 blank new line\n3. Call f on df and assign the result to a variable, result: result = name_of_f(df)\n\nInclude any necessary import statements INSIDE the function definition, like this:\ndef gen_random():\n    import random\n    return random.randint(0, 10)\n\nYour output must follow the format of the example below, exactly:\nInput:\ndf = DataFrame[name: string, age: int]\ndesc = \"expect 5 columns\"\n\nOutput:\ndef has_5_columns(df) -> bool:\n    # Get the number of columns in the DataFrame\n    num_columns = len(df.columns)\n\n    # Check if the number of columns is equal to 5\n    if num_columns == 5:\n        return True\n    else:\n        return False\n\nresult = has_5_columns(df)\n\nHere is your input df: DataFrame[company: string, cap: decimal(11,1), country: string]\nHere is your input description: expect all company names to be unique\n", "value": "def has_unique_company_names(df) -> bool:\n    from pyspark.sql import functions as F\n\n    # Count the number of unique company names\n    unique_company_names = df.select(F.countDistinct(\"company\")).collect()[0][0]\n\n    # Check if the number of unique company names is equal to the total number of rows\n    if unique_company_names == df.count():\n        return True\n    else:\n        return False\n\nresult = has_unique_company_names(df)"}
{"key": "Given the following question:\n```\nThe Best Albums of 2022 | Time\n```\nI got the following answer from a web page:\n```\nThe Best Albums of 2022 | Time TIME logo Connect Wallet Wallet Settings Disconnect Wallet MetaMask WalletConnect Sign In My Account My Account Digital Magazines TIME Storefront Help Center Sign Out Subscribe Now! Subscribe Spotlight We've Gotten 'Custer's Last Stand' Wrong for Nearly 150 Years Close My Account My Account Digital Magazines TIME Storefront Help Center Sign Out Sign In Subscribe Sections Home U.S. Politics World Health Climate Future of Work by Charter Business Tech Entertainment Ideas Science History Sports Magazine TIME 2030 Next Generation Leaders TIME100 Leadership Series TIME Studios Video TIME100 Talks TIMEPieces The TIME Vault TIME for Health TIME for Kids TIME Edge TIME CO2 Red Border: Branded Content by TIME Personal Finance by TIME Stamped Shopping by TIME Stamped Join Us Newsletters Subscribe Give a Gift Shop the TIME Store TIME Cover Store Customer Care US & Canada Global Help Center Reach Out Careers Press Room Contact the Editors Media Kit Reprints and Permissions More About Us Privacy Policy Your California Privacy Rights Terms of Use Site Map Connect with Us Presented By Entertainment Music The 10 Best Albums of 2022 The 10 Best Albums of 2022 By Cady Lang , Andrew R. Chow and Moises Mendez II November 20, 2022 8:00 AM EST A wealth of new albums in 2022 pushed the boundaries of genre, theme, and sound. From seasoned veterans like Beyonc\u00e9 and Kendrick Lamar, returning in triumph with fresh records and even fresher perspectives, to exciting young artists like Saya Gray, whose debut album, 19 Masters, should make any listener excited for the future of music, here are the albums that we\u2019ve had on repeat all year. 10. Motomami, Rosal\u00eda Rosal\u00eda\u2019s 2018 conceptual masterpiece El Mal Querer is so intentional and powerful that it\u2019s hard to imagine her topping it. But this year, she stepped entirely outside the box, pushing her creative ability to its absolute limit to make Motomami. On this album, she worked with some of the best musicians in the industry from rapper/producer Pharrell Williams, who lent a hand on \u201cLa Combi Versace\u201d and on title track \u201cHENTAI,\u201d to Frank Ocean, to James Blake, whose voice can be heard at the end of \u201cDIABLO.\u201d Motomami is a triumphant amalgamation of diverse genres, blending jazz, reggaeton, bachata, flamenco, and pop. Rosal\u00eda\u2019s unwavering tenacity has allowed her to create a piece of art that fully showcases her stunning vocal and producing abilities.\u2014Moises Mendez II 9. You Can\u2019t Kill Me, 070 Shake Danielle Balbuena, the New Jersey-born rapper and R&B singer better known as 070 Shake, has made a name for herself in the industry for defying easy definition. With a powerhouse voice and tough yet tender songwriting, she\u2019s transcended genre and challenged notions of identity, forging a path all her own that has garnered co-signs ranging from Kanye West, who signed her to his G.O.O.D. Music imprint in 2016, to indie rock darlings The 1975, with whom she toured during the early years of her career. On her second album, You Can\u2019t Kill Me, Shake continues to hone a skill set entirely her own, serving up a project that\u2019s surprisingly measured but no less intense. Over heavy beats and ambient synths, Shake returns to her usual contemplations: the hardships and wonders of life, the ups and downs of love. Teeming with smoldering desire and melancholic angst, the result is a moody, sensual offering from a deeply vulnerable artist who refuses simply coolly exist. \u201cI wanted your body, but it came with your soul,\u201d she laments on \u201cBody,\u201d channeling a tension that feeds into our universal ennui.\u2014Cady Lang 8. Mr. Morale & The Big Steppers, Kendrick Lamar In his decade in the spotlight, Kendrick Lamar has amassed a reputation that borders on messianic\u2014he\u2019s the Pulitzer-winning, civil-rights-anthem-penning, Tupac-inheriting genius destined to carry his city, if not his race, if not the world, on his narrow shoulders. No one man could possibly live up to those unbearable and escalating standards, and on Mr. Morale, Lamar actively renounces them: \u201cKendrick made you think about it, but he is not your savior,\u201d he says pointedly on \u201cSavior.\u201d But if Mr. Morale isn\u2019t an epoch-defining masterwork on the level of Good Kid, m.A.A.d City or To Pimp a Butterfly, it\u2019s still a fantastically rich portrait of an artist in crisis. Lamar navigates familial tensions, pandemic anxiety, hypocrisy, and crushing public expectations with sharpness and poignancy, especially on \u201cMother | Sober\u201d and the aforementioned \u201cSavior.\u201d And there are several deeply polarizing songs on the album\u2014including the domestic dispute \u201cWe Cry Together\u201d and the trans anthem \u201cAuntie Diaries\u201d\u2014that nevertheless show Lamar probing the boundaries of his comfort zone and embracing the risk of backlash in order to create art he believes in.\u2014Andrew R. Chow 7. Big Time, Angel Olsen \u201cBig\u201d is the operative word for the sixth album from the indie rock mainstay Angel Olsen: Recorded soon after both her parents died, it deals in big emotions, big musical arrangements, big vocals, big themes of love, loss and depression and perseverance. And just as Olsen has thrived across a range of setups\u2014from acoustic solo to scruffy electric rock band\u2014she likewise excels in belting out hugely stirring songs that sound destined to blast during climactic slow dances or while movie credits roll. The songs on \u201cBig Time\u201d build patiently, and with few indicators as to the year they were created: there are steel pedal guitars, burnished strings, zithers, and harmoniums. The lush arrangements augment Olsen\u2019s arguably strongest vocal performance yet: she brings both power and subtlety to wrenchingly stark lyrics like \u201cI know you can\u2019t talk long/ But I\u2019m barely hanging on/ I\u2019m so tired of telling you/ It\u2019s a hard time again.\u201d\u2014A.R.C. 6. Electricity, Ibibio Sound Machine You\u2019d be hard-pressed to find a more combustible minute of pop music in 2022 than the one that starts from the halfway point of \u201cProtection From Evil,\u201d the opening track of Ibibio Sound Machine\u2019s fourth album Electricity. Frontwoman Eno Williams delivers a furious stream-of-consciousness soliloquy in the Ibibio language, her syllables spilling over and between the pounding four-on-the-floor dance beat; she lapses into a simmering chorus run through a vocoder, which then gives way to a shrieking horn section and a seizing synthesizer reminiscent of LCD Soundsystem\u2019s best work. Electricity is filled with moments like this: of breathtaking sonic rises and falls, astonishing cultural exchanges, and flat-out infectious dance music.\u2014A.R.C. 5. It\u2019s Almost Dry, Pusha T If the rapper and impresario Pusha T is the \u201cMartin Scorsese of street rap,\u201d as he hopes to be, then It\u2019s Almost Dry might just be his Goodfellas: an immersive gangster epic that\u2019s brutal yet stylish, materialistic, and psychologically probing. Pusha T doesn\u2019t stray far from his favorite topic\u2014hustling\u2014but he doesn\u2019t need to, because of the care with which he imbues his wordcraft and storytelling. His dense references will send you scrambling for Genius annotations: \u201dSummertime, Winterfell, I\u2019m the Night King/ The Colgate kilo, the hood needs whitening/ We fishscale n\u2014-s like we all Pisces/ Your bitch in my bubble like I\u2019m still typing,\u201d he raps on \u201cNeck and Wrist.\u201d But even if you don\u2019t catch all the double and triple entendres, the music sounds fantastically luxurious. He recruited some of the most renowned producers in hip-hop, from Kanye West to Pharrell, and they delivered their A-game.\u2014A.R.C. 4. Chloe and the Next 20th Century, Father John Misty The musical polymath Josh Tillman, better known as his stage alter ego, Father John Misty, has made a name for himself as the most polarizing (and possibly most talented) man in the contemporary folk rock scene. With Chloe and the 20th Century, his fifth studio album as FJM, however, he takes a surprising and delightful departure from his usual form for a project that\u2019s grandiose in its ambition, theatrical in its presentation, and thrilling in its execution. Drawing on elements like big band, bossa nova, and film scores from the golden age of Hollywood, the album is a lush and lofty epic that spins fictional vintage narratives into song. Through tragic vignettes that read like a screenplay of a fantasy L.A., the tracks detail torrid love affairs, untimely ends, and heartbreak, for the titular Chloe and her motley crew, showcasing not only FJM\u2019s signature wry cynicism and penchant for melodrama, but an impressive flair for worldbuilding.\u2014C.L. 3. Renaissance, Beyonc\u00e9 Ahead of the release of Renaissance, her seventh solo studio album, Beyonc\u00e9 shared via social media that it was a creative project born out of a need for escape, freedom, and exploration during the pandemic. The spirit of release is omnipresent in the album, a true celebration of dance music and its Black queer history. From her first single off the album, \u201cBreak My Soul,\u201d where Bey and Big Freedia urge us to \u201crelease your job/ release the time\u201d to the dedication of the album to her late queer uncle, Johnny, the album is an homage to the Black queer pioneers of genres like disco, bounce, house, techno, funk, and ballroom. There are few artists who can drop an album late in the game and still commandeer \u201csong of the summer\u201d along with every dance floor, but as she tells us on \u201cAlien Superstar,\u201d Beyonc\u00e9 is and forever will be that girl.\u2014C.L. 2. 19 Masters, Saya Gray The debut album from the Toronto-based singer-songwriter Gray is not for the stadium rafters. It\u2019s full of half-fleshed-out ideas, spindly guitar wanderings, washed-out vocal recordings and stray voice memos. But Gray\u2019s strange restraint and restless curiosity are entirely the point: In its scattered and shaggy structure, there\u2019s something compelling to be found around every melodic corner, whether on your second or tenth listen. In this way, the album feels like a worthy inheritor of Frank Ocean\u2019s lo-fi masterpiece Blonde. Gray layers her scratchy voice upon itself to build breathtaking harmonies, and the tones she wrings out of her guitar and bass are impeccable.\u2014A.R.C. 1. Un Verano Sin Ti, Bad Bunny No other album had as much universal appeal (and, let\u2019s be honest, adoration) this year than Un Verano Sin Ti, Bad Bunny\u2019s glorious fourth solo studio album. It\u2019s an album about heartbreak, yes, but also a veritable love letter to his homeland of Puerto Rico and a sonic tribute to the Caribbean diaspora. Driven by the musical styles of El Caribe, ranging from reggaeton and dembow to merengue and cumbia, and bolstered by elements of dance hall and techno, Benito firmly roots the album in the deeply personal, mining the universal experiences of love, loss, and the supreme pleasure of being alive, for an exceptional project that is genre-defying, intergenerational, and groundbreaking. Never one to shy away from getting political, Bad Bunny also uses the project to critique hot-button issues, from the privatization of power in Puerto Rico to how the current crisis of gentrification on the island is part of a long and troubled history of colonization. To listen to this album, to move to it and be moved by it, is an act of defiance, celebration, and radical love.\u2014C.L. More Must-Reads From TIME America's Second Year Post-Roe Will Be Busy Singapore's LGBT Community Turns Its Attention to Family Acceptance Essay: I Fell for a Famed Artist. Then He Got Violent How the Women\u2019s World Cup Evolved Into What It Is Today The Dangers of Unregulated Deep-Sea Tourism Podcast: Elliott Page Steps Into His Truth The True History of 'Custer's Land Stand' These Are the 100 Most Influential Companies of 2023 Write to Cady Lang at cady.lang@timemagazine.com and Moises Mendez II at moises.mendez@time.com. You May Also Like Read Next Why Verified Fan Is Ruining the Concert Experience Next Up: Editor's Pick The 25 Defining Works of the Black Renaissance EDIT POST Home U.S. Politics World Health Business Tech Personal Finance by TIME Stamped Shopping by TIME Stamped Future of Work by Charter Entertainment Ideas Science History Newsfeed Sports Magazine The TIME Vault TIME For Kids TIME CO2 TIME Edge Video Masthead Newsletters Subscribe Subscriber Benefits Give a Gift Shop the TIME Store Careers Press Room TIME Studios U.S. & Canada Customer Care Global Help Center Contact the Editors Reprints and Permissions Site Map Media Kit Supplied Partner Content About Us \u00a9 2023 TIME USA, LLC. All Rights Reserved. Use of this site constitutes acceptance of our Terms of Service, Privacy Policy (Your California Privacy Rights) and Do Not Sell or Share My Personal Information. TIME may receive compensation for some links to products and services on this website. Offers may be subject to change without notice.\n```\nNow help me write a SQL query to store the answer into a temp view. \nGive each column a clearly descriptive name (no abbreviations).\nIf a column can be either String or Numeric, ingest it as Numeric.\nHere is an example of how to store data into the temp view temp_view_854ff1:\n```\nCREATE OR REPLACE TEMP VIEW temp_view_854ff1 AS SELECT * FROM VALUES('Citizen Kane', 1941), ('Schindler's List', 1993) AS v1(title, year)\n```\nThe result view MUST contain following columns: ['album', 'artist', 'year']\nThe answer MUST contain query only and the temp view MUST be temp_view_854ff1.\n", "value": "Here is the SQL query to store the data into a temp view:\n\n```sql\nCREATE OR REPLACE TEMP VIEW temp_view_854ff1 AS SELECT * FROM VALUES\n('Motomami', 'Rosal\u00eda', 2022),\n('You Can\u2019t Kill Me', '070 Shake', 2022),\n('Mr. Morale & The Big Steppers', 'Kendrick Lamar', 2022),\n('Big Time', 'Angel Olsen', 2022),\n('Electricity', 'Ibibio Sound Machine', 2022),\n('It\u2019s Almost Dry', 'Pusha T', 2022),\n('Chloe and the Next 20th Century', 'Father John Misty', 2022),\n('Renaissance', 'Beyonc\u00e9', 2022),\n('19 Masters', 'Saya Gray', 2022),\n('Un Verano Sin Ti', 'Bad Bunny', 2022)\nAS v1(album, artist, year)\n```\nThis query creates a temporary view named `temp_view_854ff1` with columns `album`, `artist`, and `year`. The `VALUES` clause is used to manually specify the data to be inserted into the view. Each tuple within the `VALUES` clause represents a row in the view, with the values in the tuple corresponding to the columns specified in the `AS v1(album, artist, year)` clause."}
{"key": "\nGiven 1) a PySpark dataframe, df, and 2) a description of expected properties, desc,\ngenerate a Python function to test whether the given dataframe satisfies the expected properties.\nYour generated function should take 1 parameter, df, and the return type should be a boolean.\nYou will call the function, passing in df as the parameter, and return the output (True/False).\n\nIn total, your output must follow the format below, exactly (no explanation words):\n1. function definition f, in Python (Do NOT surround the function definition with quotes)\n2. 1 blank new line\n3. Call f on df and assign the result to a variable, result: result = name_of_f(df)\n\nInclude any necessary import statements INSIDE the function definition, like this:\ndef gen_random():\n    import random\n    return random.randint(0, 10)\n\nYour output must follow the format of the example below, exactly:\nInput:\ndf = DataFrame[name: string, age: int]\ndesc = \"expect 5 columns\"\n\nOutput:\ndef has_5_columns(df) -> bool:\n    # Get the number of columns in the DataFrame\n    num_columns = len(df.columns)\n\n    # Check if the number of columns is equal to 5\n    if num_columns == 5:\n        return True\n    else:\n        return False\n\nresult = has_5_columns(df)\n\nHere is your input df: DataFrame[album: string, artist: string, year: int]\nHere is your input description: expect each year to be 2022\n", "value": "Here is your output:\n\ndef check_year(df) -> bool:\n    from pyspark.sql.functions import col\n    # Check if all years are 2022\n    if df.filter(col('year') != 2022).count() == 0:\n        return True\n    else:\n        return False\n\nresult = check_year(df)"}
{"key": "\nGiven a Spark temp view `temp_view_c4176b` with the following columns:\n```\ncompany: string\ncap: decimal(11,1)\ncountry: string\n```\nWrite a Spark SQL query to retrieve: companies in USA\nThe answer MUST contain query only. Ensure your answer is correct.\n", "value": "SELECT * FROM temp_view_c4176b WHERE country = 'USA'"}
{"key": "\nGiven 1) a PySpark dataframe, df, and 2) a description of expected properties, desc,\ngenerate a Python function to test whether the given dataframe satisfies the expected properties.\nYour generated function should take 1 parameter, df, and the return type should be a boolean.\nYou will call the function, passing in df as the parameter, and return the output (True/False).\n\nIn total, your output must follow the format below, exactly (no explanation words):\n1. function definition f, in Python (Do NOT surround the function definition with quotes)\n2. 1 blank new line\n3. Call f on df and assign the result to a variable, result: result = name_of_f(df)\n\nInclude any necessary import statements INSIDE the function definition, like this:\ndef gen_random():\n    import random\n    return random.randint(0, 10)\n\nYour output must follow the format of the example below, exactly:\nInput:\ndf = DataFrame[name: string, age: int]\ndesc = \"expect 5 columns\"\n\nOutput:\ndef has_5_columns(df) -> bool:\n    # Get the number of columns in the DataFrame\n    num_columns = len(df.columns)\n\n    # Check if the number of columns is equal to 5\n    if num_columns == 5:\n        return True\n    else:\n        return False\n\nresult = has_5_columns(df)\n\nHere is your input df: DataFrame[Brand: string, US_Sales_2022: int, Sales_Change_Percentage: int]\nHere is your input description: expect sales change percentage to be between -100 to 100\n", "value": "Here is your output:\n\n```python\ndef check_sales_change_percentage(df) -> bool:\n    from pyspark.sql.functions import col\n\n    # Check if the Sales_Change_Percentage column values are between -100 and 100\n    df_filtered = df.filter((col(\"Sales_Change_Percentage\") >= -100) & (col(\"Sales_Change_Percentage\") <= 100))\n\n    # If the number of rows in the filtered DataFrame is equal to the number of rows in the original DataFrame, return True\n    if df_filtered.count() == df.count():\n        return True\n    else:\n        return False\n\nresult = check_sales_change_percentage(df)\n```\n\nThis function checks if all values in the \"Sales_Change_Percentage\" column of the DataFrame are between -100 and 100. If all values satisfy this condition, the function returns True. Otherwise, it returns False."}
{"key": "\nYou are an Apache Spark SQL expert programmer.\nIt is forbidden to include old deprecated APIs in your code.\nFor example, you will not use the pandas method \"append\" because it is deprecated.\n\nGiven a pyspark DataFrame `df`, with the output columns:\nBrand: string\nUS_Sales_2022: int\nSales_Change_Percentage: int\n\nAnd an explanation of `df`: The analyzed plan can be translated into the following SQL query:\n```sql\nCREATE VIEW temp_view_118358 AS\nSELECT\n  CAST(Brand AS STRING) AS Brand,\n  CAST(US_Sales_2022 AS INT) AS US_Sales_2022,\n  CAST(Sales_Change_Percentage AS INT) AS Sales_Change_Percentage\nFROM v1\n```\nIn summary, this dataframe is creating a view named `temp_view_118358` from a local relation `v1`. The view contains three columns: `Brand`, `US_Sales_2022`, and `Sales_Change_Percentage`. The data types of these columns are string, integer, and integer respectively.\n\nWrite Python code to visualize the result of `df` using plotly. Make sure to use the exact column names of `df`.\nYour code may NOT contain \"append\" anywhere. Instead of append, use pd.concat.\nThere is no need to install any package with pip. Do include any necessary import statements.\nDisplay the plot directly, instead of saving into an HTML.\nDo not use scatter plot to display any kind of percentage data.\nYou must import and start your Spark session if you use a Spark DataFrame.\nRemember to ensure that your code does NOT include \"append\" anywhere, under any circumstance (use pd.concat instead).\n\nEnsure that your code is correct.\n\n", "value": "Here is the Python code to visualize the result of `df` using plotly:\n\n```python\nimport plotly.express as px\nfrom pyspark.sql import SparkSession\n\n# Start Spark session\nspark = SparkSession.builder.appName('pyspark - plotly visualization').getOrCreate()\n\n# Convert Spark DataFrame to Pandas DataFrame\npandas_df = df.toPandas()\n\n# Create a bar plot for US_Sales_2022\nfig1 = px.bar(pandas_df, x='Brand', y='US_Sales_2022', title='US Sales 2022 by Brand')\nfig1.show()\n\n# Create a bar plot for Sales_Change_Percentage\nfig2 = px.bar(pandas_df, x='Brand', y='Sales_Change_Percentage', title='Sales Change Percentage by Brand')\nfig2.show()\n```\n\nThis code first starts a Spark session and then converts the Spark DataFrame `df` to a Pandas DataFrame. It then uses Plotly Express to create two bar plots: one for `US_Sales_2022` and one for `Sales_Change_Percentage`, both against `Brand`. The plots are displayed directly using the `show()` method. \n\nPlease note that the visualization type (bar plot in this case) can be changed based on the nature of the data and the specific requirements of the analysis."}
{"key": "Given the following question:\n```\n2022 USA national auto sales by brand\n```\nI got the following answer from a web page:\n```\nFull-Year 2022 National Auto Sales By Brand <img src=\"https://data.adxcel-ec2.com/pixel/?ad_log=referer&amp;action=lead&amp;pixid=b719b86c-f9d4-4c28-a8a8-135a5ff2099d\" width=\"1\" height=\"1\" border=\"0\"> Search Create Account Login CarPro You have a friend. Listen Live Buy a Car Find a CarPro Friend Find a Car Sell Your Car Car Buying Resources Car Reviews FAQs News Laura's Auto News Radio Show Radio Schedule Radio Blog Dealer True Stories CarPro Radio Show Podcast Driving N Heels Podcast CarPro Radio Show Newsletter Listen Live Menu News, Auto Sales Full-Year 2022 National Auto Sales By Brand Written by Jerry Reynolds January 12, 2023 Share: Facebook Twitter LinkedIn Email It was a challenging year for the auto industry, primarily due to the microchip shortages, and certainly rising interest rates did not help. There was also a noticeable lack of incentives from the automakers, and lease deals were not nearly as good as in years past. December showed some sparks of life for many car companies, as sales rose 7.2%, but not enough to put the sales numbers over the 14 million mark, making 2022 sales the lowest since 2011. General Motors regained the #1 sales leadership spot, wrestling it away from Toyota, which was #1 in 2021. Ford F-Series trucks retained the title of #1 truck in America for 46 straight years and the #1 selling vehicle overall for 41 straight years. Here are your winners and losers by brand for the full year of 2022 and how the numbers fared versus the year of 2021: Brand 2022 U.S. Sales VS 2021 1. Toyota 1,849,751 Down 9% 2. Ford 1,767,439 Down 2% 3. Chevrolet 1,502,389 Up 6% 4. Honda 881,201 Down 33% 5. Hyundai 724,265 Down 2% 6. Kia 693,549 Down 1% 7. Jeep 684,612 Down 12% 8. Nissan 682,731 Down 25% 9. Subaru 556,581 Down 5% 10. Ram Trucks 545,194 Down 16% 11. GMC 517,649 Up 7% 12. Mercedes-Benz 350,949 Up 7% 13. BMW 332,388 Down 1% 14. Volkswagen 301,069 Down 20% 15. Mazda 294,908 Down 11% 16. Lexus 258,704 Down 15% 17. Dodge 190,793 Down 12% 18. Audi 186,875 Down 5% 19. Cadillac 134,726 Up 14% 20. Chrysler 112,713 Down 2% 21. Buick 103,519 Down 42% 22. Acura 102,306 Down 35% 23. Volvo 102,038 Down 16% 24. Mitsubishi 102,037 Down 16% 25. Lincoln 83,486 Down 4% 26. Porsche 70,065 Flat 27. Genesis 56,410 Up 14% 28. INFINITI 46,619 Down 20% 29. MINI 29,504 Down 1% 30. Alfa Romeo 12,845 Down 30% 31. Maserati 6,413 Down 10% 32. Bentley 3,975 FLAT 33. Lamborghini 3,134 Up 3% 34. Fiat 915 Down 61% 35. McLaren 840 Down 35% 36. Rolls-Royce 460 Up 7% Note: Jaguar and Land Rover have not reported 2022 sales. Also, the all-electric makes like Tesla, Lucid, Karma, and Polestar do not report sales, only how many vehicles were produced, but that is not a reflection of actual sales since we don\u2019t know how many were built, but not sold. Photo Credit: Toyota. Share: Facebook Twitter LinkedIn Email Jerry Reynolds From police officer to top-selling Ford dealer to on-air car expert, Jerry helms our weekly radio show. Since selling his dealerships in 2006, Jerry has pursued his top three passions: helping consumers have a great car buying experience, supporting the military and first responders, being a loyal servant to his dog! While Jerry admits to hitting the pedal to the metal on test drives, it's all the service of finding out just how fast he can go from 0 to 60. Share On Facebook Share On Twitter Recent Posts Crime Wave: Two Vehicles Stolen Every Minute Read Post Summer Road Trip Checklist For Your Car Read Post CarPro Follow us on Facebook Follow us on Twitter Follow us on Youtube Follow us on Instagram Find a CarPro Friend Find a Car Radio Show About Us Why CarPro FAQs News Car Reviews Laura's Auto News Radio Show Newsletter Website Help Email the CarPro Media Company Inquiry Become a Radio Partner Become a Certified CarPro \u00a92023 CarPro Privacy Policy Terms Of Use Accessibility Statement CarPro requires our Certified Dealers to meet certain customer service requirements in accordance with our Certification Process and Agreement. CarPro does not broker, sell, or lease vehicles. All vehicles shown on this website are offered for sale by licensed motor vehicle dealers, unless where otherwise noted. Used vehicles are subject to prior sale. By accessing this website, you agree to the CarPro Terms of Service and Privacy Policy. We strive to update our website in a timely manner however CarPro cannot guarantee that the inventory shown will be available at the dealership. We are not responsible for typographical and other errors, including data transmissions or software errors that may appear on the site. If the posted price, incentive, offer or other service is incorrect due to typographical or other error we will only be responsible for honoring the correct price, incentive or offer. We make every effort to provide you the most accurate, up-to-the-minute information however when you are ready to purchase products or services, it is your responsibility to verify with us that all details listed are accurate. Prices include all applicable rebates.\n```\nNow help me write a SQL query to store the answer into a temp view. \nGive each column a clearly descriptive name (no abbreviations).\nIf a column can be either String or Numeric, ingest it as Numeric.\nHere is an example of how to store data into the temp view spark_ai_temp_view:\n```\nCREATE OR REPLACE TEMP VIEW spark_ai_temp_view AS SELECT * FROM VALUES('Citizen Kane', 1941), ('Schindler's List', 1993) AS v1(title, year)\n```\n\nThe answer MUST contain query only and the temp view MUST be spark_ai_temp_view.\n", "value": "Here is the SQL query to store the data into a temp view:\n\n```sql\nCREATE OR REPLACE TEMP VIEW spark_ai_temp_view_420000 AS SELECT * FROM VALUES\n('Toyota', 1849751, -9),\n('Ford', 1767439, -2),\n('Chevrolet', 1502389, 6),\n('Honda', 881201, -33),\n('Hyundai', 724265, -2),\n('Kia', 693549, -1),\n('Jeep', 684612, -12),\n('Nissan', 682731, -25),\n('Subaru', 556581, -5),\n('Ram Trucks', 545194, -16),\n('GMC', 517649, 7),\n('Mercedes-Benz', 350949, 7),\n('BMW', 332388, -1),\n('Volkswagen', 301069, -20),\n('Mazda', 294908, -11),\n('Lexus', 258704, -15),\n('Dodge', 190793, -12),\n('Audi', 186875, -5),\n('Cadillac', 134726, 14),\n('Chrysler', 112713, -2),\n('Buick', 103519, -42),\n('Acura', 102306, -35),\n('Volvo', 102038, -16),\n('Mitsubishi', 102037, -16),\n('Lincoln', 83486, -4),\n('Porsche', 70065, 0),\n('Genesis', 56410, 14),\n('INFINITI', 46619, -20),\n('MINI', 29504, -1),\n('Alfa Romeo', 12845, -30),\n('Maserati', 6413, -10),\n('Bentley', 3975, 0),\n('Lamborghini', 3134, 3),\n('Fiat', 915, -61),\n('McLaren', 840, -35),\n('Rolls-Royce', 460, 7)\nAS v1(Brand, US_Sales_2022, Sales_Change_Percentage)\n```\n\nThis query creates a temporary view named `spark_ai_temp_view_420000` with three columns: `Brand`, `US_Sales_2022`, and `Sales_Change_Percentage`. The values are inserted into the view using the `VALUES` clause."}
{"key": "You are an Apache Spark SQL expert, who can summary what a dataframe retrieves. Given an analyzed \nquery plan of a dataframe, you will \n1. convert the dataframe to SQL query. Note that an explain output contains plan \nnodes separated by `\\n`. Each plan node has its own expressions and expression ids. \n2. summary what the sql query retrieves. \n\n\n\nanalyzed_plan: \nGlobalLimit 100\n    +- LocalLimit 100\n       +- Sort [d_year ASC NULLS FIRST, sum_agg DESC NULLS LAST, brand_id ASC NULLS FIRST], true\n          +- Aggregate [d_year, i_brand, i_brand_id], [d_year, i_brand_id AS brand_id, i_brand AS brand, sum(ss_ext_sales_price) AS sum_agg]\n             +- Filter (((d_date_sk = ss_sold_date_sk) AND (ss_item_sk = i_item_sk)) AND ((i_manufact_id = 128) AND (d_moy = 11)))\n                +- Join Inner\n                   :- Join Inner\n                   :  :- SubqueryAlias dt\n                   :  :  +- SubqueryAlias spark_catalog.tpcds_sf1_delta.date_dim\n                   :  :     +- Relation spark_catalog.tpcds_sf1_delta.date_dim[d_date_sk,d_date_id,d_date,d_month_seq,d_week_seq,d_quarter_seq,d_year,d_dow,d_moy,d_dom,d_qoy,d_fy_year,d_fy_quarter_seq,d_fy_week_seq,d_day_name,d_quarter_name,d_holiday,d_weekend,d_following_holiday,d_first_dom,d_last_dom,d_same_day_ly,d_same_day_lq,d_current_day,... 4 more fields] parquet\n                   :  +- SubqueryAlias spark_catalog.tpcds_sf1_delta.store_sales\n                   :     +- Relation spark_catalog.tpcds_sf1_delta.store_sales[ss_sold_date_sk,ss_sold_time_sk,ss_item_sk,ss_customer_sk,ss_cdemo_sk,ss_hdemo_sk,ss_addr_sk,ss_store_sk,ss_promo_sk,ss_ticket_numberL,ss_quantity,ss_wholesale_cost,ss_list_price,ss_sales_price,ss_ext_discount_amt,ss_ext_sales_price,ss_ext_wholesale_cost,ss_ext_list_price,ss_ext_tax,ss_coupon_amt,ss_net_paid,ss_net_paid_inc_tax,ss_net_profit] parquet\n                   +- SubqueryAlias spark_catalog.tpcds_sf1_delta.item\n                      +- Relation spark_catalog.tpcds_sf1_delta.item[i_item_sk,i_item_id,i_rec_start_date,i_rec_end_date,i_item_desc,i_current_price,i_wholesale_cost,i_brand_id,i_brand,i_class_id,i_class,i_category_id,i_category,i_manufact_id,i_manufact,i_size,i_formulation,i_color,i_units,i_container,i_manager_id,i_product_name] parquet\n\nexplain: \nThe analyzed plan can be translated into the following SQL query:\n```sql\nSELECT\n  dt.d_year,\n  item.i_brand_id brand_id,\n  item.i_brand brand,\n  SUM(ss_ext_sales_price) sum_agg\nFROM date_dim dt, store_sales, item\nWHERE dt.d_date_sk = store_sales.ss_sold_date_sk\n  AND store_sales.ss_item_sk = item.i_item_sk\n  AND item.i_manufact_id = 128\n  AND dt.d_moy = 11\nGROUP BY dt.d_year, item.i_brand, item.i_brand_id\nORDER BY dt.d_year, sum_agg DESC, brand_id\nLIMIT 100\n```\nIn summary, this dataframe is retrieving the top 100 brands (specifically of items manufactured by manufacturer with id 128) with the highest total sales price for each year in the month of November. It presents the results sorted by year, total sales (in descending order), and brand id.\n\n\n\nanalyzed_plan: SubqueryAlias spark_ai_temp_view\n+- View (`spark_ai_temp_view`, [Brand,US_Sales_2022,Sales_Change_Percentage])\n   +- Project [cast(Brand as string) AS Brand, cast(US_Sales_2022 as int) AS US_Sales_2022, cast(Sales_Change_Percentage as int) AS Sales_Change_Percentage]\n      +- Project [Brand, US_Sales_2022, Sales_Change_Percentage]\n         +- SubqueryAlias v1\n            +- LocalRelation [Brand, US_Sales_2022, Sales_Change_Percentage]\n\nexplain:", "value": "The analyzed plan can be translated into the following SQL query:\n```sql\nSELECT\n  CAST(Brand AS STRING) AS Brand,\n  CAST(US_Sales_2022 AS INT) AS US_Sales_2022,\n  CAST(Sales_Change_Percentage AS INT) AS Sales_Change_Percentage\nFROM v1\n```\nIn summary, this dataframe is retrieving the brand, US sales in 2022, and the sales change percentage from a local relation named 'v1'. The data types of the columns are being explicitly cast to string for 'Brand' and integer for 'US_Sales_2022' and 'Sales_Change_Percentage'."}
{"key": "\nYou are an Apache Spark SQL expert programmer.\nIt is forbidden to include old deprecated APIs in your code.\nFor example, you will not use the pandas method \"append\" because it is deprecated.\n\nGiven a pyspark DataFrame `df`, with the output columns:\nBrand: string\nUS_Sales_2022: int\nSales_Change_Percentage: int\n\nAnd an explanation of `df`: The analyzed plan can be translated into the following SQL query:\n```sql\nSELECT\n  CAST(Brand AS STRING) AS Brand,\n  CAST(US_Sales_2022 AS INT) AS US_Sales_2022,\n  CAST(Sales_Change_Percentage AS INT) AS Sales_Change_Percentage\nFROM v1\n```\nIn summary, this dataframe is retrieving the brand, US sales in 2022, and the sales change percentage from a local relation named 'v1'. The data types of the columns are being explicitly cast to string for 'Brand' and integer for 'US_Sales_2022' and 'Sales_Change_Percentage'.\n\nWrite Python code to visualize the result of `df` using plotly. Make sure to use the exact column names of `df`.\nYour code may NOT contain \"append\" anywhere. Instead of append, use pd.concat.\nThere is no need to install any package with pip. Do include any necessary import statements.\nDisplay the plot directly, instead of saving into an HTML.\nDo not use scatter plot to display any kind of percentage data.\nYou must import and start your Spark session if you use a Spark DataFrame.\nRemember to ensure that your code does NOT include \"append\" anywhere, under any circumstance (use pd.concat instead).\n\nEnsure that your code is correct.\n\n", "value": "Here is the Python code to visualize the result of `df` using plotly:\n\n```python\nimport plotly.graph_objects as go\nfrom pyspark.sql import SparkSession\nimport pandas as pd\n\n# Start Spark session\nspark = SparkSession.builder.appName('example').getOrCreate()\n\n# Assuming df is a Spark DataFrame\n# Convert Spark DataFrame to Pandas DataFrame\npandas_df = df.toPandas()\n\n# Create a bar chart for US_Sales_2022\ntrace1 = go.Bar(\n    x=pandas_df['Brand'],\n    y=pandas_df['US_Sales_2022'],\n    name='US Sales 2022'\n)\n\n# Create a line chart for Sales_Change_Percentage\ntrace2 = go.Scatter(\n    x=pandas_df['Brand'],\n    y=pandas_df['Sales_Change_Percentage'],\n    name='Sales Change Percentage',\n    yaxis='y2'\n)\n\ndata = [trace1, trace2]\n\nlayout = go.Layout(\n    title='Brand Sales Analysis',\n    yaxis=dict(\n        title='US Sales 2022'\n    ),\n    yaxis2=dict(\n        title='Sales Change Percentage',\n        titlefont=dict(\n            color='rgb(148, 103, 189)'\n        ),\n        tickfont=dict(\n            color='rgb(148, 103, 189)'\n        ),\n        overlaying='y',\n        side='right'\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\nfig.show()\n```\n\nThis code first converts the Spark DataFrame to a Pandas DataFrame. Then it creates a bar chart for 'US_Sales_2022' and a line chart for 'Sales_Change_Percentage'. Both charts share the same x-axis ('Brand'). The 'Sales_Change_Percentage' chart is displayed on a secondary y-axis on the right side of the plot. Finally, it displays the plot."}
{"key": "\nYou are an Apache Spark SQL expert programmer.\nIt is forbidden to include old deprecated APIs in your code.\nFor example, you will not use the pandas method \"append\" because it is deprecated.\n\nGiven a pyspark DataFrame `df`, with the output columns:\nBrand: string\nUS_Sales_2022: int\nSales_Change_Percentage: int\n\nAnd an explanation of `df`: The analyzed plan can be translated into the following SQL query:\n```sql\nSELECT\n  CAST(Brand AS STRING) AS Brand,\n  CAST(US_Sales_2022 AS INT) AS US_Sales_2022,\n  CAST(Sales_Change_Percentage AS INT) AS Sales_Change_Percentage\nFROM v1\n```\nIn summary, this dataframe is retrieving the brand, US sales in 2022, and the sales change percentage from a local relation named 'v1'. The data types of the columns are being explicitly cast to string for 'Brand' and integer for 'US_Sales_2022' and 'Sales_Change_Percentage'.\n\nWrite Python code to visualize the result of `df` using plotly. Make sure to use the exact column names of `df`.\nYour code may NOT contain \"append\" anywhere. Instead of append, use pd.concat.\nThere is no need to install any package with pip. Do include any necessary import statements.\nDisplay the plot directly, instead of saving into an HTML.\nDo not use scatter plot to display any kind of percentage data.\nYou must import and start your Spark session if you use a Spark DataFrame.\nRemember to ensure that your code does NOT include \"append\" anywhere, under any circumstance (use pd.concat instead).\n\nEnsure that your code is correct.\nThe purpose of the plot: pie chart for US sales market shares, show the top 5 brands and the sum of others\n", "value": "Here is the Python code to visualize the result of `df` using plotly:\n\n```python\nimport plotly.graph_objects as go\nfrom pyspark.sql import SparkSession\nimport pandas as pd\n\n# Start Spark session\nspark = SparkSession.builder.getOrCreate()\n\n# Assuming df is a Spark DataFrame\ndf_pd = df.toPandas()\n\n# Calculate the total sales\ntotal_sales = df_pd['US_Sales_2022'].sum()\n\n# Calculate the sales percentage for each brand\ndf_pd['Sales_Percentage'] = df_pd['US_Sales_2022'] / total_sales * 100\n\n# Sort the dataframe by sales percentage in descending order\ndf_pd = df_pd.sort_values('Sales_Percentage', ascending=False)\n\n# Get the top 5 brands\ntop_5_brands = df_pd.head(5)\n\n# Calculate the sum of sales percentage for other brands\nother_brands = pd.DataFrame([['Others', df_pd[5:]['Sales_Percentage'].sum()]], columns=['Brand', 'Sales_Percentage'])\n\n# Concatenate the top 5 brands and other brands\nfinal_df = pd.concat([top_5_brands, other_brands], ignore_index=True)\n\n# Create a pie chart\nfig = go.Figure(data=[go.Pie(labels=final_df['Brand'], values=final_df['Sales_Percentage'], hole=.3)])\n\n# Display the plot\nfig.show()\n```\n\nThis code first converts the Spark DataFrame to a pandas DataFrame. Then, it calculates the sales percentage for each brand and sorts the DataFrame by sales percentage in descending order. It gets the top 5 brands and calculates the sum of sales percentage for other brands. It concatenates the top 5 brands and other brands into a final DataFrame. Finally, it creates a pie chart using plotly and displays the plot."}
{"key": "\nGiven a Spark temp view `spark_ai_temp_view` with the following columns:\n```\nBrand: string\nUS_Sales_2022: int\nSales_Change_Percentage: int\n```\nWrite a Spark SQL query to retrieve: brand with the highest growth\nThe answer MUST contain query only. Ensure your answer is correct.\n", "value": "```sql\nSELECT Brand \nFROM spark_ai_temp_view_88e94e \nORDER BY Sales_Change_Percentage DESC \nLIMIT 1\n```"}
{"key": "You are an Apache Spark SQL expert, who can summary what a dataframe retrieves. Given an analyzed \nquery plan of a dataframe, you will \n1. convert the dataframe to SQL query. Note that an explain output contains plan \nnodes separated by `\\n`. Each plan node has its own expressions and expression ids. \n2. summary what the sql query retrieves. \n\n\n\nanalyzed_plan: \nGlobalLimit 100\n    +- LocalLimit 100\n       +- Sort [d_year ASC NULLS FIRST, sum_agg DESC NULLS LAST, brand_id ASC NULLS FIRST], true\n          +- Aggregate [d_year, i_brand, i_brand_id], [d_year, i_brand_id AS brand_id, i_brand AS brand, sum(ss_ext_sales_price) AS sum_agg]\n             +- Filter (((d_date_sk = ss_sold_date_sk) AND (ss_item_sk = i_item_sk)) AND ((i_manufact_id = 128) AND (d_moy = 11)))\n                +- Join Inner\n                   :- Join Inner\n                   :  :- SubqueryAlias dt\n                   :  :  +- SubqueryAlias spark_catalog.tpcds_sf1_delta.date_dim\n                   :  :     +- Relation spark_catalog.tpcds_sf1_delta.date_dim[d_date_sk,d_date_id,d_date,d_month_seq,d_week_seq,d_quarter_seq,d_year,d_dow,d_moy,d_dom,d_qoy,d_fy_year,d_fy_quarter_seq,d_fy_week_seq,d_day_name,d_quarter_name,d_holiday,d_weekend,d_following_holiday,d_first_dom,d_last_dom,d_same_day_ly,d_same_day_lq,d_current_day,... 4 more fields] parquet\n                   :  +- SubqueryAlias spark_catalog.tpcds_sf1_delta.store_sales\n                   :     +- Relation spark_catalog.tpcds_sf1_delta.store_sales[ss_sold_date_sk,ss_sold_time_sk,ss_item_sk,ss_customer_sk,ss_cdemo_sk,ss_hdemo_sk,ss_addr_sk,ss_store_sk,ss_promo_sk,ss_ticket_numberL,ss_quantity,ss_wholesale_cost,ss_list_price,ss_sales_price,ss_ext_discount_amt,ss_ext_sales_price,ss_ext_wholesale_cost,ss_ext_list_price,ss_ext_tax,ss_coupon_amt,ss_net_paid,ss_net_paid_inc_tax,ss_net_profit] parquet\n                   +- SubqueryAlias spark_catalog.tpcds_sf1_delta.item\n                      +- Relation spark_catalog.tpcds_sf1_delta.item[i_item_sk,i_item_id,i_rec_start_date,i_rec_end_date,i_item_desc,i_current_price,i_wholesale_cost,i_brand_id,i_brand,i_class_id,i_class,i_category_id,i_category,i_manufact_id,i_manufact,i_size,i_formulation,i_color,i_units,i_container,i_manager_id,i_product_name] parquet\n\nexplain: \nThe analyzed plan can be translated into the following SQL query:\n```sql\nSELECT\n  dt.d_year,\n  item.i_brand_id brand_id,\n  item.i_brand brand,\n  SUM(ss_ext_sales_price) sum_agg\nFROM date_dim dt, store_sales, item\nWHERE dt.d_date_sk = store_sales.ss_sold_date_sk\n  AND store_sales.ss_item_sk = item.i_item_sk\n  AND item.i_manufact_id = 128\n  AND dt.d_moy = 11\nGROUP BY dt.d_year, item.i_brand, item.i_brand_id\nORDER BY dt.d_year, sum_agg DESC, brand_id\nLIMIT 100\n```\nIn summary, this dataframe is retrieving the top 100 brands (specifically of items manufactured by manufacturer with id 128) with the highest total sales price for each year in the month of November. It presents the results sorted by year, total sales (in descending order), and brand id.\n\n\n\nanalyzed_plan: GlobalLimit 1\n+- LocalLimit 1\n   +- Project [Brand]\n      +- Sort [Sales_Change_Percentage DESC NULLS LAST], true\n         +- Project [Brand, Sales_Change_Percentage]\n            +- SubqueryAlias spark_ai_temp_view\n               +- View (`spark_ai_temp_view`, [Brand,US_Sales_2022,Sales_Change_Percentage])\n                  +- SubqueryAlias spark_ai_temp_view\n                     +- View (`spark_ai_temp_view`, [Brand,US_Sales_2022,Sales_Change_Percentage])\n                        +- Project [cast(Brand as string) AS Brand, cast(US_Sales_2022 as int) AS US_Sales_2022, cast(Sales_Change_Percentage as int) AS Sales_Change_Percentage]\n                           +- Project [Brand, US_Sales_2022, Sales_Change_Percentage]\n                              +- SubqueryAlias v1\n                                 +- LocalRelation [Brand, US_Sales_2022, Sales_Change_Percentage]\n\nexplain:", "value": "The analyzed plan can be translated into the following SQL query:\n```sql\nSELECT\n  Brand\nFROM (\n  SELECT\n    Brand,\n    Sales_Change_Percentage\n  FROM spark_ai_temp_view_88e94e\n  ORDER BY Sales_Change_Percentage DESC\n) AS subquery\nLIMIT 1\n```\nIn summary, this dataframe is retrieving the brand with the highest sales change percentage. It presents the results sorted by sales change percentage in descending order and limits the result to the top brand."}
{"key": "\nThis is the documentation for a PySpark user-defined function (udf): pyspark.sql.functions.udf\n\nA udf creates a deterministic, reusable function in Spark. It can take any data type as a parameter, \nand by default returns a String (although it can return any data type). \nThe point is to reuse a function on several dataframes and SQL functions.\n\nGiven 1) input arguments, 2) a description of the udf functionality,\n3) the udf return type, and 4) the udf function name, \ngenerate and return a callable udf.\n        \nReturn ONLY the callable resulting udf function (no explanation words).\nInclude any necessary import statements INSIDE the function definition.\nFor example:\ndef gen_random():\n    import random\n    return random.randint(0, 10)\n\n\n\ninput_args_types: (s: str)\ndesc: Convert string s to uppercase\nreturn_type: str\nudf_name: to_upper\noutput: \ndef to_upper(s) -> str:\n    if s is not None:\n        return s.upper()\n\n\n\n\ninput_args_types: (x: int)\ndesc: Add 1\nreturn_type: int\nudf_name: add_one\noutput: \ndef add_one(x) -> int:\n    if x is not None:\n        return x + 1\n\n\n\n\ninput_args_types: (grade_percent: float)\ninput_desc: Convert the grade percent to a letter grade using standard cutoffs\nreturn_type: str\nudf_name: convert_grades1\noutput:\n\n", "value": "def convert_grades1(grade_percent: float) -> str:\n    if grade_percent is not None:\n        if grade_percent >= 90:\n            return \"A\"\n        elif grade_percent >= 80:\n            return \"B\"\n        elif grade_percent >= 70:\n            return \"C\"\n        elif grade_percent >= 60:\n            return \"D\"\n        else:\n            return \"F\""}
{"key": "\nThis is the documentation for a PySpark user-defined function (udf): pyspark.sql.functions.udf\n\nA udf creates a deterministic, reusable function in Spark. It can take any data type as a parameter, \nand by default returns a String (although it can return any data type). \nThe point is to reuse a function on several dataframes and SQL functions.\n\nGiven 1) input arguments, 2) a description of the udf functionality,\n3) the udf return type, and 4) the udf function name, \ngenerate and return a callable udf.\n        \nReturn ONLY the callable resulting udf function (no explanation words).\nInclude any necessary import statements INSIDE the function definition.\nFor example:\ndef gen_random():\n    import random\n    return random.randint(0, 10)\n\n\n\ninput_args_types: (s: str)\ndesc: Convert string s to uppercase\nreturn_type: str\nudf_name: to_upper\noutput: \ndef to_upper(s) -> str:\n    if s is not None:\n        return s.upper()\n\n\n\n\ninput_args_types: (x: int)\ndesc: Add 1\nreturn_type: int\nudf_name: add_one\noutput: \ndef add_one(x) -> int:\n    if x is not None:\n        return x + 1\n\n\n\n\ninput_args_types: (grade_percent: float)\ninput_desc: Convert the grade percent to a letter grade using standard cutoffs\nreturn_type: str\nudf_name: convert_grades2\noutput:\n\n", "value": "def convert_grades2(grade_percent: float) -> str:\n    if grade_percent is not None:\n        if grade_percent >= 90:\n            return \"A\"\n        elif grade_percent >= 80:\n            return \"B\"\n        elif grade_percent >= 70:\n            return \"C\"\n        elif grade_percent >= 60:\n            return \"D\"\n        else:\n            return \"F\""}
{"key": "\nGiven 1) a PySpark dataframe, df, and 2) a description of expected properties, desc,\ngenerate a Python function to test whether the given dataframe satisfies the expected properties.\nYour generated function should take 1 parameter, df, and the return type should be a boolean.\nYou will call the function, passing in df as the parameter, and return the output (True/False).\n\nIn total, your output must follow the format below, exactly (no explanation words):\n1. function definition f, in Python (Do NOT surround the function definition with quotes)\n2. 1 blank new line\n3. Call f on df and assign the result to a variable, result: result = name_of_f(df)\nDo not include any explanation in English. For example, do NOT include \"Here is your output:\"\n\nInclude any necessary import statements INSIDE the function definition, like this:\ndef gen_random():\n    import random\n    return random.randint(0, 10)\n\nYour output must follow the format of the example below, exactly:\nInput:\ndf = DataFrame[name: string, age: int]\ndesc = \"expect 5 columns\"\n\nOutput:\ndef has_5_columns(df) -> bool:\n    # Get the number of columns in the DataFrame\n    num_columns = len(df.columns)\n\n    # Check if the number of columns is equal to 5\n    if num_columns == 5:\n        return True\n    else:\n        return False\n\nresult = has_5_columns(df)\n\nNo explanation words (e.g. do not say anything like \"Here is your output:\")\n\nHere is your input df: DataFrame[Brand: string, US_Sales_2022: int, Sales_Change_Percentage: int]\nHere is your input description: expect sales change percentage to be between -100 to 100\n", "value": "def check_sales_change_percentage(df) -> bool:\n    from pyspark.sql.functions import col\n\n    # Check if Sales_Change_Percentage is between -100 and 100\n    df_filtered = df.filter((col(\"Sales_Change_Percentage\") >= -100) & (col(\"Sales_Change_Percentage\") <= 100))\n\n    # If the number of rows in the filtered DataFrame is equal to the number of rows in the original DataFrame,\n    # then all Sales_Change_Percentage values are between -100 and 100\n    if df_filtered.count() == df.count():\n        return True\n    else:\n        return False\n\nresult = check_sales_change_percentage(df)"}
{"key": "Given the following question:\n```\nUSA presidents\n```\nI got the following answer from a web page:\n```\nChronological List of Presidents, First Ladies, and Vice Presidents of the United States - Guides, Reference Aids, and Finding Aids (Prints andPhotographs Reading Room, Library of Congress) The Library of Congress >> Researchers Home >> Image Lists >> Presidents Find in Image Lists Prints and Photographs Pages Researchers Web Pages All Library of Congress Pages Chronological List of Presidents, First Ladies, and Vice Presidents of the United States Selected Images From the Collections of the Library of Congress Prints and Photographs Division, Library of Congress, Washington, D.C., 20540-4730 This chronological list contains entries for each president with his corresponding first lady and vice president. Note: Multiple entries appear for a president whenever there was a change in the office of vice president. YEAR PRESIDENT FIRST LADY VICE PRESIDENT 1789-1797 George Washington Martha Washington John Adams 1797-1801 John Adams Abigail Adams Thomas Jefferson 1801-1805 Thomas Jefferson [Martha Wayles Skelton Jefferson died before Jefferson assumed office; no image of her in P&P collections] Aaron Burr 1805-1809 Thomas Jefferson see above George Clinton 1809-1812 James Madison Dolley Madison George Clinton 1812-1813 James Madison Dolley Madison office vacant 1813-1814 James Madison Dolley Madison Elbridge Gerry 1814-1817 James Madison Dolley Madison office vacant 1817-1825 James Monroe Elizabeth Kortright Monroe (no image) Daniel D. Tompkins 1825-1829 John Quincy Adams Louisa Catherine Adams John C. Calhoun 1829-1832 Andrew Jackson Rachel Jackson [Rachel Donelson Jackson died before Jackson assumed office and did not serve as first lady] John C. Calhoun 1833-1837 Andrew Jackson Rachel Jackson [Rachel Donelson Jackson died before Jackson assumed office and did not serve as first lady] Martin Van Buren 1837-1841 Martin Van Buren Hannah Hoes Van Buren Richard M. Johnson 1841 William Henry Harrison Anna Tuthill Symmes Harrison John Tyler 1841-1845 John Tyler Letitia Christian Tyler and Julia Gardiner Tyler (no images) office vacant 1845-1849 James K. Polk Sarah Childress Polk George M. Dallas 1849-1850 Zachary Taylor Margaret Mackall Smith Taylor (no image) Millard Fillmore 1850-1853 Millard Fillmore Abigail Powers Fillmore office vacant 1853 Franklin Pierce Jane M. Pierce William R. King 1853-1857 Franklin Pierce Jane M. Pierce office vacant 1857-1861 James Buchanan (never married) John C. Breckinridge 1861-1865 Abraham Lincoln Mary Todd Lincoln Hannibal Hamlin 1865 Abraham Lincoln Mary Todd Lincoln Andrew Johnson 1865-1869 Andrew Johnson Eliza McCardle Johnson office vacant 1869-1873 Ulysses S. Grant Julia Dent Grant Schuyler Colfax 1873-1875 Ulysses S. Grant Julia Dent Grant Henry Wilson 1875-1877 Ulysses S. Grant Julia Dent Grant office vacant 1877-1881 Rutherford Birchard Hayes Lucy Webb Hayes William A. Wheeler 1881 James A. Garfield Lucretia Rudolph Garfield Chester A. Arthur 1881-1885 Chester A. Arthur Ellen Lewis Herndon Arthur office vacant 1885 Grover Cleveland Frances Folsom Cleveland Thomas A. Hendricks 1885-1889 Grover Cleveland Frances Folsom Cleveland office vacant 1889-1893 Benjamin Harrison Caroline Lavinia Scott Harrison Mary Lord Harrison [Harrison's second wife, but never a first lady] Levi P. Morton 1893-1897 Grover Cleveland Frances Folsom Cleveland Adlai E. Stevenson 1897-1899 William McKinley Ida Saxton McKinley Garret A. Hobart 1899-1901 William McKinley Ida Saxton McKinley office vacant 1901 William McKinley Ida Saxton McKinley Theodore Roosevelt 1901-1905 Theodore Roosevelt Edith Kermit Carow Roosevelt office vacant 1905-1909 Theodore Roosevelt Edith Kermit Carow Roosevelt Charles W. Fairbanks 1909-1912 William H. Taft Helen Herron Taft James S. Sherman 1912-1913 William H. Taft Helen Herron Taft office vacant 1913-1921 Woodrow Wilson Ellen Axson Wilson and Edith Bolling Galt Wilson Thomas R. Marshall 1921-1923 Warren G. Harding Florence Kling Harding Calvin Coolidge 1923-1925 Calvin Coolidge Grace Goodhue Coolidge office vacant 1925-1929 Calvin Coolidge Grace Goodhue Coolidge Charles G. Dawes 1929-1933 Herbert Hoover Lou Henry Hoover Charles Curtis 1933-1941 Franklin D. Roosevelt Eleanor Roosevelt John N. Garner 1941-1945 Franklin D. Roosevelt Eleanor Roosevelt Henry A. Wallace 1945 Franklin D. Roosevelt Eleanor Roosevelt Harry S. Truman 1945-1949 Harry S. Truman Bess Wallace Truman office vacant 1949-1953 Harry S. Truman Bess Wallace Truman Barkley, Alben W. 1953-1961 Dwight D. Eisenhower Mamie Doud Eisenhower Richard M. Nixon 1961-1963 John F. Kennedy Jacqueline Kennedy Lyndon B. Johnson 1963-1965 Lyndon B. Johnson Lady Bird Johnson office vacant 1965-1969 Lyndon B. Johnson Lady Bird Johnson Hubert H. Humphrey 1969-1973 Richard M. Nixon Pat Nixon Spiro T. Agnew 1973-1974 Richard M. Nixon Pat Nixon Gerald R. Ford 1974-1977 Gerald R. Ford Betty Ford Nelson Rockefeller 1977-1981 Jimmy Carter Rosalynn Carter Walter F. Mondale 1981-1989 Ronald Reagan Nancy Reagan George Bush 1989-1993 George Bush Barbara Bush Dan Quayle 1993-2001 Bill Clinton Hillary Rodham Clinton Albert Gore 2001-2009 George W. Bush Laura Bush Richard Cheney 2009-2017 Barack Obama Michelle Obama Joseph R. Biden 2017-2021 Donald J. Trump Melania Trump Mike Pence 2021- Joseph R. Biden Jill Biden Kamala Harris Presidents: Introduction (Rights/Ordering Info.) | Adams - Cleveland | Clinton - Harding Harrison - Jefferson | Johnson - McKinley | Monroe - Roosevelt | Taft - Trump | Tyler - Wilson List of names, Alphabetically | List of names, Chronologically First Ladies: Introduction (Rights/Ordering Info.) | Adams - Coolidge | Eisenhower - Hoover Jackson - Pierce | Polk - Wilson | List of names, Alphabetically Vice Presidents: Introduction (Rights/Ordering Info.) | Adams - Coolidge | Curtis - Hobart Humphrey - Rockefeller | Roosevelt - Wilson List of names, Alphabetically | List of names, Chronologically Top of Page Home >> Image Lists >> Presidents Find in Image Lists Prints and Photographs Pages Researchers Web Pages All Library of Congress Pages The Library of Congress >> Researchers December 21, 2020 Legal | External Link Disclaimer Contact Us: Ask a Librarian\n```\nNow help me write a SQL query to store the answer into a temp view. \nGive each column a clearly descriptive name (no abbreviations).\nIf a column can be either String or Numeric, ingest it as Numeric.\nHere is an example of how to store data into the temp view spark_ai_temp_view:\n```\nCREATE OR REPLACE TEMP VIEW spark_ai_temp_view AS SELECT * FROM VALUES('Citizen Kane', 1941), ('Schindler's List', 1993) AS v1(title, year)\n```\nThe result view MUST contain following columns: ['president', 'vice_president']\nThe answer MUST contain query only and the temp view MUST be spark_ai_temp_view.\n", "value": "Here is the SQL query to store the data into a temp view:\n\n```sql\nCREATE OR REPLACE TEMP VIEW spark_ai_temp_view_069903 AS SELECT * FROM VALUES\n('George Washington', 'John Adams'),\n('John Adams', 'Thomas Jefferson'),\n('Thomas Jefferson', 'Aaron Burr'),\n('Thomas Jefferson', 'George Clinton'),\n('James Madison', 'George Clinton'),\n('James Madison', 'Elbridge Gerry'),\n('James Monroe', 'Daniel D. Tompkins'),\n('John Quincy Adams', 'John C. Calhoun'),\n('Andrew Jackson', 'John C. Calhoun'),\n('Andrew Jackson', 'Martin Van Buren'),\n('Martin Van Buren', 'Richard M. Johnson'),\n('William Henry Harrison', 'John Tyler'),\n('John Tyler', NULL),\n('James K. Polk', 'George M. Dallas'),\n('Zachary Taylor', 'Millard Fillmore'),\n('Millard Fillmore', NULL),\n('Franklin Pierce', 'William R. King'),\n('Franklin Pierce', NULL),\n('James Buchanan', 'John C. Breckinridge'),\n('Abraham Lincoln', 'Hannibal Hamlin'),\n('Abraham Lincoln', 'Andrew Johnson'),\n('Andrew Johnson', NULL),\n('Ulysses S. Grant', 'Schuyler Colfax'),\n('Ulysses S. Grant', 'Henry Wilson'),\n('Ulysses S. Grant', NULL),\n('Rutherford Birchard Hayes', 'William A. Wheeler'),\n('James A. Garfield', 'Chester A. Arthur'),\n('Chester A. Arthur', NULL),\n('Grover Cleveland', 'Thomas A. Hendricks'),\n('Grover Cleveland', NULL),\n('Benjamin Harrison', 'Levi P. Morton'),\n('Grover Cleveland', 'Adlai E. Stevenson'),\n('William McKinley', 'Garret A. Hobart'),\n('William McKinley', NULL),\n('William McKinley', 'Theodore Roosevelt'),\n('Theodore Roosevelt', NULL),\n('Theodore Roosevelt', 'Charles W. Fairbanks'),\n('William H. Taft', 'James S. Sherman'),\n('William H. Taft', NULL),\n('Woodrow Wilson', 'Thomas R. Marshall'),\n('Warren G. Harding', 'Calvin Coolidge'),\n('Calvin Coolidge', NULL),\n('Calvin Coolidge', 'Charles G. Dawes'),\n('Herbert Hoover', 'Charles Curtis'),\n('Franklin D. Roosevelt', 'John N. Garner'),\n('Franklin D. Roosevelt', 'Henry A. Wallace'),\n('Franklin D. Roosevelt', 'Harry S. Truman'),\n('Harry S. Truman', NULL),\n('Harry S. Truman', 'Barkley, Alben W.'),\n('Dwight D. Eisenhower', 'Richard M. Nixon'),\n('John F. Kennedy', 'Lyndon B. Johnson'),\n('Lyndon B. Johnson', NULL),\n('Lyndon B. Johnson', 'Hubert H. Humphrey'),\n('Richard M. Nixon', 'Spiro T. Agnew'),\n('Richard M. Nixon', 'Gerald R. Ford'),\n('Gerald R. Ford', 'Nelson Rockefeller'),\n('Jimmy Carter', 'Walter F. Mondale'),\n('Ronald Reagan', 'George Bush'),\n('George Bush', 'Dan Quayle'),\n('Bill Clinton', 'Albert Gore'),\n('George W. Bush', 'Richard Cheney'),\n('Barack Obama', 'Joseph R. Biden'),\n('Donald J. Trump', 'Mike Pence'),\n('Joseph R. Biden', 'Kamala Harris')\nAS v1(president, vice_president)\n```\nThis query creates a temporary view named `spark_ai_temp_view_069903` with two columns: `president` and `vice_president`. The `VALUES` clause is used to insert the data into the view."}
{"key": "\nGiven a Spark temp view `spark_ai_temp_view` with the following columns:\n```\npresident: string\nvice_president: string\n```\nWrite a Spark SQL query to retrieve: presidents who were also vice presidents\nThe answer MUST contain query only. Ensure your answer is correct.\n", "value": "```\nSELECT a.president\nFROM spark_ai_temp_view_074539 a\nWHERE a.president IN (SELECT b.vice_president FROM spark_ai_temp_view_074539 b)\n```"}
{"key": "You are an Apache Spark SQL expert, who can summary what a dataframe retrieves. Given an analyzed \nquery plan of a dataframe, you will \n1. convert the dataframe to SQL query. Note that an explain output contains plan \nnodes separated by `\\n`. Each plan node has its own expressions and expression ids. \n2. summary what the sql query retrieves. \n\n\n\nanalyzed_plan: \nGlobalLimit 100\n    +- LocalLimit 100\n       +- Sort [d_year ASC NULLS FIRST, sum_agg DESC NULLS LAST, brand_id ASC NULLS FIRST], true\n          +- Aggregate [d_year, i_brand, i_brand_id], [d_year, i_brand_id AS brand_id, i_brand AS brand, sum(ss_ext_sales_price) AS sum_agg]\n             +- Filter (((d_date_sk = ss_sold_date_sk) AND (ss_item_sk = i_item_sk)) AND ((i_manufact_id = 128) AND (d_moy = 11)))\n                +- Join Inner\n                   :- Join Inner\n                   :  :- SubqueryAlias dt\n                   :  :  +- SubqueryAlias spark_catalog.tpcds_sf1_delta.date_dim\n                   :  :     +- Relation spark_catalog.tpcds_sf1_delta.date_dim[d_date_sk,d_date_id,d_date,d_month_seq,d_week_seq,d_quarter_seq,d_year,d_dow,d_moy,d_dom,d_qoy,d_fy_year,d_fy_quarter_seq,d_fy_week_seq,d_day_name,d_quarter_name,d_holiday,d_weekend,d_following_holiday,d_first_dom,d_last_dom,d_same_day_ly,d_same_day_lq,d_current_day,... 4 more fields] parquet\n                   :  +- SubqueryAlias spark_catalog.tpcds_sf1_delta.store_sales\n                   :     +- Relation spark_catalog.tpcds_sf1_delta.store_sales[ss_sold_date_sk,ss_sold_time_sk,ss_item_sk,ss_customer_sk,ss_cdemo_sk,ss_hdemo_sk,ss_addr_sk,ss_store_sk,ss_promo_sk,ss_ticket_numberL,ss_quantity,ss_wholesale_cost,ss_list_price,ss_sales_price,ss_ext_discount_amt,ss_ext_sales_price,ss_ext_wholesale_cost,ss_ext_list_price,ss_ext_tax,ss_coupon_amt,ss_net_paid,ss_net_paid_inc_tax,ss_net_profit] parquet\n                   +- SubqueryAlias spark_catalog.tpcds_sf1_delta.item\n                      +- Relation spark_catalog.tpcds_sf1_delta.item[i_item_sk,i_item_id,i_rec_start_date,i_rec_end_date,i_item_desc,i_current_price,i_wholesale_cost,i_brand_id,i_brand,i_class_id,i_class,i_category_id,i_category,i_manufact_id,i_manufact,i_size,i_formulation,i_color,i_units,i_container,i_manager_id,i_product_name] parquet\n\nexplain: \nThe analyzed plan can be translated into the following SQL query:\n```sql\nSELECT\n  dt.d_year,\n  item.i_brand_id brand_id,\n  item.i_brand brand,\n  SUM(ss_ext_sales_price) sum_agg\nFROM date_dim dt, store_sales, item\nWHERE dt.d_date_sk = store_sales.ss_sold_date_sk\n  AND store_sales.ss_item_sk = item.i_item_sk\n  AND item.i_manufact_id = 128\n  AND dt.d_moy = 11\nGROUP BY dt.d_year, item.i_brand, item.i_brand_id\nORDER BY dt.d_year, sum_agg DESC, brand_id\nLIMIT 100\n```\nIn summary, this dataframe is retrieving the top 100 brands (specifically of items manufactured by manufacturer with id 128) with the highest total sales price for each year in the month of November. It presents the results sorted by year, total sales (in descending order), and brand id.\n\n\n\nanalyzed_plan: Project [president]\n+- Filter president IN (list [])\n   :  +- Project [vice_president]\n   :     +- SubqueryAlias b\n   :        +- SubqueryAlias spark_ai_temp_view\n   :           +- View (`spark_ai_temp_view`, [president,vice_president])\n   :              +- SubqueryAlias spark_ai_temp_view\n   :                 +- View (`spark_ai_temp_view`, [president,vice_president])\n   :                    +- Project [cast(president as string) AS president, cast(vice_president as string) AS vice_president]\n   :                       +- Project [president, vice_president]\n   :                          +- SubqueryAlias v1\n   :                             +- LocalRelation [president, vice_president]\n   +- SubqueryAlias a\n      +- SubqueryAlias spark_ai_temp_view\n         +- View (`spark_ai_temp_view`, [president,vice_president])\n            +- SubqueryAlias spark_ai_temp_view\n               +- View (`spark_ai_temp_view`, [president,vice_president])\n                  +- Project [cast(president as string) AS president, cast(vice_president as string) AS vice_president]\n                     +- Project [president, vice_president]\n                        +- SubqueryAlias v1\n                           +- LocalRelation [president, vice_president]\n\nexplain:", "value": "The analyzed plan can be translated into the following SQL query:\n```sql\nSELECT president\nFROM spark_ai_temp_view_074539 a\nWHERE president IN (\n  SELECT vice_president\n  FROM spark_ai_temp_view_074539 b\n)\n```\nIn summary, this dataframe is retrieving the list of presidents who have also been vice presidents. The data is retrieved from a temporary view named `spark_ai_temp_view_074539`."}
{"key": "\nGiven 1) a PySpark dataframe, df, and 2) a description of expected properties, desc,\ngenerate a Python function to test whether the given dataframe satisfies the expected properties.\nYour generated function should take 1 parameter, df, and the return type should be a boolean.\nYou will call the function, passing in df as the parameter, and return the output (True/False).\n\nIn total, your output must follow the format below, exactly (no explanation words):\n1. function definition f, in Python (Do NOT surround the function definition with quotes)\n2. 1 blank new line\n3. Call f on df and assign the result to a variable, result: result = name_of_f(df)\nDo not include any explanation in English. For example, do NOT include \"Here is your output:\"\n\nInclude any necessary import statements INSIDE the function definition, like this:\ndef gen_random():\n    import random\n    return random.randint(0, 10)\n\nYour output must follow the format of the example below, exactly:\nInput:\ndf = DataFrame[name: string, age: int]\ndesc = \"expect 5 columns\"\n\nOutput:\ndef has_5_columns(df) -> bool:\n    # Get the number of columns in the DataFrame\n    num_columns = len(df.columns)\n\n    # Check if the number of columns is equal to 5\n    if num_columns == 5:\n        return True\n    else:\n        return False\n\nresult = has_5_columns(df)\n\nNo explanation words (e.g. do not say anything like \"Here is your output:\")\n\nHere is your input df: DataFrame[president: string]\nHere is your input description: expect no NULL values\n", "value": "def has_no_null_values(df) -> bool:\n    from pyspark.sql.functions import col, sum as _sum\n\n    # Check if there are any null values in the DataFrame\n    null_counts = df.select([_sum(col(c).isNull().cast(\"int\")).alias(c) for c in df.columns]).collect()[0].asDict()\n\n    # If any column has null values, return False\n    for count in null_counts.values():\n        if count > 0:\n            return False\n\n    # If no column has null values, return True\n    return True\n\nresult = has_no_null_values(df)"}
{"key": "Given the following question:\n```\nTop 10 tech companies by market cap\n```\nI got the following answer from a web page:\n```\nTop 10 tech companies by market cap 2022 | StatistaSkip to main contentStatista LogoStatista Logostatista.comstatista.esstatista.destatista.frPrices & Access Single Accounts Business Solutions Academia and Government Statistics All Industries Consumer Goods & FMCG Internet Media & Advertising Retail & Trade Sports & Recreation Technology & Telecommunications Transportation & Logistics Travel, Tourism & Hospitality Most-viewed Statistics Recent Statistics Popular Statistics Quarterly smartphone market share worldwide by vendor 2009-2023 Mobile phone users worldwide 2015-2020 Apple iPhone unit sales worldwide 2007-2018, by quarter Global market share held by smartphone operating systems 2009-2018, by quarter Smartphone users in India 2010-2040 Topics More Topics Smartphones - statistics & facts Virtual reality (VR) - statistics & facts Top Report View Report Reports Report Shop Search our report databaseDigital & TrendsDigital & Trend reportsOverview and forecasts on trending topicsIndustries & MarketsIndustry & Market reportsIndustry and market insights and forecastsCompanies & ProductsCompanies & Products reportsKey figures and rankings about companies and productsConsumers & BrandsConsumer & Brand reportsConsumer and brand insights and preferences in various industriesPolitics & SocietyPolitics & Society reportsDetailed information about political and social topicsCountries & RegionsCountry & Region reportsAll key figures about countries and regions Find your information in our database containing over 20,000 reports Insights New Market Insights Market forecast and expert KPIs for 1000+ markets in 190+ countries & territories Explore Market Insights Consumer Digital Mobility Consumer Insights Insights on consumer attitudes and behavior worldwide 2,000,000+ interviews 15,000+ brands Explore Consumer Insights Company Insights Business information on 70m+ public and private companies 100+ industries 200+ countries and territories Explore Company Insights eCommerce Insights Detailed information for 35,000+ online stores and marketplaces 70+ KPIs per store Revenue analytics and forecasts Explore eCommerce Insights Infographics Services The Statistics Portal Directly accessible data for 170 industries from 150+ countries and over 1 Mio. facts. About Statista Why trust Statista First Steps and Help Centre Live webinars & recordings Tools Business Plan Export Publication Finder Statista Services Statista Q Customized Research & Analysis projects: Statista Q askStatista Get quick analyses with our professional research service askStatista Statista R The best of the best: the portal for top lists & rankings: Statista R Statista Content & Design Transforming Data into Design: Customized infographic servicePresentation DesignAnimated videosWhitepapers, E-Books, etc. Statista Content & Design nxt statista Strategy and business building for the data-driven economy: nxt statista Prices & AccessSingle AccountsBusiness SolutionsAcademia and GovernmentStatisticsPopular StatisticsTopicsMarketsReportsMarket InsightsConsumer InsightsCompany InsightseCommerce InsightsInfographicsServicesContent & DesignResearch projectsAsk StatistaBusiness Plan ExportPublication FinderStatista RDEESFRTechnology & Telecommunications Leading tech companies worldwide 2022, by market cap Published by Federica Laricchia, Jan 13, 2023 In 2022, Apple was the leading tech company by market capitalization globally at around 2.2 trillion U.S. dollars. Microsoft ranked second, totaling around 1.8 trillion U.S. dollars in market capitalization. Alphabet (Google), Amazon, and Tesla were also in the top ten. By contrast, Samsung ranked tenth, with a market capitalization of over 300 billion U.S. dollars. Apple Since its foundation in a Californian garage in 1976, Apple expanded massively and became one of the most valuable companies in the world. The company started its origins in the PC industry with the Macintosh, but soon entered other segments of the consumer electronics market. Today, the iPhone is the most profitable Apple product, although Mac, iPad, wearables, and services also contribute to its high revenues. Aiming at innovation, Apple invests every year in research and development, with its latest hardware product, an AR headset, to be released in 2023. Samsung Apple\u2019s biggest rival in the consumer electronics industry is the South Korean tech giant Samsung. Founded in 1938 as a trading company, it developed in several sectors, including electronics and insurance, recording revenues in excess of 200 billion U.S. dollars over recent years. Despite Samsung being active in several markets across multiple divisions, it is today best known for its consumer tech products. Smartphones, tablets, and TVs are among the most popular. Samsung sits as the leading smartphone vendor, holding a market share of over 20 percent through 2022. Read more Leading tech companies worldwide 2022, by market capitalization (in billion U.S. dollars) table column chart CharacteristicMarket capitalization in billion U.S. dollarsApple2,242Microsoft1,821Alphabet (Google)1,229Amazon902.4Tesla541.4TSMC410.9NVIDIA401.7Tencet377.8Meta Platforms (Facebook)302.1Samsung301.7 Loading statistic... Additional Information \u00a9 Statista 2023 Show source Download for free Download PDF+XLS+PNG+PPT+SourceShow detailed source information?Register for freeAlready a member?Log inSource Show sources information Show publisher information Use Ask Statista Research Service Release date December 2022More information Region WorldwideSurvey time period2022 Supplementary notes The date of release is the date of access.Citation formatsCitation formats View options Other statistics on the topic+Financial Instruments & InvestmentsLondon Stock Exchange (UK): largest technology companies 2022IT ServicesIT, software and computer services economy employment in the UK 2011-2021+TelecommunicationsIT services and software market value in the United Kingdom (UK) 2009-2017Medical TechnologyCompanies in the life science industry sector United Kingdom (UK) 2021, by sector Federica Laricchia Research expert covering the global consumer technology industry Get in touch with us now Profit from additional features with an Employee Account Please create an employee account to be able to mark statistics as favorites. Then you can access your favorite statistics via the star in the header. Register now Profit from the additional features of your individual account Currently, you are using a shared account. To use individual functions (e.g., mark statistics as favourites, set statistic alerts) please log in with your personal account. If you are an admin, please authenticate by logging in again. Login To access this feature you need a Statista AccountRegister for freeAlready have an account? LoginYou need one of our Business Solutions to use this functionImmediate access to statistics, forecasts & reportsUsage and publication rightsDownload in various formatsView Business SolutionsAlready have an account? LoginStatista Accounts: Access All Statistics. Starting from $588 USD / Year Basic Account Get to know the platformYou only have access to basic statistics.Starter AccountThe ideal entry-level account for individual usersInstant access to 1m statisticsDownload in XLS, PDF & PNG formatDetailed references$69 USD $49 USD / Month * in the first 12 months Professional AccountFull accessBusiness Solutions including all features. * Prices do not include sales tax. Other statistics that may interest you The most important statisticsLondon Stock Exchange (UK): market cap of technology companies 2022London Stock Exchange (UK): largest technology companies 2022IT services and software market value in the United Kingdom (UK) 2009-2017IT, software and computer services industry GVA in the UK 2010-2021IT, software and computer services economy employment in the UK 2011-2021Investments made to improve digital marketing in the UK 2021The most important statisticsNumber of biotechnology R&D enterprises in the UK 2008-2020Turnover of biotechnology R&D enterprises in the United Kingdom (UK) 2008-2020GVA of biotechnology research and development enterprises in the UK 2008-2020Medical technology service sector employment in the United Kingdom 2021, by regionCompanies in the biopharmaceutical sector in the United Kingdom 2017, by segmentBiopharmaceutical companies by turnover size band in the United Kingdom (UK) 2017Biopharmaceutical companies by employment size in the United Kingdom (UK) 2017Industrial biotechnology employment CAGR in the United Kingdom (UK) 2009-2014The most important statisticsCompanies in the life science industry sector United Kingdom (UK) 2021, by sectorlife science sectors employment compound annual growth rate in the UK 2016, by sectorLife science sectors turnover compound annual growth rate in the UK 2016, by sectorMedical technology companies by turnover size band in the United Kingdom (UK) 2017Medical technology companies by employment size band in the United Kingdom (UK) 2017Medical technology: companies in the major segments in the United Kingdom (UK) 2017Medical technology segment turnover CAGR in the United Kingdom (UK) 2011-2016Medical technology employment CAGR in the United Kingdom (UK) 2011-2016The most important statisticsSoftware publishing sector GVA in the UK 2010-2021United Kingdom (UK): Packaged software sales 2008-2017UK cyber security: total software & IT services market size 2010-2017UK cyber security: software solution segment size 2010-2017Number of software publishing businesses in the UK from 2010-2022Employment in computer programming activities in the UK 2011-2021Programmers and software developers outside the UK creative industries 2011-2021Computer software and games: weekly UK household expenditure 2021, by gross incomeOther statistics that may interest you Overview 6 Premium Statistic London Stock Exchange (UK): market cap of technology companies 2022 Premium Statistic London Stock Exchange (UK): largest technology companies 2022 Premium Statistic IT services and software market value in the United Kingdom (UK) 2009-2017 Basic Statistic IT, software and computer services industry GVA in the UK 2010-2021 Basic Statistic IT, software and computer services economy employment in the UK 2011-2021 Premium Statistic Investments made to improve digital marketing in the UK 2021 Biotechnology 8 Basic Statistic Number of biotechnology R&D enterprises in the UK 2008-2020 Basic Statistic Turnover of biotechnology R&D enterprises in the United Kingdom (UK) 2008-2020 Basic Statistic GVA of biotechnology research and development enterprises in the UK 2008-2020 Basic Statistic Medical technology service sector employment in the United Kingdom 2021, by region Basic Statistic Companies in the biopharmaceutical sector in the United Kingdom 2017, by segment Basic Statistic Biopharmaceutical companies by turnover size band in the United Kingdom (UK) 2017 Premium Statistic Biopharmaceutical companies by employment size in the United Kingdom (UK) 2017 Basic Statistic Industrial biotechnology employment CAGR in the United Kingdom (UK) 2009-2014 Medical Technology 8 Basic Statistic Companies in the life science industry sector United Kingdom (UK) 2021, by sector Basic Statistic life science sectors employment compound annual growth rate in the UK 2016, by sector Basic Statistic Life science sectors turnover compound annual growth rate in the UK 2016, by sector Premium Statistic Medical technology companies by turnover size band in the United Kingdom (UK) 2017 Premium Statistic Medical technology companies by employment size band in the United Kingdom (UK) 2017 Basic Statistic Medical technology: companies in the major segments in the United Kingdom (UK) 2017 Basic Statistic Medical technology segment turnover CAGR in the United Kingdom (UK) 2011-2016 Basic Statistic Medical technology employment CAGR in the United Kingdom (UK) 2011-2016 Software 8 Basic Statistic Software publishing sector GVA in the UK 2010-2021 Premium Statistic United Kingdom (UK): Packaged software sales 2008-2017 Basic Statistic UK cyber security: total software & IT services market size 2010-2017 Basic Statistic UK cyber security: software solution segment size 2010-2017 Premium Statistic Number of software publishing businesses in the UK from 2010-2022 Premium Statistic Employment in computer programming activities in the UK 2011-2021 Premium Statistic Programmers and software developers outside the UK creative industries 2011-2021 Premium Statistic Computer software and games: weekly UK household expenditure 2021, by gross incomeFurther Content: You might find this interesting as well TopicsTech Companies in the United Kingdom (UK)Business digitizationBiotech drugsBig dataEnterprise softwareStatista Accounts: Access All Statistics. Starting from $588 USD / YearLearn more about how Statista can support your business.Request webinarCompaniesMarketCap.com. (December 8, 2022). Leading tech companies worldwide 2022, by market capitalization (in billion U.S. dollars) [Graph]. In Statista. Retrieved June 26, 2023, from https://www.statista.com/statistics/1350976/leading-tech-companies-worldwide-by-market-cap/CompaniesMarketCap.com. \"Leading tech companies worldwide 2022, by market capitalization (in billion U.S. dollars).\" Chart. December 8, 2022. Statista. Accessed June 26, 2023. https://www.statista.com/statistics/1350976/leading-tech-companies-worldwide-by-market-cap/CompaniesMarketCap.com. (2022). Leading tech companies worldwide 2022, by market capitalization (in billion U.S. dollars). Statista. Statista Inc.. Accessed: June 26, 2023. https://www.statista.com/statistics/1350976/leading-tech-companies-worldwide-by-market-cap/CompaniesMarketCap.com. \"Leading Tech Companies Worldwide 2022, by Market Capitalization (in Billion U.S. Dollars).\" Statista, Statista Inc., 8 Dec 2022, https://www.statista.com/statistics/1350976/leading-tech-companies-worldwide-by-market-cap/CompaniesMarketCap.com, Leading tech companies worldwide 2022, by market capitalization (in billion U.S. dollars) Statista, https://www.statista.com/statistics/1350976/leading-tech-companies-worldwide-by-market-cap/ (last visited June 26, 2023)Leading tech companies worldwide 2022, by market capitalization (in billion U\n```\nNow help me write a SQL query to store the answer into a temp view. \nGive each column a clearly descriptive name (no abbreviations).\nIf a column can be either String or Numeric, ingest it as Numeric.\nHere is an example of how to store data into the temp view spark_ai_temp_view:\n```\nCREATE OR REPLACE TEMP VIEW spark_ai_temp_view AS SELECT * FROM VALUES('Citizen Kane', 1941), ('Schindler's List', 1993) AS v1(title, year)\n```\nThe result view MUST contain following columns: ['company', 'cap', 'country']\nThe answer MUST contain query only and the temp view MUST be spark_ai_temp_view.\n", "value": "Based on the information provided, the SQL query to store the data into a temp view would look like this:\n\n```sql\nCREATE OR REPLACE TEMP VIEW spark_ai_temp_view_17b9f3 AS \nSELECT * FROM VALUES\n('Apple', 2242, 'USA'), \n('Microsoft', 1821, 'USA'), \n('Alphabet (Google)', 1229, 'USA'), \n('Amazon', 902.4, 'USA'), \n('Tesla', 541.4, 'USA'), \n('TSMC', 410.9, 'Taiwan'), \n('NVIDIA', 401.7, 'USA'), \n('Tencent', 377.8, 'China'), \n('Meta Platforms (Facebook)', 302.1, 'USA'), \n('Samsung', 301.7, 'South Korea') \nAS v1(company, cap, country)\n```\n\nPlease note that the 'country' column is not provided in the original data and is added based on general knowledge about these companies. If the country of origin is different, please adjust accordingly."}
{"key": "\nGiven a Spark temp view `spark_ai_temp_view` with the following columns:\n```\ncompany: string\ncap: decimal(11,1)\ncountry: string\n```\nWrite a Spark SQL query to retrieve: companies in USA\nThe answer MUST contain query only. Ensure your answer is correct.\n", "value": "SELECT * FROM spark_ai_temp_view_f61b7a WHERE country = 'USA'"}
{"key": "You are an Apache Spark SQL expert, who can summary what a dataframe retrieves. Given an analyzed \nquery plan of a dataframe, you will \n1. convert the dataframe to SQL query. Note that an explain output contains plan \nnodes separated by `\\n`. Each plan node has its own expressions and expression ids. \n2. summary what the sql query retrieves. \n\n\n\nanalyzed_plan: \nGlobalLimit 100\n    +- LocalLimit 100\n       +- Sort [d_year ASC NULLS FIRST, sum_agg DESC NULLS LAST, brand_id ASC NULLS FIRST], true\n          +- Aggregate [d_year, i_brand, i_brand_id], [d_year, i_brand_id AS brand_id, i_brand AS brand, sum(ss_ext_sales_price) AS sum_agg]\n             +- Filter (((d_date_sk = ss_sold_date_sk) AND (ss_item_sk = i_item_sk)) AND ((i_manufact_id = 128) AND (d_moy = 11)))\n                +- Join Inner\n                   :- Join Inner\n                   :  :- SubqueryAlias dt\n                   :  :  +- SubqueryAlias spark_catalog.tpcds_sf1_delta.date_dim\n                   :  :     +- Relation spark_catalog.tpcds_sf1_delta.date_dim[d_date_sk,d_date_id,d_date,d_month_seq,d_week_seq,d_quarter_seq,d_year,d_dow,d_moy,d_dom,d_qoy,d_fy_year,d_fy_quarter_seq,d_fy_week_seq,d_day_name,d_quarter_name,d_holiday,d_weekend,d_following_holiday,d_first_dom,d_last_dom,d_same_day_ly,d_same_day_lq,d_current_day,... 4 more fields] parquet\n                   :  +- SubqueryAlias spark_catalog.tpcds_sf1_delta.store_sales\n                   :     +- Relation spark_catalog.tpcds_sf1_delta.store_sales[ss_sold_date_sk,ss_sold_time_sk,ss_item_sk,ss_customer_sk,ss_cdemo_sk,ss_hdemo_sk,ss_addr_sk,ss_store_sk,ss_promo_sk,ss_ticket_numberL,ss_quantity,ss_wholesale_cost,ss_list_price,ss_sales_price,ss_ext_discount_amt,ss_ext_sales_price,ss_ext_wholesale_cost,ss_ext_list_price,ss_ext_tax,ss_coupon_amt,ss_net_paid,ss_net_paid_inc_tax,ss_net_profit] parquet\n                   +- SubqueryAlias spark_catalog.tpcds_sf1_delta.item\n                      +- Relation spark_catalog.tpcds_sf1_delta.item[i_item_sk,i_item_id,i_rec_start_date,i_rec_end_date,i_item_desc,i_current_price,i_wholesale_cost,i_brand_id,i_brand,i_class_id,i_class,i_category_id,i_category,i_manufact_id,i_manufact,i_size,i_formulation,i_color,i_units,i_container,i_manager_id,i_product_name] parquet\n\nexplain: \nThe analyzed plan can be translated into the following SQL query:\n```sql\nSELECT\n  dt.d_year,\n  item.i_brand_id brand_id,\n  item.i_brand brand,\n  SUM(ss_ext_sales_price) sum_agg\nFROM date_dim dt, store_sales, item\nWHERE dt.d_date_sk = store_sales.ss_sold_date_sk\n  AND store_sales.ss_item_sk = item.i_item_sk\n  AND item.i_manufact_id = 128\n  AND dt.d_moy = 11\nGROUP BY dt.d_year, item.i_brand, item.i_brand_id\nORDER BY dt.d_year, sum_agg DESC, brand_id\nLIMIT 100\n```\nIn summary, this dataframe is retrieving the top 100 brands (specifically of items manufactured by manufacturer with id 128) with the highest total sales price for each year in the month of November. It presents the results sorted by year, total sales (in descending order), and brand id.\n\n\n\nanalyzed_plan: Project [company, cap, country]\n+- Filter (country = USA)\n   +- SubqueryAlias spark_ai_temp_view\n      +- View (`spark_ai_temp_view`, [company,cap,country])\n         +- SubqueryAlias spark_ai_temp_view\n            +- View (`spark_ai_temp_view`, [company,cap,country])\n               +- Project [cast(company as string) AS company, cast(cap as decimal(11,1)) AS cap, cast(country as string) AS country]\n                  +- Project [company, cap, country]\n                     +- SubqueryAlias v1\n                        +- LocalRelation [company, cap, country]\n\nexplain:", "value": "The analyzed plan can be translated into the following SQL query:\n```sql\nSELECT\n  company,\n  cap,\n  country\nFROM v1\nWHERE country = 'USA'\n```\nIn summary, this dataframe is retrieving the company, cap, and country information for all companies located in the USA from the local relation 'v1'."}
{"key": "\nGiven 1) a PySpark dataframe, df, and 2) a description of expected properties, desc,\ngenerate a Python function to test whether the given dataframe satisfies the expected properties.\nYour generated function should take 1 parameter, df, and the return type should be a boolean.\nYou will call the function, passing in df as the parameter, and return the output (True/False).\n\nIn total, your output must follow the format below, exactly (no explanation words):\n1. function definition f, in Python (Do NOT surround the function definition with quotes)\n2. 1 blank new line\n3. Call f on df and assign the result to a variable, result: result = name_of_f(df)\nDo not include any explanation in English. For example, do NOT include \"Here is your output:\"\n\nInclude any necessary import statements INSIDE the function definition, like this:\ndef gen_random():\n    import random\n    return random.randint(0, 10)\n\nYour output must follow the format of the example below, exactly:\nInput:\ndf = DataFrame[name: string, age: int]\ndesc = \"expect 5 columns\"\n\nOutput:\ndef has_5_columns(df) -> bool:\n    # Get the number of columns in the DataFrame\n    num_columns = len(df.columns)\n\n    # Check if the number of columns is equal to 5\n    if num_columns == 5:\n        return True\n    else:\n        return False\n\nresult = has_5_columns(df)\n\nNo explanation words (e.g. do not say anything like \"Here is your output:\")\n\nHere is your input df: DataFrame[company: string, cap: decimal(11,1), country: string]\nHere is your input description: expect all company names to be unique\n", "value": "def check_unique_companies(df) -> bool:\n    from pyspark.sql import functions as F\n\n    # Count the number of unique companies\n    unique_companies = df.select(F.countDistinct(\"company\")).collect()[0][0]\n\n    # Check if the number of unique companies is equal to the total number of companies\n    if unique_companies == df.count():\n        return True\n    else:\n        return False\n\nresult = check_unique_companies(df)"}
{"key": "Given the following question:\n```\nThe Best Albums of 2022 | Time\n```\nI got the following answer from a web page:\n```\nThe Best Albums of 2022 | Time TIME logo Connect Wallet Wallet Settings Disconnect Wallet MetaMask WalletConnect Sign In My Account My Account Digital Magazines TIME Storefront Help Center Sign Out Subscribe Now! Subscribe Spotlight We've Gotten 'Custer's Last Stand' Wrong for Nearly 150 Years Close My Account My Account Digital Magazines TIME Storefront Help Center Sign Out Sign In Subscribe Sections Home U.S. Politics World Health Climate Future of Work by Charter Business Tech Entertainment Ideas Science History Sports Magazine TIME 2030 Next Generation Leaders TIME100 Leadership Series TIME Studios Video TIME100 Talks TIMEPieces The TIME Vault TIME for Health TIME for Kids TIME Edge TIME CO2 Red Border: Branded Content by TIME Personal Finance by TIME Stamped Shopping by TIME Stamped Join Us Newsletters Subscribe Give a Gift Shop the TIME Store TIME Cover Store Customer Care US & Canada Global Help Center Reach Out Careers Press Room Contact the Editors Media Kit Reprints and Permissions More About Us Privacy Policy Your California Privacy Rights Terms of Use Site Map Connect with Us Presented By Entertainment Music The 10 Best Albums of 2022 The 10 Best Albums of 2022 By Cady Lang , Andrew R. Chow and Moises Mendez II November 20, 2022 8:00 AM EST A wealth of new albums in 2022 pushed the boundaries of genre, theme, and sound. From seasoned veterans like Beyonc\u00e9 and Kendrick Lamar, returning in triumph with fresh records and even fresher perspectives, to exciting young artists like Saya Gray, whose debut album, 19 Masters, should make any listener excited for the future of music, here are the albums that we\u2019ve had on repeat all year. 10. Motomami, Rosal\u00eda Rosal\u00eda\u2019s 2018 conceptual masterpiece El Mal Querer is so intentional and powerful that it\u2019s hard to imagine her topping it. But this year, she stepped entirely outside the box, pushing her creative ability to its absolute limit to make Motomami. On this album, she worked with some of the best musicians in the industry from rapper/producer Pharrell Williams, who lent a hand on \u201cLa Combi Versace\u201d and on title track \u201cHENTAI,\u201d to Frank Ocean, to James Blake, whose voice can be heard at the end of \u201cDIABLO.\u201d Motomami is a triumphant amalgamation of diverse genres, blending jazz, reggaeton, bachata, flamenco, and pop. Rosal\u00eda\u2019s unwavering tenacity has allowed her to create a piece of art that fully showcases her stunning vocal and producing abilities.\u2014Moises Mendez II 9. You Can\u2019t Kill Me, 070 Shake Danielle Balbuena, the New Jersey-born rapper and R&B singer better known as 070 Shake, has made a name for herself in the industry for defying easy definition. With a powerhouse voice and tough yet tender songwriting, she\u2019s transcended genre and challenged notions of identity, forging a path all her own that has garnered co-signs ranging from Kanye West, who signed her to his G.O.O.D. Music imprint in 2016, to indie rock darlings The 1975, with whom she toured during the early years of her career. On her second album, You Can\u2019t Kill Me, Shake continues to hone a skill set entirely her own, serving up a project that\u2019s surprisingly measured but no less intense. Over heavy beats and ambient synths, Shake returns to her usual contemplations: the hardships and wonders of life, the ups and downs of love. Teeming with smoldering desire and melancholic angst, the result is a moody, sensual offering from a deeply vulnerable artist who refuses simply coolly exist. \u201cI wanted your body, but it came with your soul,\u201d she laments on \u201cBody,\u201d channeling a tension that feeds into our universal ennui.\u2014Cady Lang 8. Mr. Morale & The Big Steppers, Kendrick Lamar In his decade in the spotlight, Kendrick Lamar has amassed a reputation that borders on messianic\u2014he\u2019s the Pulitzer-winning, civil-rights-anthem-penning, Tupac-inheriting genius destined to carry his city, if not his race, if not the world, on his narrow shoulders. No one man could possibly live up to those unbearable and escalating standards, and on Mr. Morale, Lamar actively renounces them: \u201cKendrick made you think about it, but he is not your savior,\u201d he says pointedly on \u201cSavior.\u201d But if Mr. Morale isn\u2019t an epoch-defining masterwork on the level of Good Kid, m.A.A.d City or To Pimp a Butterfly, it\u2019s still a fantastically rich portrait of an artist in crisis. Lamar navigates familial tensions, pandemic anxiety, hypocrisy, and crushing public expectations with sharpness and poignancy, especially on \u201cMother | Sober\u201d and the aforementioned \u201cSavior.\u201d And there are several deeply polarizing songs on the album\u2014including the domestic dispute \u201cWe Cry Together\u201d and the trans anthem \u201cAuntie Diaries\u201d\u2014that nevertheless show Lamar probing the boundaries of his comfort zone and embracing the risk of backlash in order to create art he believes in.\u2014Andrew R. Chow 7. Big Time, Angel Olsen \u201cBig\u201d is the operative word for the sixth album from the indie rock mainstay Angel Olsen: Recorded soon after both her parents died, it deals in big emotions, big musical arrangements, big vocals, big themes of love, loss and depression and perseverance. And just as Olsen has thrived across a range of setups\u2014from acoustic solo to scruffy electric rock band\u2014she likewise excels in belting out hugely stirring songs that sound destined to blast during climactic slow dances or while movie credits roll. The songs on \u201cBig Time\u201d build patiently, and with few indicators as to the year they were created: there are steel pedal guitars, burnished strings, zithers, and harmoniums. The lush arrangements augment Olsen\u2019s arguably strongest vocal performance yet: she brings both power and subtlety to wrenchingly stark lyrics like \u201cI know you can\u2019t talk long/ But I\u2019m barely hanging on/ I\u2019m so tired of telling you/ It\u2019s a hard time again.\u201d\u2014A.R.C. 6. Electricity, Ibibio Sound Machine You\u2019d be hard-pressed to find a more combustible minute of pop music in 2022 than the one that starts from the halfway point of \u201cProtection From Evil,\u201d the opening track of Ibibio Sound Machine\u2019s fourth album Electricity. Frontwoman Eno Williams delivers a furious stream-of-consciousness soliloquy in the Ibibio language, her syllables spilling over and between the pounding four-on-the-floor dance beat; she lapses into a simmering chorus run through a vocoder, which then gives way to a shrieking horn section and a seizing synthesizer reminiscent of LCD Soundsystem\u2019s best work. Electricity is filled with moments like this: of breathtaking sonic rises and falls, astonishing cultural exchanges, and flat-out infectious dance music.\u2014A.R.C. 5. It\u2019s Almost Dry, Pusha T If the rapper and impresario Pusha T is the \u201cMartin Scorsese of street rap,\u201d as he hopes to be, then It\u2019s Almost Dry might just be his Goodfellas: an immersive gangster epic that\u2019s brutal yet stylish, materialistic, and psychologically probing. Pusha T doesn\u2019t stray far from his favorite topic\u2014hustling\u2014but he doesn\u2019t need to, because of the care with which he imbues his wordcraft and storytelling. His dense references will send you scrambling for Genius annotations: \u201dSummertime, Winterfell, I\u2019m the Night King/ The Colgate kilo, the hood needs whitening/ We fishscale n\u2014-s like we all Pisces/ Your bitch in my bubble like I\u2019m still typing,\u201d he raps on \u201cNeck and Wrist.\u201d But even if you don\u2019t catch all the double and triple entendres, the music sounds fantastically luxurious. He recruited some of the most renowned producers in hip-hop, from Kanye West to Pharrell, and they delivered their A-game.\u2014A.R.C. 4. Chloe and the Next 20th Century, Father John Misty The musical polymath Josh Tillman, better known as his stage alter ego, Father John Misty, has made a name for himself as the most polarizing (and possibly most talented) man in the contemporary folk rock scene. With Chloe and the 20th Century, his fifth studio album as FJM, however, he takes a surprising and delightful departure from his usual form for a project that\u2019s grandiose in its ambition, theatrical in its presentation, and thrilling in its execution. Drawing on elements like big band, bossa nova, and film scores from the golden age of Hollywood, the album is a lush and lofty epic that spins fictional vintage narratives into song. Through tragic vignettes that read like a screenplay of a fantasy L.A., the tracks detail torrid love affairs, untimely ends, and heartbreak, for the titular Chloe and her motley crew, showcasing not only FJM\u2019s signature wry cynicism and penchant for melodrama, but an impressive flair for worldbuilding.\u2014C.L. 3. Renaissance, Beyonc\u00e9 Ahead of the release of Renaissance, her seventh solo studio album, Beyonc\u00e9 shared via social media that it was a creative project born out of a need for escape, freedom, and exploration during the pandemic. The spirit of release is omnipresent in the album, a true celebration of dance music and its Black queer history. From her first single off the album, \u201cBreak My Soul,\u201d where Bey and Big Freedia urge us to \u201crelease your job/ release the time\u201d to the dedication of the album to her late queer uncle, Johnny, the album is an homage to the Black queer pioneers of genres like disco, bounce, house, techno, funk, and ballroom. There are few artists who can drop an album late in the game and still commandeer \u201csong of the summer\u201d along with every dance floor, but as she tells us on \u201cAlien Superstar,\u201d Beyonc\u00e9 is and forever will be that girl.\u2014C.L. 2. 19 Masters, Saya Gray The debut album from the Toronto-based singer-songwriter Gray is not for the stadium rafters. It\u2019s full of half-fleshed-out ideas, spindly guitar wanderings, washed-out vocal recordings and stray voice memos. But Gray\u2019s strange restraint and restless curiosity are entirely the point: In its scattered and shaggy structure, there\u2019s something compelling to be found around every melodic corner, whether on your second or tenth listen. In this way, the album feels like a worthy inheritor of Frank Ocean\u2019s lo-fi masterpiece Blonde. Gray layers her scratchy voice upon itself to build breathtaking harmonies, and the tones she wrings out of her guitar and bass are impeccable.\u2014A.R.C. 1. Un Verano Sin Ti, Bad Bunny No other album had as much universal appeal (and, let\u2019s be honest, adoration) this year than Un Verano Sin Ti, Bad Bunny\u2019s glorious fourth solo studio album. It\u2019s an album about heartbreak, yes, but also a veritable love letter to his homeland of Puerto Rico and a sonic tribute to the Caribbean diaspora. Driven by the musical styles of El Caribe, ranging from reggaeton and dembow to merengue and cumbia, and bolstered by elements of dance hall and techno, Benito firmly roots the album in the deeply personal, mining the universal experiences of love, loss, and the supreme pleasure of being alive, for an exceptional project that is genre-defying, intergenerational, and groundbreaking. Never one to shy away from getting political, Bad Bunny also uses the project to critique hot-button issues, from the privatization of power in Puerto Rico to how the current crisis of gentrification on the island is part of a long and troubled history of colonization. To listen to this album, to move to it and be moved by it, is an act of defiance, celebration, and radical love.\u2014C.L. More Must-Reads From TIME America's Second Year Post-Roe Will Be Busy Singapore's LGBT Community Turns Its Attention to Family Acceptance Essay: I Fell for a Famed Artist. Then He Got Violent How the Women\u2019s World Cup Evolved Into What It Is Today The Dangers of Unregulated Deep-Sea Tourism Podcast: Elliott Page Steps Into His Truth The True History of 'Custer's Land Stand' These Are the 100 Most Influential Companies of 2023 Write to Cady Lang at cady.lang@timemagazine.com and Moises Mendez II at moises.mendez@time.com. You May Also Like Read Next Why Verified Fan Is Ruining the Concert Experience Next Up: Editor's Pick The 25 Defining Works of the Black Renaissance EDIT POST Home U.S. Politics World Health Business Tech Personal Finance by TIME Stamped Shopping by TIME Stamped Future of Work by Charter Entertainment Ideas Science History Newsfeed Sports Magazine The TIME Vault TIME For Kids TIME CO2 TIME Edge Video Masthead Newsletters Subscribe Subscriber Benefits Give a Gift Shop the TIME Store Careers Press Room TIME Studios U.S. & Canada Customer Care Global Help Center Contact the Editors Reprints and Permissions Site Map Media Kit Supplied Partner Content About Us \u00a9 2023 TIME USA, LLC. All Rights Reserved. Use of this site constitutes acceptance of our Terms of Service, Privacy Policy (Your California Privacy Rights) and Do Not Sell or Share My Personal Information. TIME may receive compensation for some links to products and services on this website. Offers may be subject to change without notice.\n```\nNow help me write a SQL query to store the answer into a temp view. \nGive each column a clearly descriptive name (no abbreviations).\nIf a column can be either String or Numeric, ingest it as Numeric.\nHere is an example of how to store data into the temp view spark_ai_temp_view:\n```\nCREATE OR REPLACE TEMP VIEW spark_ai_temp_view AS SELECT * FROM VALUES('Citizen Kane', 1941), ('Schindler's List', 1993) AS v1(title, year)\n```\nThe result view MUST contain following columns: ['album', 'artist', 'year']\nThe answer MUST contain query only and the temp view MUST be spark_ai_temp_view.\n", "value": "Here is the SQL query to store the data into a temp view:\n\n```sql\nCREATE OR REPLACE TEMP VIEW spark_ai_temp_view_2adc76 AS SELECT * FROM VALUES\n('Motomami', 'Rosal\u00eda', 2022),\n('You Can\u2019t Kill Me', '070 Shake', 2022),\n('Mr. Morale & The Big Steppers', 'Kendrick Lamar', 2022),\n('Big Time', 'Angel Olsen', 2022),\n('Electricity', 'Ibibio Sound Machine', 2022),\n('It\u2019s Almost Dry', 'Pusha T', 2022),\n('Chloe and the Next 20th Century', 'Father John Misty', 2022),\n('Renaissance', 'Beyonc\u00e9', 2022),\n('19 Masters', 'Saya Gray', 2022),\n('Un Verano Sin Ti', 'Bad Bunny', 2022)\nAS v1(album, artist, year)\n```\nThis query creates a temporary view named `spark_ai_temp_view_2adc76` with columns `album`, `artist`, and `year`. The `VALUES` clause is used to insert the data into the view."}
{"key": "\nGiven 1) a PySpark dataframe, df, and 2) a description of expected properties, desc,\ngenerate a Python function to test whether the given dataframe satisfies the expected properties.\nYour generated function should take 1 parameter, df, and the return type should be a boolean.\nYou will call the function, passing in df as the parameter, and return the output (True/False).\n\nIn total, your output must follow the format below, exactly (no explanation words):\n1. function definition f, in Python (Do NOT surround the function definition with quotes)\n2. 1 blank new line\n3. Call f on df and assign the result to a variable, result: result = name_of_f(df)\nDo not include any explanation in English. For example, do NOT include \"Here is your output:\"\n\nInclude any necessary import statements INSIDE the function definition, like this:\ndef gen_random():\n    import random\n    return random.randint(0, 10)\n\nYour output must follow the format of the example below, exactly:\nInput:\ndf = DataFrame[name: string, age: int]\ndesc = \"expect 5 columns\"\n\nOutput:\ndef has_5_columns(df) -> bool:\n    # Get the number of columns in the DataFrame\n    num_columns = len(df.columns)\n\n    # Check if the number of columns is equal to 5\n    if num_columns == 5:\n        return True\n    else:\n        return False\n\nresult = has_5_columns(df)\n\nNo explanation words (e.g. do not say anything like \"Here is your output:\")\n\nHere is your input df: DataFrame[album: string, artist: string, year: int]\nHere is your input description: expect each year to be 2022\n", "value": "def check_year(df) -> bool:\n    from pyspark.sql.functions import col\n\n    # Check if all years in the DataFrame are 2022\n    if df.filter(col('year') != 2022).count() == 0:\n        return True\n    else:\n        return False\n\nresult = check_year(df)"}
{"key": "\nGiven 1) a PySpark dataframe, df, and 2) a description of expected properties, desc,\ngenerate a Python function to test whether the given dataframe satisfies the expected properties.\nYour generated function should take 1 parameter, df, and the return type should be a boolean.\nYou will call the function, passing in df as the parameter, and return the output (True/False).\n\nIn total, your output must follow the format below, exactly (no explanation words):\n1. function definition f, in Python (Do NOT surround the function definition with quotes)\n2. 1 blank new line\n3. Call f on df and assign the result to a variable, result: result = name_of_f(df)\nThe answer MUST contain python code only. For example, do NOT include \"Here is your output:\"\n\nInclude any necessary import statements INSIDE the function definition, like this:\ndef gen_random():\n    import random\n    return random.randint(0, 10)\n\nYour output must follow the format of the example below, exactly:\nInput:\ndf = DataFrame[name: string, age: int]\ndesc = \"expect 5 columns\"\n\nOutput:\ndef has_5_columns(df) -> bool:\n    # Get the number of columns in the DataFrame\n    num_columns = len(df.columns)\n\n    # Check if the number of columns is equal to 5\n    if num_columns == 5:\n        return True\n    else:\n        return False\n\nresult = has_5_columns(df)\n\nNo explanation words (e.g. do not say anything like \"Here is your output:\")\n\nHere is your input df: DataFrame[Brand: string, US_Sales_2022: int, Sales_Change_Percentage: int]\nHere is your input description: expect sales change percentage to be between -100 to 100\n", "value": "def check_sales_change_percentage(df) -> bool:\n    from pyspark.sql.functions import col\n\n    # Check if all values in the 'Sales_Change_Percentage' column are between -100 and 100\n    if df.filter((col('Sales_Change_Percentage') >= -100) & (col('Sales_Change_Percentage') <= 100)).count() == df.count():\n        return True\n    else:\n        return False\n\nresult = check_sales_change_percentage(df)"}
{"key": "\nGiven 1) a PySpark dataframe, df, and 2) a description of expected properties, desc,\ngenerate a Python function to test whether the given dataframe satisfies the expected properties.\nYour generated function should take 1 parameter, df, and the return type should be a boolean.\nYou will call the function, passing in df as the parameter, and return the output (True/False).\n\nIn total, your output must follow the format below, exactly (no explanation words):\n1. function definition f, in Python (Do NOT surround the function definition with quotes)\n2. 1 blank new line\n3. Call f on df and assign the result to a variable, result: result = name_of_f(df)\nThe answer MUST contain python code only. For example, do NOT include \"Here is your output:\"\n\nInclude any necessary import statements INSIDE the function definition, like this:\ndef gen_random():\n    import random\n    return random.randint(0, 10)\n\nYour output must follow the format of the example below, exactly:\nInput:\ndf = DataFrame[name: string, age: int]\ndesc = \"expect 5 columns\"\n\nOutput:\ndef has_5_columns(df) -> bool:\n    # Get the number of columns in the DataFrame\n    num_columns = len(df.columns)\n\n    # Check if the number of columns is equal to 5\n    if num_columns == 5:\n        return True\n    else:\n        return False\n\nresult = has_5_columns(df)\n\nNo explanation words (e.g. do not say anything like \"Here is your output:\")\n\nHere is your input df: DataFrame[president: string]\nHere is your input description: expect no NULL values\n", "value": "def has_no_null_values(df) -> bool:\n    from pyspark.sql.functions import col, sum as _sum\n\n    # Check if there are any null values in the DataFrame\n    null_counts = df.select([_sum(col(c).isNull().cast(\"int\")).alias(c) for c in df.columns]).collect()[0].asDict()\n    if all(value == 0 for value in null_counts.values()):\n        return True\n    else:\n        return False\n\nresult = has_no_null_values(df)"}
{"key": "\nGiven 1) a PySpark dataframe, df, and 2) a description of expected properties, desc,\ngenerate a Python function to test whether the given dataframe satisfies the expected properties.\nYour generated function should take 1 parameter, df, and the return type should be a boolean.\nYou will call the function, passing in df as the parameter, and return the output (True/False).\n\nIn total, your output must follow the format below, exactly (no explanation words):\n1. function definition f, in Python (Do NOT surround the function definition with quotes)\n2. 1 blank new line\n3. Call f on df and assign the result to a variable, result: result = name_of_f(df)\nThe answer MUST contain python code only. For example, do NOT include \"Here is your output:\"\n\nInclude any necessary import statements INSIDE the function definition, like this:\ndef gen_random():\n    import random\n    return random.randint(0, 10)\n\nYour output must follow the format of the example below, exactly:\nInput:\ndf = DataFrame[name: string, age: int]\ndesc = \"expect 5 columns\"\n\nOutput:\ndef has_5_columns(df) -> bool:\n    # Get the number of columns in the DataFrame\n    num_columns = len(df.columns)\n\n    # Check if the number of columns is equal to 5\n    if num_columns == 5:\n        return True\n    else:\n        return False\n\nresult = has_5_columns(df)\n\nNo explanation words (e.g. do not say anything like \"Here is your output:\")\n\nHere is your input df: DataFrame[company: string, cap: decimal(11,1), country: string]\nHere is your input description: expect all company names to be unique\n", "value": "def check_unique_companies(df) -> bool:\n    from pyspark.sql import functions as F\n\n    # Count the number of unique companies\n    unique_companies = df.select(F.countDistinct(\"company\")).collect()[0][0]\n\n    # Check if the number of unique companies is equal to the total number of companies\n    if unique_companies == df.count():\n        return True\n    else:\n        return False\n\nresult = check_unique_companies(df)"}
{"key": "\nGiven 1) a PySpark dataframe, df, and 2) a description of expected properties, desc,\ngenerate a Python function to test whether the given dataframe satisfies the expected properties.\nYour generated function should take 1 parameter, df, and the return type should be a boolean.\nYou will call the function, passing in df as the parameter, and return the output (True/False).\n\nIn total, your output must follow the format below, exactly (no explanation words):\n1. function definition f, in Python (Do NOT surround the function definition with quotes)\n2. 1 blank new line\n3. Call f on df and assign the result to a variable, result: result = name_of_f(df)\nThe answer MUST contain python code only. For example, do NOT include \"Here is your output:\"\n\nInclude any necessary import statements INSIDE the function definition, like this:\ndef gen_random():\n    import random\n    return random.randint(0, 10)\n\nYour output must follow the format of the example below, exactly:\nInput:\ndf = DataFrame[name: string, age: int]\ndesc = \"expect 5 columns\"\n\nOutput:\ndef has_5_columns(df) -> bool:\n    # Get the number of columns in the DataFrame\n    num_columns = len(df.columns)\n\n    # Check if the number of columns is equal to 5\n    if num_columns == 5:\n        return True\n    else:\n        return False\n\nresult = has_5_columns(df)\n\nNo explanation words (e.g. do not say anything like \"Here is your output:\")\n\nHere is your input df: DataFrame[album: string, artist: string, year: int]\nHere is your input description: expect each year to be 2022\n", "value": "def check_year(df) -> bool:\n    from pyspark.sql.functions import col\n\n    # Check if all years in the DataFrame are 2022\n    if df.filter(col('year') != 2022).count() == 0:\n        return True\n    else:\n        return False\n\nresult = check_year(df)"}
{"key": "https://en.wikipedia.org/wiki/List_of_presidents_of_the_United_States", "value": "\n\n\n\nList of presidents of the United States - Wikipedia\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJump to content\n\n\n\n\n\n\n\nMain menu\n\n\n\n\n\nMain menu\nmove to sidebar\nhide\n\n\n\n\t\tNavigation\n\t\n\nMain pageContentsCurrent eventsRandom articleAbout WikipediaContact usDonate\n\n\n\n\n\t\tContribute\n\t\n\nHelpLearn to editCommunity portalRecent changesUpload file\n\n\n\n\nLanguages\n\nLanguage links are at the top of the page across from the title.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSearch\n\n\n\n\n\n\n\n\n\n\n\nSearch\n\n\n\n\n\n\n\nCreate accountLog in\n\n\n\n\n\nPersonal tools\n\n\n\n\n Create account Log in\n\n\n\n\n\t\tPages for logged out editors learn more\n\n\nContributionsTalk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nContents\nmove to sidebar\nhide\n\n\n\n\n(Top)\n\n\n\n\n\n1Presidents\n\n\n\n\n\n\n\n2See also\n\n\n\n\n\n\n\n3Notes\n\n\n\n\n\n\n\n4References\n\n\n\n\n\n\n\n5Works cited\n\n\n\n\n\n\n\n6External links\n\n\n\n\n\n\n\n\n\n\n\n\n\nToggle the table of contents\n\n\n\n\n\nToggle the table of contents\n\n\n\n\n\n\n\nList of presidents of the United States\n\n\n\n126 languages\n\n\n\nAfrikaansAlemannisch\u12a0\u121b\u122d\u129b\u0627\u0644\u0639\u0631\u0628\u064a\u0629Arpetan\u0985\u09b8\u09ae\u09c0\u09af\u09bc\u09beAz\u0259rbaycancaBasa BaliBamanankan\u09ac\u09be\u0982\u09b2\u09beB\u00e2n-l\u00e2m-g\u00fa\u0411\u0430\u0448\u04a1\u043e\u0440\u0442\u0441\u0430\u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044fBikol Central\u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438BoarischBosanskiBrezhonegCatal\u00e0\u0427\u04d1\u0432\u0430\u0448\u043b\u0430Cebuano\u010ce\u0161tinaCorsuCymraegDanskDeutschEesti\u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac\u042d\u0440\u0437\u044f\u043d\u044cEspa\u00f1olEsperantoEuskara\u0641\u0627\u0631\u0633\u06ccF\u00f8roysktFran\u00e7aisFryskGaeilgeGaelgGalego\ud55c\uad6d\uc5b4\u0540\u0561\u0575\u0565\u0580\u0565\u0576\u0939\u093f\u0928\u094d\u0926\u0940HrvatskiIdoIlokanoBahasa IndonesiaInterlingua\u00cdslenskaItaliano\u05e2\u05d1\u05e8\u05d9\u05eaJawa\u0c95\u0ca8\u0ccd\u0ca8\u0ca1\u10e5\u10d0\u10e0\u10d7\u10e3\u10da\u10d8\u049a\u0430\u0437\u0430\u049b\u0448\u0430KernowekIkinyarwandaKiswahiliKurd\u00ee\u041a\u044b\u0440\u044b\u043a \u043c\u0430\u0440\u044bLatinaLatvie\u0161uL\u00ebtzebuergeschLietuvi\u0173LimburgsLingua Franca NovaLa .lojban.Magyar\u092e\u0948\u0925\u093f\u0932\u0940\u041c\u0430\u043a\u0435\u0434\u043e\u043d\u0441\u043a\u0438Malagasy\u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02\u10db\u10d0\u10e0\u10d2\u10d0\u10da\u10e3\u10e0\u10d8\u0645\u0635\u0631\u0649\u0645\u0627\u0632\u0650\u0631\u0648\u0646\u06ccBahasa Melayu\u041c\u043e\u043d\u0433\u043e\u043bNederlandsNedersaksies\u0928\u0947\u092a\u093e\u0932\u0940\u0928\u0947\u092a\u093e\u0932 \u092d\u093e\u0937\u093e\u65e5\u672c\u8a9e\u07d2\u07de\u07cfNorsk bokm\u00e5lNorsk nynorskNouormandOccitanO\u02bbzbekcha / \u045e\u0437\u0431\u0435\u043a\u0447\u0430\u0a2a\u0a70\u0a1c\u0a3e\u0a2c\u0a40\u067e\u0646\u062c\u0627\u0628\u06ccPlattd\u00fc\u00fctschPolskiPortugu\u00easRipoarischRom\u00e2n\u0103\u0420\u0443\u0441\u0438\u043d\u044c\u0441\u043a\u044b\u0439\u0420\u0443\u0441\u0441\u043a\u0438\u0439ScotsShqipSicilianu\u0dc3\u0dd2\u0d82\u0dc4\u0dbdSimple EnglishSloven\u010dinaSloven\u0161\u010dina\u06a9\u0648\u0631\u062f\u06cc\u0421\u0440\u043f\u0441\u043a\u0438 / srpskiSrpskohrvatski / \u0441\u0440\u043f\u0441\u043a\u043e\u0445\u0440\u0432\u0430\u0442\u0441\u043a\u0438SuomiSvenska\u0ba4\u0bae\u0bbf\u0bb4\u0bcd\u0422\u0430\u0442\u0430\u0440\u0447\u0430 / tatar\u00e7a\u0c24\u0c46\u0c32\u0c41\u0c17\u0c41\u0e44\u0e17\u0e22\u0422\u043e\u04b7\u0438\u043a\u04e3\u13e3\u13b3\u13a9T\u00fcrk\u00e7eT\u00fcrkmen\u00e7e\u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430\u0627\u0631\u062f\u0648V\u00e8netoTi\u1ebfng Vi\u1ec7tWinaray\u5434\u8bed\u05d9\u05d9\u05b4\u05d3\u05d9\u05e9Yor\u00f9b\u00e1\u7cb5\u8a9e\u4e2d\u6587\nEdit links\n\n\n\n\n\n\n\n\n\n\n\nArticle\n\nTalk\n\n\n\n\n\n\nEnglish\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRead\n\nView source\n\nView history\n\n\n\n\n\n\n\n\nTools\n\n\n\n\n\nTools\nmove to sidebar\nhide\n\n\n\n\t\tActions\n\t\n\nReadView sourceView history\n\n\n\n\n\t\tGeneral\n\t\n\nWhat links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationCite this pageWikidata item\n\n\n\n\n\t\tPrint/export\n\t\n\nDownload as PDFPrintable version\n\n\n\n\n\t\tIn other projects\n\t\n\nWikimedia CommonsWikiquote\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFrom Wikipedia, the free encyclopedia\n\n\n\n\nThe White House, official residence of the president of the United States, pictured in May 2006\nThe president of the United States is the head of state and head of government of the United States,[1] indirectly elected to a four-year term via the Electoral College.[2] The officeholder leads the executive branch of the federal government and is the commander-in-chief of the United States Armed Forces.[3] Since the office was established in 1789, 45 men have served in 46 presidencies. The first president, George Washington, won a unanimous vote of the Electoral College;[4] one, Grover Cleveland, served two non-consecutive terms and is therefore counted as the 22nd and 24th president of the United States, giving rise to the discrepancy between the number of presidencies and the number of persons who have served as president.[5] The incumbent president is Joe Biden.[6]\nThe presidency of William Henry Harrison, who died 31 days after taking office in 1841, was the shortest in American history.[7] Franklin D. Roosevelt served the longest, over twelve years, before dying early in his fourth term in 1945. He is the only U.S. president to have served more than two terms.[8] Since the ratification of the Twenty-second Amendment to the United States Constitution in 1951, no person may be elected president more than twice, and no one who has served more than two years of a term to which someone else was elected may be elected more than once.[9]\nFour presidents died in office of natural causes (William Henry Harrison, Zachary Taylor, Warren G. Harding, and Franklin D. Roosevelt), four were assassinated (Abraham Lincoln, James A. Garfield, William McKinley and John F. Kennedy), and one resigned (Richard Nixon, facing impeachment and removal from office).[10] John Tyler was the first vice president to assume the presidency during a presidential term, and set the precedent that a vice president who does so becomes the fully functioning president with his presidency.[11]\nThroughout most of its history, American politics has been dominated by political parties. The Constitution is silent on the issue of political parties, and at the time it came into force in 1789, no organized parties existed. Soon after the 1st Congress convened, political factions began rallying around dominant Washington administration officials, such as Alexander Hamilton and Thomas Jefferson.[12] Concerned about the capacity of political parties to destroy the fragile unity holding the nation together, Washington remained unaffiliated with any political faction or party throughout his eight-year presidency. He was, and remains, the only U.S. president never affiliated with a political party.[13]\n\n\nPresidents\n\nList of presidents of the United States from 1789 \u2013 till date.\n\n\nNo.[a]\n\nPortrait\n\nName(Birth\u2013Death)\n\nTerm[14]\n\nParty[b][15]\n\nElection\n\nVice President[16]\n\n\n1\n\n\n\nGeorge Washington(1732\u20131799)[17]\n\nApril 30, 1789\u2013March 4, 1797\n\n\n\nUnaffiliated\n\n1788\u20131789\n\n1792\n\n\nJohn Adams[c]\n\n\n2\n\n\n\nJohn Adams(1735\u20131826)[19]\n\nMarch 4, 1797\u2013March 4, 1801\n\n\n\nFederalist\n\n1796\n\nThomas Jefferson[d]\n\n\n3\n\n\n\nThomas Jefferson(1743\u20131826)[21]\n\nMarch 4, 1801\u2013March 4, 1809\n\n\n\nDemocratic-Republican\n\n1800\n\n1804\n\n\nAaron Burr\n\nGeorge Clinton\n\n\n\n4\n\n\n\nJames Madison(1751\u20131836)[22]\n\nMarch 4, 1809\u2013March 4, 1817\n\n\n\nDemocratic-Republican\n\n1808\n\n1812\n\n\nGeorge Clinton[e]\n\nVacant\u00a0afterApril 20, 1812\n\n\nElbridge Gerry[e]\n\n\nVacant\u00a0afterNovember 23, 1814\n\n\n\n5\n\n\n\nJames Monroe(1758\u20131831)[24]\n\nMarch 4, 1817\u2013March 4, 1825\n\n\n\nDemocratic-Republican\n\n1816\n\n1820\n\n\nDaniel D. Tompkins\n\n\n6\n\n\n\nJohn Quincy Adams(1767\u20131848)[25]\n\nMarch 4, 1825\u2013March 4, 1829\n\n\n\nDemocratic-Republican[f]\n\nNational Republican\n\n\n1824\n\nJohn C. Calhoun[g]\n\n\n7\n\n\n\nAndrew Jackson(1767\u20131845)[28]\n\nMarch 4, 1829\u2013March 4, 1837\n\n\n\nDemocratic\n\n1828\n\n1832\n\n\nJohn C. Calhoun[h]\n\nVacant\u00a0afterDecember 28, 1832\n\n\nMartin Van Buren\n\n\n\n8\n\n\n\nMartin Van Buren(1782\u20131862)[29]\n\nMarch 4, 1837\u2013March 4, 1841\n\n\n\nDemocratic\n\n1836\n\nRichard Mentor Johnson\n\n\n9\n\n\n\nWilliam Henry Harrison(1773\u20131841)[30]\n\nMarch 4, 1841\u2013April 4, 1841[e]\n\n\n\nWhig\n\n1840\n\nJohn Tyler\n\n\n10\n\n\n\nJohn Tyler(1790\u20131862)[31]\n\nApril 4, 1841[i]\u2013March 4, 1845\n\n\n\nWhig[j]\n\nUnaffiliated\n\n\n\u2013\n\nVacant\u00a0throughoutpresidency\n\n\n11\n\n\n\nJames K. Polk(1795\u20131849)[34]\n\nMarch 4, 1845\u2013March 4, 1849\n\n\n\nDemocratic\n\n1844\n\nGeorge M. Dallas\n\n\n12\n\n\n\nZachary Taylor(1784\u20131850)[35]\n\nMarch 4, 1849\u2013July 9, 1850[e]\n\n\n\nWhig\n\n1848\n\nMillard Fillmore\n\n\n13\n\n\n\nMillard Fillmore(1800\u20131874)[36]\n\nJuly 9, 1850[k]\u2013March 4, 1853\n\n\n\nWhig\n\n\u2013\n\nVacant\u00a0throughoutpresidency\n\n\n14\n\n\n\nFranklin Pierce(1804\u20131869)[38]\n\nMarch 4, 1853\u2013March 4, 1857\n\n\n\nDemocratic\n\n1852\n\nWilliam R. King[e]\n\nVacant\u00a0afterApril 18, 1853\n\n\n\n15\n\n\n\nJames Buchanan(1791\u20131868)[39]\n\nMarch 4, 1857\u2013March 4, 1861\n\n\n\nDemocratic\n\n1856\n\nJohn C. Breckinridge\n\n\n16\n\n\n\nAbraham Lincoln(1809\u20131865)[40]\n\nMarch 4, 1861\u2013April 15, 1865[e]\n\n\n\nRepublican\n\nNational Union[l]\n\n\n1860\n\n1864\n\n\nHannibal Hamlin\n\nAndrew Johnson\n\n\n\n17\n\n\n\nAndrew Johnson(1808\u20131875)[42]\n\nApril 15, 1865[m]\u2013March 4, 1869\n\n\n\nNational Union[n]\n\nDemocratic\n\n\n\u2013\n\nVacant\u00a0throughoutpresidency\n\n\n18\n\n\n\nUlysses S. Grant(1822\u20131885)[43]\n\nMarch 4, 1869\u2013March 4, 1877\n\n\n\nRepublican\n\n1868\n\n1872\n\n\nSchuyler Colfax\n\nHenry Wilson[e]\n\n\nVacant\u00a0afterNovember 22, 1875\n\n\n\n19\n\n\n\nRutherford B. Hayes(1822\u20131893)[44]\n\nMarch 4, 1877\u2013March 4, 1881\n\n\n\nRepublican\n\n1876\n\nWilliam A. Wheeler\n\n\n20\n\n\n\nJames A. Garfield(1831\u20131881)[45]\n\nMarch 4, 1881\u2013September 19, 1881[e]\n\n\n\nRepublican\n\n1880\n\nChester A. Arthur\n\n\n21\n\n\n\nChester A. Arthur(1829\u20131886)[46]\n\nSeptember 19, 1881[o]\u2013March 4, 1885\n\n\n\nRepublican\n\n\u2013\n\nVacant\u00a0throughoutpresidency\n\n\n22\n\n\n\nGrover Cleveland(1837\u20131908)[48]\n\nMarch 4, 1885\u2013March 4, 1889\n\n\n\nDemocratic\n\n1884\n\nThomas A. Hendricks[e]\n\nVacant\u00a0afterNovember 25, 1885\n\n\n\n23\n\n\n\nBenjamin Harrison(1833\u20131901)[49]\n\nMarch 4, 1889\u2013March 4, 1893\n\n\n\nRepublican\n\n1888\n\nLevi P. Morton\n\n\n24\n\n\n\nGrover Cleveland(1837\u20131908)[48]\n\nMarch 4, 1893\u2013March 4, 1897\n\n\n\nDemocratic\n\n1892\n\nAdlai Stevenson\u00a0I\n\n\n25\n\n\n\nWilliam McKinley(1843\u20131901)[50]\n\nMarch 4, 1897\u2013September 14, 1901[e]\n\n\n\nRepublican\n\n1896\n\n1900\n\n\nGarret Hobart[e]\n\nVacant\u00a0afterNovember 21, 1899\n\n\nTheodore Roosevelt\n\n\n\n26\n\n\n\nTheodore Roosevelt(1858\u20131919)[51]\n\nSeptember 14, 1901[p]\u2013March 4, 1909\n\n\n\nRepublican\n\n\u2013\n\n1904\n\n\nVacant\u00a0throughMarch 4, 1905\n\nCharles W. Fairbanks\n\n\n\n27\n\n\n\nWilliam Howard Taft(1857\u20131930)[53]\n\nMarch 4, 1909\u2013March 4, 1913\n\n\n\nRepublican\n\n1908\n\nJames S. Sherman[e]\n\nVacant\u00a0afterOctober 30, 1912\n\n\n\n28\n\n\n\nWoodrow Wilson(1856\u20131924)[54]\n\nMarch 4, 1913\u2013March 4, 1921\n\n\n\nDemocratic\n\n1912\n\n1916\n\n\nThomas R. Marshall\n\n\n29\n\n\n\nWarren G. Harding(1865\u20131923)[55]\n\nMarch 4, 1921\u2013August 2, 1923[e]\n\n\n\nRepublican\n\n1920\n\nCalvin Coolidge\n\n\n30\n\n\n\nCalvin Coolidge(1872\u20131933)[56]\n\nAugust 2, 1923[q]\u2013March 4, 1929\n\n\n\nRepublican\n\n\u2013\n\n1924\n\n\nVacant\u00a0throughMarch 4, 1925\n\nCharles G. Dawes\n\n\n\n31\n\n\n\nHerbert Hoover(1874\u20131964)[58]\n\nMarch 4, 1929\u2013March 4, 1933\n\n\n\nRepublican\n\n1928\n\nCharles Curtis\n\n\n32\n\n\n\nFranklin D. Roosevelt(1882\u20131945)[59]\n\nMarch 4, 1933\u2013April 12, 1945[e]\n\n\n\nDemocratic\n\n1932\n\n1936\n\n\n1940\n\n\n1944\n\n\nJohn Nance Garner\n\nHenry A. Wallace\n\n\nHarry S. Truman\n\n\n\n33\n\n\n\nHarry S. Truman(1884\u20131972)[60]\n\nApril 12, 1945[r]\u2013January 20, 1953\n\n\n\nDemocratic\n\n\u2013\n\n1948\n\n\nVacant\u00a0throughJanuary 20, 1949\n\nAlben W. Barkley\n\n\n\n34\n\n\n\nDwight D. Eisenhower(1890\u20131969)[62]\n\nJanuary 20, 1953\u2013January 20, 1961\n\n\n\nRepublican\n\n1952\n\n1956\n\n\nRichard Nixon\n\n\n35\n\n\n\nJohn F. Kennedy(1917\u20131963)[63]\n\nJanuary 20, 1961\u2013November 22, 1963[e]\n\n\n\nDemocratic\n\n1960\n\nLyndon B. Johnson\n\n\n36\n\n\n\nLyndon B. Johnson(1908\u20131973)[64]\n\nNovember 22, 1963[s]\u2013January 20, 1969\n\n\n\nDemocratic\n\n\u2013\n\n1964\n\n\nVacant\u00a0throughJanuary 20, 1965\n\nHubert Humphrey\n\n\n\n37\n\n\n\nRichard Nixon(1913\u20131994)[66]\n\nJanuary 20, 1969\u2013August 9, 1974[h]\n\n\n\nRepublican\n\n1968\n\n1972\n\n\nSpiro Agnew[h]\n\nVacant:October 10\u00a0\u2013 December 6, 1973\n\n\nGerald Ford[t]\n\n\n\n38\n\n\n\nGerald Ford(1913\u20132006)[67]\n\nAugust 9, 1974[u]\u2013January 20, 1977\n\n\n\nRepublican\n\n\u2013\n\nVacant\u00a0throughDecember 19, 1974\n\nNelson Rockefeller[t]\n\n\n\n39\n\n\n\nJimmy Carter(b. 1924)[68]\n\nJanuary 20, 1977\u2013January 20, 1981\n\n\n\nDemocratic\n\n1976\n\nWalter Mondale\n\n\n40\n\n\n\nRonald Reagan(1911\u20132004)[69]\n\nJanuary 20, 1981\u2013January 20, 1989\n\n\n\nRepublican\n\n1980\n\n1984\n\n\nGeorge H. W. Bush\n\n\n41\n\n\n\nGeorge H. W. Bush(1924\u20132018)[70]\n\nJanuary 20, 1989\u2013January 20, 1993\n\n\n\nRepublican\n\n1988\n\nDan Quayle\n\n\n42\n\n\n\nBill Clinton(b. 1946)[71]\n\nJanuary 20, 1993\u2013January 20, 2001\n\n\n\nDemocratic\n\n1992\n\n1996\n\n\nAl Gore\n\n\n43\n\n\n\nGeorge W. Bush(b. 1946)[72]\n\nJanuary 20, 2001\u2013January 20, 2009\n\n\n\nRepublican\n\n2000\n\n2004\n\n\nDick Cheney\n\n\n44\n\n\n\nBarack Obama(b. 1961)[73]\n\nJanuary 20, 2009\u2013January 20, 2017\n\n\n\nDemocratic\n\n2008\n\n2012\n\n\nJoe Biden\n\n\n45\n\n\n\nDonald Trump(b. 1946)[74]\n\nJanuary 20, 2017\u2013January 20, 2021\n\n\n\nRepublican\n\n2016\n\nMike Pence\n\n\n46\n\n\n\nJoe Biden(b. 1942)[6]\n\nJanuary 20, 2021\u2013Incumbent\n\n\n\nDemocratic\n\n2020\n\nKamala Harris\n\nSee also\nActing President of the United States\nFounding Fathers of the United States\nPresident of the Continental Congress\nNotes\n\n\n^ Presidents are numbered according to uninterrupted periods served by the same person. For example, George Washington served two consecutive terms and is counted as the first president (not the first and second). Upon the resignation of 37th president, Richard Nixon, Gerald Ford became the 38th president even though he simply served out the remainder of Nixon's second term and was never elected to the presidency in his own right. Grover Cleveland was both the 22nd president and the 24th president because his two terms were not consecutive. A vice president who temporarily becomes acting president under the Twenty-fifth Amendment to the Constitution is not counted, because the president remains in office during such a period.\n\n^ Reflects the president's political party at the start of their presidency. Changes during their time in office are noted. Also reflects the vice president's political party unless otherwise noted beside the individual's name.\n\n^ Political parties had not been anticipated when the Constitution was drafted, nor did they exist at the time of the first presidential election in 1788\u201389. When they did develop, during Washington's first term, Adams joined the faction that became the Federalist Party. The elections of 1792 were the first ones in the United States that were contested on anything resembling a partisan basis.[18]\n\n^ The 1796 presidential election was the first contested American presidential election and the only one in which a president and vice president were elected from opposing political parties. Federalist John Adams was elected president, and Jefferson of the Democratic-Republicans was elected vice president.[20]\n\n^ a b c d e f g h i j k l m n o Died in office[23]\n\n^ Early during John Quincy Adams' term the Democratic-Republican Party dissolved; his allies in Congress and at the state-level were referred to as \"Adams' Men\" during the Adams presidency. When Andrew Jackson became president in 1829, this group became the \"Anti-Jackson\" opposition, and organized themselves as the National Republican Party.[26]\n\n^ John Calhoun, formerly a Democratic-Republican, founded the Nullifier Party in 1828 to oppose the Tariff of 1828 and advance the cause of states' rights, but was brought on as Andrew Jackson's running mate in the 1828 presidential election in an effort to broaden the democratic coalition led by Jackson.[27]\n\n^ a b c Resigned from office[23]\n\n^ John Tyler succeeded to the presidency upon the death of William Henry Harrison.[32]\n\n^ John Tyler was elected vice president on the Whig Party ticket in 1840. His policy priorities as president soon proved to be opposed to most of the Whig agenda, and he was expelled from the party five months after assuming office.[33]\n\n^ Millard Fillmore succeeded to the presidency upon the death of Zachary Taylor.[37]\n\n^ When he ran for reelection in 1864, Republican Abraham Lincoln formed a bipartisan electoral alliance with War Democrats by selecting Democrat Andrew Johnson as his running mate, and running on the National Union Party ticket.[41]\n\n^ Andrew Johnson succeeded to the presidency upon the death of Abraham Lincoln.[42]\n\n^ While president, Andrew Johnson tried and failed to build a party of loyalists under the National Union banner. Near the end of his presidency, Johnson rejoined the Democratic Party.[42]\n\n^ Chester A. Arthur succeeded to the presidency upon the death of James A. Garfield.[47]\n\n^ Theodore Roosevelt succeeded to the presidency upon the death of William McKinley.[52]\n\n^ Calvin Coolidge succeeded to the presidency upon the death of Warren G. Harding.[57]\n\n^ Harry S. Truman succeeded to the presidency upon the death of Franklin D. Roosevelt.[61]\n\n^ Lyndon B. Johnson succeeded to the presidency upon the death of John F. Kennedy.[65]\n\n^ a b Appointed as vice president under terms of the Twenty-fifth Amendment, Section 2[23]\n\n^ Gerald Ford succeeded to the presidency upon the resignation of Richard Nixon.[67]\n\n\nReferences\n\n\n^ Rossiter (1962), p.\u00a086.\n\n^ Shugart (2004), pp.\u00a0633\u2013636.\n\n^ Epstein (2005), p.\u00a0318.\n\n^ Matuz (2001), p.\u00a0xxii.\n\n^ Schaller & Williams (2003), p.\u00a0192.\n\n^ a b whitehouse.gov (g).\n\n^ McHugh & Mackowiak (2014), pp.\u00a0990\u2013995.\n\n^ Skau (1974), pp.\u00a0246\u2013275.\n\n^ Peabody & Gant (1999), p.\u00a0565.\n\n^ Abbott (2005), pp.\u00a0627\u2013644.\n\n^ Dinnerstein (1962), pp.\u00a0447\u2013451.\n\n^ Guide to U.S. Elections (2010), p.\u00a0197; Nardulli (1992), p.\u00a0179.\n\n^ LOC (2); Jamison (2014).\n\n^ LOC; whitehouse.gov.\n\n^ Guide to U.S. Elections (2010), pp.\u00a0257\u2013258.\n\n^ LOC.\n\n^ McDonald (2000).\n\n^ Guide to U.S. Elections (2010), pp.\u00a0197, 272; Nardulli (1992), p.\u00a0179.\n\n^ Pencak (2000).\n\n^ Guide to U.S. Elections (2010), p.\u00a0274.\n\n^ Peterson (2000).\n\n^ Banning (2000).\n\n^ a b c Neale (2004), p.\u00a022.\n\n^ Ammon (2000).\n\n^ Hargreaves (2000).\n\n^ Guide to U.S. Elections (2010), p.\u00a0228; Goldman (1951), p.\u00a0159.\n\n^ Guide to U.S. Elections (2010), p.\u00a0892; Houpt (2010), pp.\u00a026, 280.\n\n^ Remini (2000).\n\n^ Cole (2000).\n\n^ Gutzman (2000).\n\n^ Shade (2000).\n\n^ Abbott (2013), p.\u00a023.\n\n^ Cash (2018), pp.\u00a034\u201336.\n\n^ Rawley (2000).\n\n^ Smith (2000).\n\n^ Anbinder (2000).\n\n^ Abbott (2005), p.\u00a0639.\n\n^ Gara (2000).\n\n^ Gienapp (2000).\n\n^ McPherson (b) (2000).\n\n^ McSeveney (1986), p.\u00a0139.\n\n^ a b c Trefousse (2000).\n\n^ McPherson (a) (2000).\n\n^ Hoogenboom (2000).\n\n^ Peskin (2000).\n\n^ Reeves (2000).\n\n^ Greenberger (2017), pp.\u00a0174\u2013175.\n\n^ a b Campbell (2000).\n\n^ Spetter (2000).\n\n^ Gould (a) (2000).\n\n^ Harbaugh (2000).\n\n^ Abbott (2005), p.\u00a0639\u2013640.\n\n^ Gould (b) (2000).\n\n^ Ambrosius (2000).\n\n^ Hawley (2000).\n\n^ McCoy (2000).\n\n^ Senate.\n\n^ Hoff (a) (2000).\n\n^ Brinkley (2000).\n\n^ Hamby (2000).\n\n^ Abbott (2005), p.\u00a0636.\n\n^ Ambrose (2000).\n\n^ Parmet (2000).\n\n^ Gardner (2000).\n\n^ Abbott (2005), p.\u00a0633.\n\n^ Hoff (b) (2000).\n\n^ a b Greene (2013).\n\n^ whitehouse.gov (a).\n\n^ Schaller (2004).\n\n^ whitehouse.gov (b).\n\n^ whitehouse.gov (c).\n\n^ whitehouse.gov (d).\n\n^ whitehouse.gov (e).\n\n^ whitehouse.gov (f).\n\n\nWorks cited\n\nGeneral\n\nGuide to U.S. Elections. SAGE Publications. 2010. ISBN\u00a0978-1-60426-536-1.\n\"Chronological List of Presidents, First Ladies, and Vice Presidents of the United States\". Library of Congress. Retrieved February 20, 2020.\n\"Presidents\". whitehouse.gov. Retrieved May 14, 2022.\nExpert studies\n\nAbbott, Philip (2005). \"Accidental Presidents: Death, Assassination, Resignation, and Democratic Succession\". Presidential Studies Quarterly. Wiley. 35 (4): 627\u2013645. doi:10.1111/j.1741-5705.2005.00269.x. ISSN\u00a00360-4918. JSTOR\u00a027552721.\nAbbott, Philip (2013). \"The First Bad President?: John Tyler\". Bad Presidents. The Evolving American Presidency Series. Palgrave Macmillan. pp.\u00a023\u201342. doi:10.1057/9781137306593_2. ISBN\u00a0978-1-349-45513-3.\nCash, Jordan T. (2018). \"The Isolated Presidency: John Tyler and Unilateral Presidential Power\". American Political Thought. 7: 26\u201356. doi:10.1086/695644. S2CID\u00a0158133180 \u2013 via ResearchGate.\nDinnerstein, Leonard (1962). \"The Accession of John Tyler to the Presidency\". Virginia Magazine of History and Biography. Virginia Historical Society. 70 (4): 447\u2013458. JSTOR\u00a04246893.\nEpstein, Richard A. (2005). \"Executive Power, the Commander in Chief, and the Militia Clause\". Hofstra Law Review. 34 (2). ISSN\u00a00091-4029.\nGoldman, Ralph Morris (1951). Party Chairmen and Party Faction, 1789\u20131900: A Theory of Executive Responsibility and Conflict Resolution. University of Chicago Press. OCLC\u00a01243718246.\nHoupt, David W. (2010). \"Securing a Legacy\". The Virginia Magazine of History and Biography. Vol.\u00a0118, no.\u00a01. Virginia Historical Society. ProQuest\u00a0195929787.\nMatuz, Roger (2001). Complete American Presidents Sourcebook. UXL. ISBN\u00a0978-0-7876-4842-8. LCCN\u00a000056794. OL\u00a024722725M.\nMcHugh, Jane; Mackowiak, Philip A. (2014). \"Death in the White House: President William Henry Harrison's Atypical Pneumonia\". Clinical Infectious Diseases. Oxford University Press. 59 (7): 990\u2013995. doi:10.1093/cid/ciu470. JSTOR\u00a024032403. PMID\u00a024962997.\nMcSeveney, Samuel T. (1986). \"Re-electing Lincoln: The Union Party Campaign and the Military Vote in Connecticut\". Civil War History. Kent State University Press. 32 (2): 139\u2013158. doi:10.1353/cwh.1986.0032.\nNardulli, Peter F., ed. (1992). The Constitution and American Political Development: An Institutional Perspective. University of Illinois Press. ISBN\u00a0978-0-252-01787-2.\nNeale, Thomas H. (2004). \"Presidential and Vice Presidential Succession: Overview and Current Legislation\" (PDF). Congressional Research Service.\nPeabody, Bruce G.; Gant, Scott E. (1999). \"The Twice and Future President: Constitutional Interstices and the Twenty-Second Amendment\". Minnesota Law Review. 83 (565). ISSN\u00a00026-5535.\nRossiter, Clinton (1962). \"Powers of the United States President and Congress\". Pakistan Horizon. Pakistan Institute of International Affairs. 15 (2): 85\u201392. JSTOR\u00a041392704.\nSchaller, Thomas F.; Williams, Thomas W. (2003). \"'The Contemporary Presidency': Postpresidential Influence in the Postmodern Era\". Presidential Studies Quarterly. Center for Congressional and Presidential Studies. 33 (1): 188\u2013200. JSTOR\u00a027552468.\nShugart, Matthew S. (2004). \"Elections': The American Process of Selecting a President: A Comparative Perspective\". Presidential Studies Quarterly. Center for Congressional and Presidential Studies. 34 (3): 632\u2013655. doi:10.1111/j.1741-5705.2004.00216.x. JSTOR\u00a027552617.\nSkau, George H. (1974). \"Franklin D. Roosevelt and the Expansion of Presidential Power\". Current History. University of California Press. 66 (394): 246\u2013275. doi:10.1525/curh.1974.66.394.246. JSTOR\u00a045313079. S2CID\u00a0248394036.\nPresidential biographies\n\nAmbrose, Stephen E. (2000) [1999]. \"Eisenhower, Dwight David\". American National Biography. Oxford University Press. doi:10.1093/anb/9780198606697.article.0700094. ISBN\u00a0978-0-19-860669-7. Retrieved May 14, 2022.\nAmbrosius, Lloyd E. (2000) [1999]. \"Wilson, Woodrow\". American National Biography. Oxford University Press. doi:10.1093/anb/9780198606697.article.0600726. ISBN\u00a0978-0-19-860669-7. Retrieved May 14, 2022.\nAmmon, Harry (2000) [1999]. \"Monroe, James\". American National Biography. Oxford University Press. doi:10.1093/anb/9780198606697.article.0300338. ISBN\u00a0978-0-19-860669-7. Retrieved May 14, 2022.\nAnbinder, Tyler (2000) [1999]. \"Fillmore, Millard\". American National Biography. Oxford University Press. doi:10.1093/anb/9780198606697.article.0400374. ISBN\u00a0978-0-19-860669-7. Retrieved May 14, 2022.\nBanning, Lance (2000) [1999]. \"Madison, James\". American National Biography. Oxford University Press. doi:10.1093/anb/9780198606697.article.0300303. ISBN\u00a0978-0-19-860669-7. Retrieved May 14, 2022.\nBrinkley, Alan (2000) [1999]. \"Roosevelt, Franklin Delano\". American National Biography. Oxford University Press. doi:10.1093/anb/9780198606697.article.0600567. ISBN\u00a0978-0-19-860669-7. Retrieved May 14, 2022.\nCampbell, Ballard C. (2000) [1999]. \"Cleveland, Grover\". American National Biography. Oxford University Press. doi:10.1093/anb/9780198606697.article.0500144. ISBN\u00a0978-0-19-860669-7. Retrieved May 14, 2022.\nCole, Donald B. (2000) [1999]. \"Van Buren, Martin\". American National Biography. Oxford University Press. doi:10.1093/anb/9780198606697.article.0300507. ISBN\u00a0978-0-19-860669-7. Retrieved May 14, 2022.\nGara, Larry (2000) [1999]. \"Pierce, Franklin\". American National Biography. Oxford University Press. doi:10.1093/anb/9780198606697.article.0400788. ISBN\u00a0978-0-19-860669-7. Retrieved May 14, 2022.\nGardner, Lloyd (2000) [1999]. \"Johnson, Lyndon Baines\". American National Biography. Oxford University Press. doi:10.1093/anb/9780198606697.article.0700147. ISBN\u00a0978-0-19-860669-7. Retrieved May 14, 2022.\nGienapp, William E. (2000) [1999]. \"Buchanan, James\". American National Biography. Oxford University Press. doi:10.1093/anb/9780198606697.article.0400170. ISBN\u00a0978-0-19-860669-7. Retrieved May 14, 2022.\nGould, Lewis L. (2000) [1999]. \"McKinley, William\". American National Biography. Oxford University Press. doi:10.1093/anb/9780198606697.article.0500507. ISBN\u00a0978-0-19-860669-7. Retrieved May 14, 2022.\nGould, Lewis L. (2000) [1999]. \"Taft, William Howard\". American National Biography. Oxford University Press. doi:10.1093/anb/9780198606697.article.0600642. ISBN\u00a0978-0-19-860669-7. Retrieved May 14, 2022.\nGreenberger, Scott S. (2017). The Unexpected President: The Life and Times of Chester A. Arthur. Da Capo Press. ISBN\u00a0978-0-306-82390-9.\nGreene, John Robert (2013). \"Ford, Gerald R., Jr\". American National Biography. Oxford University Press. doi:10.1093/anb/9780198606697.article.1501345. ISBN\u00a0978-0-19-860669-7. Retrieved May 14, 2022.\nGutzman, K. R. Constantine (2000) [1999]. \"Harrison, William Henry\". American National Biography. Oxford University Press. doi:10.1093/anb/9780198606697.article.0300211. ISBN\u00a0978-0-19-860669-7. Retrieved May 14, 2022.\nHamby, Alonzo L. (2000) [1999]. \"Truman, Harry S.\" American National Biography. Oxford University Press. doi:10.1093/anb/9780198606697.article.0700307. ISBN\u00a0978-0-19-860669-7. Retrieved May 14, 2022.\nHarbaugh, William H. (2000) [1999]. \"Roosevelt, Theodore\". American National Biography. Oxford University Press. doi:10.1093/anb/9780198606697.article.0600569. ISBN\u00a0978-0-19-860669-7. Retrieved May 14, 2022.\nHargreaves, Mary W. M. (2000) [1999]. \"Adams, John Quincy\". American National Biography. Oxford University Press. doi:10.1093/anb/9780198606697.article.0300002. ISBN\u00a0978-0-19-860669-7. Retrieved May 14, 2022.\nHawley, Ellis W. (2000) [1999]. \"Harding, Warren Gamaliel\". American National Biography. Oxford University Press. doi:10.1093/anb/9780198606697.article.0600253. ISBN\u00a0978-0-19-860669-7. Retrieved May 14, 2022.\nHoff, Joan (2000) [1999]. \"Hoover, Herbert Clark\". American National Biography. Oxford University Press. doi:10.1093/anb/9780198606697.article.0600287. ISBN\u00a0978-0-19-860669-7. Retrieved May 14, 2022.\nHoff, Joan (2000) [1999]. \"Nixon, Richard Milhous\". American National Biography. Oxford University Press. doi:10.1093/anb/9780198606697.article.0700684. ISBN\u00a0978-0-19-860669-7. Retrieved May 14, 2022.\nHoogenboom, Ari (2000) [1999]. \"Hayes, Rutherford Birchard\". American National Biography. Oxford University Press. doi:10.1093/anb/9780198606697.article.0500331. ISBN\u00a0978-0-19-860669-7. Retrieved May 14, 2022.\nMcCoy, Donald R. (2000) [1999]. \"Coolidge, Calvin\". American National Biography. Oxford University Press. doi:10.1093/anb/9780198606697.article.0600109. ISBN\u00a0978-0-19-860669-7. Retrieved May 14, 2022.\nMcDonald, Forrest (2000) [1999]. \"Washington, George\". American National Biography. Oxford University Press. doi:10.1093/anb/9780198606697.article.0200332. ISBN\u00a0978-0-19-860669-7. Retrieved May 14, 2022.\nMcPherson, James M. (2000) [1999]. \"Grant, Ulysses S.\" American National Biography. Oxford University Press. doi:10.1093/anb/9780198606697.article.0500291. ISBN\u00a0978-0-19-860669-7. Retrieved May 14, 2022.\nMcPherson, James M. (2000) [1999]. \"Lincoln, Abraham\". American National Biography. Oxford University Press. doi:10.1093/anb/9780198606697.article.0400631. ISBN\u00a0978-0-19-860669-7. Retrieved May 14, 2022.\nParmet, 1917\u201322 November 1963) (2000) [1999]. \"Kennedy, John Fitzgerald\". American National Biography. Oxford University Press. doi:10.1093/anb/9780198606697.article.0700152. ISBN\u00a0978-0-19-860669-7. Retrieved May 14, 2022.\nPencak, William (2000) [1999]. \"Adams, John\". American National Biography. Oxford University Press. doi:10.1093/anb/9780198606697.article.0100007. ISBN\u00a0978-0-19-860669-7. Retrieved May 14, 2022.\nPeskin, Allan (2000) [1999]. \"Garfield, James Abram\". American National Biography. Oxford University Press. doi:10.1093/anb/9780198606697.article.0500264. ISBN\u00a0978-0-19-860669-7. Retrieved May 14, 2022.\nPeterson, Merrill D. (2000). \"Jefferson, Thomas\". American National Biography. Oxford University Press. doi:10.1093/anb/9780198606697.article.0200196. ISBN\u00a0978-0-19-860669-7. Retrieved May 14, 2022.\nRawley, James A. (2000) [1999]. \"Polk, James Knox\". American National Biography. Oxford University Press. doi:10.1093/anb/9780198606697.article.0400795. ISBN\u00a0978-0-19-860669-7. Retrieved May 14, 2022.\nReeves, Thomas C. (2000) [1999]. \"Arthur, Chester Alan\". American National Biography. Oxford University Press. doi:10.1093/anb/9780198606697.article.0500033. ISBN\u00a0978-0-19-860669-7. Retrieved May 14, 2022.\nRemini, Robert V. (2000) [1999]. \"Jackson, Andrew\". American National Biography. Oxford University Press. doi:10.1093/anb/9780198606697.article.0300238. ISBN\u00a0978-0-19-860669-7. Retrieved May 14, 2022.\nSchaller, Michael (2004). \"Reagan, Ronald Wilson\". American National Biography. Oxford University Press. doi:10.1093/anb/9780198606697.article.0700791. ISBN\u00a0978-0-19-860669-7. Retrieved May 14, 2022.\nShade, William G. (2000) [1999]. \"Tyler, John\". American National Biography. Oxford University Press. doi:10.1093/anb/9780198606697.article.0401004. ISBN\u00a0978-0-19-860669-7. Retrieved May 14, 2022.\nSmith, Elbert B. (2000) [1999]. \"Taylor, Zachary\". American National Biography. Oxford University Press. doi:10.1093/anb/9780198606697.article.0400978. ISBN\u00a0978-0-19-860669-7. Retrieved May 14, 2022.\nSpetter, Allan Burton (2000) [1999]. \"Harrison, Benjamin\". American National Biography. Oxford University Press. doi:10.1093/anb/9780198606697.article.0500320. ISBN\u00a0978-0-19-860669-7. Retrieved May 14, 2022.\nTrefousse, Hans L. (2000) [1999]. \"Johnson, Andrew\". American National Biography. Oxford University Press. doi:10.1093/anb/9780198606697.article.0400566. ISBN\u00a0978-0-19-860669-7. Retrieved May 14, 2022.\n\"James Carter\". whitehouse.gov. Retrieved May 14, 2022.\n\"George H. W. Bush\". whitehouse.gov. Retrieved May 14, 2022.\n\"William J. Clinton\". whitehouse.gov. Retrieved May 14, 2022.\n\"George W. Bush\". whitehouse.gov. Retrieved May 14, 2022.\n\"Barack Obama\". whitehouse.gov. Retrieved May 14, 2022.\n\"Donald Trump\". whitehouse.gov. Retrieved May 14, 2022.\n\"Joe Biden\". whitehouse.gov. Retrieved May 14, 2022.\nOnline sources\n\nJamison, Dennis (December 31, 2014). \"George Washington' Views on Political Parties in America\". The Washington Times. Retrieved February 20, 2020.\n\"Creating the United States: Formation of Political Parties\". Library of Congress. Retrieved July 31, 2022.\n\"President's Swearing-in Ceremony\". United States Senate. Retrieved July 31, 2022.\n\nExternal links\n Media related to President of the United States at Wikimedia Commons\n Quotations related to List of presidents of the United States at Wikiquote\n\nvtePresidents of the United StatesPresidents andpresidencies\nGeorge Washington (1789\u20131797)\nJohn Adams (1797\u20131801)\nThomas Jefferson (1801\u20131809)\nJames Madison (1809\u20131817)\nJames Monroe (1817\u20131825)\nJohn Quincy Adams (1825\u20131829)\nAndrew Jackson (1829\u20131837)\nMartin Van Buren (1837\u20131841)\nWilliam Henry Harrison (1841)\nJohn Tyler (1841\u20131845)\nJames K. Polk (1845\u20131849)\nZachary Taylor (1849\u20131850)\nMillard Fillmore (1850\u20131853)\nFranklin Pierce (1853\u20131857)\nJames Buchanan (1857\u20131861)\nAbraham Lincoln (1861\u20131865)\nAndrew Johnson (1865\u20131869)\nUlysses S. Grant (1869\u20131877)\nRutherford B. Hayes (1877\u20131881)\nJames A. Garfield (1881)\nChester A. Arthur (1881\u20131885)\nGrover Cleveland (1885\u20131889)\nBenjamin Harrison (1889\u20131893)\nGrover Cleveland (1893\u20131897)\nWilliam McKinley (1897\u20131901)\nTheodore Roosevelt (1901\u20131909)\nWilliam Howard Taft (1909\u20131913)\nWoodrow Wilson (1913\u20131921)\nWarren G. Harding (1921\u20131923)\nCalvin Coolidge (1923\u20131929)\nHerbert Hoover (1929\u20131933)\nFranklin D. Roosevelt (1933\u20131945)\nHarry S. Truman (1945\u20131953)\nDwight D. Eisenhower (1953\u20131961)\nJohn F. Kennedy (1961\u20131963)\nLyndon B. Johnson (1963\u20131969)\nRichard Nixon (1969\u20131974)\nGerald Ford (1974\u20131977)\nJimmy Carter (1977\u20131981)\nRonald Reagan (1981\u20131989)\nGeorge H. W. Bush (1989\u20131993)\nBill Clinton (1993\u20132001)\nGeorge W. Bush (2001\u20132009)\nBarack Obama (2009\u20132017)\nDonald Trump (2017\u20132021)\nJoe Biden (2021\u2013present)\nPresidencytimelines\nWashington\nMcKinley\nT. Roosevelt\nTaft\nWilson\nHarding\nCoolidge\nHoover\nF. D. Roosevelt\nTruman\nEisenhower\nKennedy\nL. B. Johnson\nNixon\nFord\nCarter\nReagan\nG. H. W. Bush\nClinton\nG. W. Bush\nObama\nTrump\nBiden\n\n Category\n List\n\nvteLists related to the presidents and vice presidents of the United States\nList of presidents\nList of vice presidents\nPresidentsProfessionalcareer\nApproval rating\nAssassination attempts and plots\nControl of Congress\nDoctrines\nExecutive orders\nHistorical rankings\nImpeachment efforts\nInternational trips\nJudicial appointments\nMilitary service\nrank\nOfficial vehicles\nOther offices held\nPardons\nPost-presidency campaigns\nPrevious experience\nTime in office\nVetoes\nPersonal life\nAge\nAncestry\nAutobiographies\nBurial places\nCoats of arms\nDeath\nin office\nEducation\nFacial hair\nFamilies\nfirst ladies\nchildren\nFirsts\nFreemasons\nHome state\nLeft-handed\nMultilingualism\nNet worth\nNicknames\nPets\nReligious affiliation\nResidences\nScouts\nSlave owners\nDepictionsand honors\nActor portrayals\nfictional\nCurrency\nEducational institutions\nLibraries\nMemorials\nin other countries\nMilitary vessels\nPortraits\nSculptures\nU.S. counties\nU.S. postage stamps\nVice presidents\nAge\nBurial places\nCoats of arms\nEducation\nFamilies\nspouses\nchildren\nHome state\nImpeachment efforts\nOther offices held\nRan for president\nReligious affiliation\nSlave owners\nTie-breaking votes\nTime in office\nU.S. Senate bust collection\nSuccession\nActing presidents\nDesignated survivors\nInaugurations\nTransitions\nElections\nElectoral College margin\nPopular vote margin\nWinner lost popular vote\nCandidatesPolitical affiliation\nDemocratic\nDemocratic-Republican\nFederalist\nGreen\nLibertarian\nNational Republican\u00a0/ Whig\nRepublican\nThird party\u00a0/ independent\nDistinctions\nAfrican American\nCampaign slogans\nFemale\nFirsts\nHeight\nLost their home state\nNumber of votes received\nin primaries\nReceived at least one electoral vote\nUnsuccessful major party presidential candidates\nUnsuccessful major party vice presidential candidates\n\n Biography portal\n Politics portal\n United States portal\n\nvteChief executives of the United StatesFederal\nPresident of the United States\nlist\nState governors(current list)\nAlabama\nAlaska\nArizona\nArkansas\nCalifornia\nlist\nColorado\nConnecticut\nDelaware\nFlorida\nGeorgia\nlist\nHawaii\nlist\nIdaho\nIllinois\nlist\nIndiana\nlist\nIowa\nKansas\nKentucky\nlist\nLouisiana\nMaine\nlist\nMaryland\nlist\nMassachusetts\nMichigan\nlist\nMinnesota\nlist\nMississippi\nMissouri\nMontana\nNebraska\nNevada\nNew Hampshire\nlist\nNew Jersey\nlist\nNew Mexico\nlist\nNew York\nlist\nNorth Carolina\nlist\nNorth Dakota\nlist\nOhio\nOklahoma\nlist\nOregon\nlist\nPennsylvania\nRhode Island\nlist\nSouth Carolina\nlist\nSouth Dakota\nlist\nTennessee\nlist\nTexas\nlist\nUtah\nVermont\nlist\nVirginia\nlist\nWashington\nWest Virginia\nWisconsin\nlist\nWyoming\nTerritorial(current list)\nAmerican Samoa\nDistrict of Columbia\nlist\nGuam\nNorthern Mariana Islands\nPuerto Rico\nlist\nUnited States Virgin Islands\nDefunct\nCuba\nDakota Territory\nPanama Canal Zone\nPhilippine Islands (until 1935)\nPhilippine Commonwealth (until 1946)\nTrust Territory of the Pacific Islands\nSanto Domingo\n\nPortals:\u00a0Biography\u00a0United States\u00a0Politics\n\n\n\n\nRetrieved from \"https://en.wikipedia.org/w/index.php?title=List_of_presidents_of_the_United_States&oldid=1165426464\"\nCategories: Lists of national presidentsLists relating to the United States presidencyPresidents of the United StatesHidden categories: Articles with short descriptionShort description is different from WikidataFeatured listsUse American English from June 2021All Wikipedia articles written in American EnglishUse mdy dates from April 2017Wikipedia indefinitely semi-protected pagesCommons link is locally defined\n\n\n\n\n\n\n This page was last edited on 15 July 2023, at 03:23\u00a0(UTC).\nText is available under the Creative Commons Attribution-ShareAlike License 4.0;\nadditional terms may apply.  By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia\u00ae is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.\n\n\nPrivacy policy\nAbout Wikipedia\nDisclaimers\nContact Wikipedia\nCode of Conduct\nMobile view\nDevelopers\nStatistics\nCookie statement\n\n\n\n\n\n\n\n\n\n\n\n\nToggle limited content width\n\n\n\n\n\n\n\n"}
{"key": "Given the following question:\n```\nList of presidents of the United States - Wikipedia\n```\nI got the following answer from a web page:\n```\nList of presidents of the United States - Wikipedia Jump to content Main menu Main menu move to sidebar hide Navigation Main pageContentsCurrent eventsRandom articleAbout WikipediaContact usDonate Contribute HelpLearn to editCommunity portalRecent changesUpload file Languages Language links are at the top of the page across from the title. Search Search Create accountLog in Personal tools Create account Log in Pages for logged out editors learn more ContributionsTalk Contents move to sidebar hide (Top) 1Presidents 2See also 3Notes 4References 5Works cited 6External links Toggle the table of contents Toggle the table of contents List of presidents of the United States 126 languages AfrikaansAlemannisch\u12a0\u121b\u122d\u129b\u0627\u0644\u0639\u0631\u0628\u064a\u0629Arpetan\u0985\u09b8\u09ae\u09c0\u09af\u09bc\u09beAz\u0259rbaycancaBasa BaliBamanankan\u09ac\u09be\u0982\u09b2\u09beB\u00e2n-l\u00e2m-g\u00fa\u0411\u0430\u0448\u04a1\u043e\u0440\u0442\u0441\u0430\u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044fBikol Central\u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438BoarischBosanskiBrezhonegCatal\u00e0\u0427\u04d1\u0432\u0430\u0448\u043b\u0430Cebuano\u010ce\u0161tinaCorsuCymraegDanskDeutschEesti\u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac\u042d\u0440\u0437\u044f\u043d\u044cEspa\u00f1olEsperantoEuskara\u0641\u0627\u0631\u0633\u06ccF\u00f8roysktFran\u00e7aisFryskGaeilgeGaelgGalego\ud55c\uad6d\uc5b4\u0540\u0561\u0575\u0565\u0580\u0565\u0576\u0939\u093f\u0928\u094d\u0926\u0940HrvatskiIdoIlokanoBahasa IndonesiaInterlingua\u00cdslenskaItaliano\u05e2\u05d1\u05e8\u05d9\u05eaJawa\u0c95\u0ca8\u0ccd\u0ca8\u0ca1\u10e5\u10d0\u10e0\u10d7\u10e3\u10da\u10d8\u049a\u0430\u0437\u0430\u049b\u0448\u0430KernowekIkinyarwandaKiswahiliKurd\u00ee\u041a\u044b\u0440\u044b\u043a \u043c\u0430\u0440\u044bLatinaLatvie\u0161uL\u00ebtzebuergeschLietuvi\u0173LimburgsLingua Franca NovaLa .lojban.Magyar\u092e\u0948\u0925\u093f\u0932\u0940\u041c\u0430\u043a\u0435\u0434\u043e\u043d\u0441\u043a\u0438Malagasy\u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02\u10db\u10d0\u10e0\u10d2\u10d0\u10da\u10e3\u10e0\u10d8\u0645\u0635\u0631\u0649\u0645\u0627\u0632\u0650\u0631\u0648\u0646\u06ccBahasa Melayu\u041c\u043e\u043d\u0433\u043e\u043bNederlandsNedersaksies\u0928\u0947\u092a\u093e\u0932\u0940\u0928\u0947\u092a\u093e\u0932 \u092d\u093e\u0937\u093e\u65e5\u672c\u8a9e\u07d2\u07de\u07cfNorsk bokm\u00e5lNorsk nynorskNouormandOccitanO\u02bbzbekcha / \u045e\u0437\u0431\u0435\u043a\u0447\u0430\u0a2a\u0a70\u0a1c\u0a3e\u0a2c\u0a40\u067e\u0646\u062c\u0627\u0628\u06ccPlattd\u00fc\u00fctschPolskiPortugu\u00easRipoarischRom\u00e2n\u0103\u0420\u0443\u0441\u0438\u043d\u044c\u0441\u043a\u044b\u0439\u0420\u0443\u0441\u0441\u043a\u0438\u0439ScotsShqipSicilianu\u0dc3\u0dd2\u0d82\u0dc4\u0dbdSimple EnglishSloven\u010dinaSloven\u0161\u010dina\u06a9\u0648\u0631\u062f\u06cc\u0421\u0440\u043f\u0441\u043a\u0438 / srpskiSrpskohrvatski / \u0441\u0440\u043f\u0441\u043a\u043e\u0445\u0440\u0432\u0430\u0442\u0441\u043a\u0438SuomiSvenska\u0ba4\u0bae\u0bbf\u0bb4\u0bcd\u0422\u0430\u0442\u0430\u0440\u0447\u0430 / tatar\u00e7a\u0c24\u0c46\u0c32\u0c41\u0c17\u0c41\u0e44\u0e17\u0e22\u0422\u043e\u04b7\u0438\u043a\u04e3\u13e3\u13b3\u13a9T\u00fcrk\u00e7eT\u00fcrkmen\u00e7e\u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430\u0627\u0631\u062f\u0648V\u00e8netoTi\u1ebfng Vi\u1ec7tWinaray\u5434\u8bed\u05d9\u05d9\u05b4\u05d3\u05d9\u05e9Yor\u00f9b\u00e1\u7cb5\u8a9e\u4e2d\u6587 Edit links Article Talk English Read View source View history Tools Tools move to sidebar hide Actions ReadView sourceView history General What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationCite this pageWikidata item Print/export Download as PDFPrintable version In other projects Wikimedia CommonsWikiquote From Wikipedia, the free encyclopedia The White House, official residence of the president of the United States, pictured in May 2006 The president of the United States is the head of state and head of government of the United States,[1] indirectly elected to a four-year term via the Electoral College.[2] The officeholder leads the executive branch of the federal government and is the commander-in-chief of the United States Armed Forces.[3] Since the office was established in 1789, 45 men have served in 46 presidencies. The first president, George Washington, won a unanimous vote of the Electoral College;[4] one, Grover Cleveland, served two non-consecutive terms and is therefore counted as the 22nd and 24th president of the United States, giving rise to the discrepancy between the number of presidencies and the number of persons who have served as president.[5] The incumbent president is Joe Biden.[6] The presidency of William Henry Harrison, who died 31 days after taking office in 1841, was the shortest in American history.[7] Franklin D. Roosevelt served the longest, over twelve years, before dying early in his fourth term in 1945. He is the only U.S. president to have served more than two terms.[8] Since the ratification of the Twenty-second Amendment to the United States Constitution in 1951, no person may be elected president more than twice, and no one who has served more than two years of a term to which someone else was elected may be elected more than once.[9] Four presidents died in office of natural causes (William Henry Harrison, Zachary Taylor, Warren G. Harding, and Franklin D. Roosevelt), four were assassinated (Abraham Lincoln, James A. Garfield, William McKinley and John F. Kennedy), and one resigned (Richard Nixon, facing impeachment and removal from office).[10] John Tyler was the first vice president to assume the presidency during a presidential term, and set the precedent that a vice president who does so becomes the fully functioning president with his presidency.[11] Throughout most of its history, American politics has been dominated by political parties. The Constitution is silent on the issue of political parties, and at the time it came into force in 1789, no organized parties existed. Soon after the 1st Congress convened, political factions began rallying around dominant Washington administration officials, such as Alexander Hamilton and Thomas Jefferson.[12] Concerned about the capacity of political parties to destroy the fragile unity holding the nation together, Washington remained unaffiliated with any political faction or party throughout his eight-year presidency. He was, and remains, the only U.S. president never affiliated with a political party.[13] Presidents List of presidents of the United States from 1789 \u2013 till date. No.[a] Portrait Name(Birth\u2013Death) Term[14] Party[b][15] Election Vice President[16] 1 George Washington(1732\u20131799)[17] April 30, 1789\u2013March 4, 1797 Unaffiliated 1788\u20131789 1792 John Adams[c] 2 John Adams(1735\u20131826)[19] March 4, 1797\u2013March 4, 1801 Federalist 1796 Thomas Jefferson[d] 3 Thomas Jefferson(1743\u20131826)[21] March 4, 1801\u2013March 4, 1809 Democratic-Republican 1800 1804 Aaron Burr George Clinton 4 James Madison(1751\u20131836)[22] March 4, 1809\u2013March 4, 1817 Democratic-Republican 1808 1812 George Clinton[e] Vacant afterApril 20, 1812 Elbridge Gerry[e] Vacant afterNovember 23, 1814 5 James Monroe(1758\u20131831)[24] March 4, 1817\u2013March 4, 1825 Democratic-Republican 1816 1820 Daniel D. Tompkins 6 John Quincy Adams(1767\u20131848)[25] March 4, 1825\u2013March 4, 1829 Democratic-Republican[f] National Republican 1824 John C. Calhoun[g] 7 Andrew Jackson(1767\u20131845)[28] March 4, 1829\u2013March 4, 1837 Democratic 1828 1832 John C. Calhoun[h] Vacant afterDecember 28, 1832 Martin Van Buren 8 Martin Van Buren(1782\u20131862)[29] March 4, 1837\u2013March 4, 1841 Democratic 1836 Richard Mentor Johnson 9 William Henry Harrison(1773\u20131841)[30] March 4, 1841\u2013April 4, 1841[e] Whig 1840 John Tyler 10 John Tyler(1790\u20131862)[31] April 4, 1841[i]\u2013March 4, 1845 Whig[j] Unaffiliated \u2013 Vacant throughoutpresidency 11 James K. Polk(1795\u20131849)[34] March 4, 1845\u2013March 4, 1849 Democratic 1844 George M. Dallas 12 Zachary Taylor(1784\u20131850)[35] March 4, 1849\u2013July 9, 1850[e] Whig 1848 Millard Fillmore 13 Millard Fillmore(1800\u20131874)[36] July 9, 1850[k]\u2013March 4, 1853 Whig \u2013 Vacant throughoutpresidency 14 Franklin Pierce(1804\u20131869)[38] March 4, 1853\u2013March 4, 1857 Democratic 1852 William R. King[e] Vacant afterApril 18, 1853 15 James Buchanan(1791\u20131868)[39] March 4, 1857\u2013March 4, 1861 Democratic 1856 John C. Breckinridge 16 Abraham Lincoln(1809\u20131865)[40] March 4, 1861\u2013April 15, 1865[e] Republican National Union[l] 1860 1864 Hannibal Hamlin Andrew Johnson 17 Andrew Johnson(1808\u20131875)[42] April 15, 1865[m]\u2013March 4, 1869 National Union[n] Democratic \u2013 Vacant throughoutpresidency 18 Ulysses S. Grant(1822\u20131885)[43] March 4, 1869\u2013March 4, 1877 Republican 1868 1872 Schuyler Colfax Henry Wilson[e] Vacant afterNovember 22, 1875 19 Rutherford B. Hayes(1822\u20131893)[44] March 4, 1877\u2013March 4, 1881 Republican 1876 William A. Wheeler 20 James A. Garfield(1831\u20131881)[45] March 4, 1881\u2013September 19, 1881[e] Republican 1880 Chester A. Arthur 21 Chester A. Arthur(1829\u20131886)[46] September 19, 1881[o]\u2013March 4, 1885 Republican \u2013 Vacant throughoutpresidency 22 Grover Cleveland(1837\u20131908)[48] March 4, 1885\u2013March 4, 1889 Democratic 1884 Thomas A. Hendricks[e] Vacant afterNovember 25, 1885 23 Benjamin Harrison(1833\u20131901)[49] March 4, 1889\u2013March 4, 1893 Republican 1888 Levi P. Morton 24 Grover Cleveland(1837\u20131908)[48] March 4, 1893\u2013March 4, 1897 Democratic 1892 Adlai Stevenson I 25 William McKinley(1843\u20131901)[50] March 4, 1897\u2013September 14, 1901[e] Republican 1896 1900 Garret Hobart[e] Vacant afterNovember 21, 1899 Theodore Roosevelt 26 Theodore Roosevelt(1858\u20131919)[51] September 14, 1901[p]\u2013March 4, 1909 Republican \u2013 1904 Vacant throughMarch 4, 1905 Charles W. Fairbanks 27 William Howard Taft(1857\u20131930)[53] March 4, 1909\u2013March 4, 1913 Republican 1908 James S. Sherman[e] Vacant afterOctober 30, 1912 28 Woodrow Wilson(1856\u20131924)[54] March 4, 1913\u2013March 4, 1921 Democratic 1912 1916 Thomas R. Marshall 29 Warren G. Harding(1865\u20131923)[55] March 4, 1921\u2013August 2, 1923[e] Republican 1920 Calvin Coolidge 30 Calvin Coolidge(1872\u20131933)[56] August 2, 1923[q]\u2013March 4, 1929 Republican \u2013 1924 Vacant throughMarch 4, 1925 Charles G. Dawes 31 Herbert Hoover(1874\u20131964)[58] March 4, 1929\u2013March 4, 1933 Republican 1928 Charles Curtis 32 Franklin D. Roosevelt(1882\u20131945)[59] March 4, 1933\u2013April 12, 1945[e] Democratic 1932 1936 1940 1944 John Nance Garner Henry A. Wallace Harry S. Truman 33 Harry S. Truman(1884\u20131972)[60] April 12, 1945[r]\u2013January 20, 1953 Democratic \u2013 1948 Vacant throughJanuary 20, 1949 Alben W. Barkley 34 Dwight D. Eisenhower(1890\u20131969)[62] January 20, 1953\u2013January 20, 1961 Republican 1952 1956 Richard Nixon 35 John F. Kennedy(1917\u20131963)[63] January 20, 1961\u2013November \n```\nNow help me write a SQL query to store the answer into a temp view.\nGive each column a clearly descriptive name (no abbreviations).\nIf a column can be either String or Numeric, ingest it as Numeric.\nHere is an example of how to store data into the temp view spark_ai_temp_view:\n```\nCREATE OR REPLACE TEMP VIEW spark_ai_temp_view AS SELECT * FROM VALUES('Citizen Kane', 1941), ('Schindler's List', 1993) AS v1(title, year)\n```\nThe result view MUST contain following columns: ['president', 'vice_president']\nThe answer MUST contain query only and the temp view MUST be spark_ai_temp_view.\n", "value": "Here is the SQL query to store the data into a temp view:\n\n```sql\nCREATE OR REPLACE TEMP VIEW spark_ai_temp_view_631df2 AS \nSELECT * FROM VALUES\n('George Washington', 'John Adams'),\n('John Adams', 'Thomas Jefferson'),\n('Thomas Jefferson', 'Aaron Burr'),\n('James Madison', 'George Clinton'),\n('James Monroe', 'Daniel D. Tompkins'),\n('John Quincy Adams', 'John C. Calhoun'),\n('Andrew Jackson', 'John C. Calhoun'),\n('Martin Van Buren', 'Richard Mentor Johnson'),\n('William Henry Harrison', 'John Tyler'),\n('John Tyler', NULL),\n('James K. Polk', 'George M. Dallas'),\n('Zachary Taylor', 'Millard Fillmore'),\n('Millard Fillmore', NULL),\n('Franklin Pierce', 'William R. King'),\n('James Buchanan', 'John C. Breckinridge'),\n('Abraham Lincoln', 'Hannibal Hamlin'),\n('Andrew Johnson', NULL),\n('Ulysses S. Grant', 'Schuyler Colfax'),\n('Rutherford B. Hayes', 'William A. Wheeler'),\n('James A. Garfield', 'Chester A. Arthur'),\n('Chester A. Arthur', NULL),\n('Grover Cleveland', 'Thomas A. Hendricks'),\n('Benjamin Harrison', 'Levi P. Morton'),\n('Grover Cleveland', 'Adlai Stevenson I'),\n('William McKinley', 'Garret Hobart'),\n('Theodore Roosevelt', 'Charles W. Fairbanks'),\n('William Howard Taft', 'James S. Sherman'),\n('Woodrow Wilson', 'Thomas R. Marshall'),\n('Warren G. Harding', 'Calvin Coolidge'),\n('Calvin Coolidge', 'Charles G. Dawes'),\n('Herbert Hoover', 'Charles Curtis'),\n('Franklin D. Roosevelt', 'John Nance Garner'),\n('Harry S. Truman', 'Alben W. Barkley'),\n('Dwight D. Eisenhower', 'Richard Nixon'),\n('John F. Kennedy', 'Lyndon B. Johnson')\nAS v1(president, vice_president)\n```\n\nPlease note that this query only includes the presidents and vice presidents mentioned in the provided text."}
{"key": "You are an Apache Spark SQL expert, who can summary what a dataframe retrieves. Given an analyzed\nquery plan of a dataframe, you will\n1. convert the dataframe to SQL query. Note that an explain output contains plan\nnodes separated by `\\n`. Each plan node has its own expressions and expression ids.\n2. summary what the sql query retrieves.\n\n\n\nanalyzed_plan: \nGlobalLimit 100\n    +- LocalLimit 100\n       +- Sort [d_year ASC NULLS FIRST, sum_agg DESC NULLS LAST, brand_id ASC NULLS FIRST], true\n          +- Aggregate [d_year, i_brand, i_brand_id], [d_year, i_brand_id AS brand_id, i_brand AS brand, sum(ss_ext_sales_price) AS sum_agg]\n             +- Filter (((d_date_sk = ss_sold_date_sk) AND (ss_item_sk = i_item_sk)) AND ((i_manufact_id = 128) AND (d_moy = 11)))\n                +- Join Inner\n                   :- Join Inner\n                   :  :- SubqueryAlias dt\n                   :  :  +- SubqueryAlias spark_catalog.tpcds_sf1_delta.date_dim\n                   :  :     +- Relation spark_catalog.tpcds_sf1_delta.date_dim[d_date_sk,d_date_id,d_date,d_month_seq,d_week_seq,d_quarter_seq,d_year,d_dow,d_moy,d_dom,d_qoy,d_fy_year,d_fy_quarter_seq,d_fy_week_seq,d_day_name,d_quarter_name,d_holiday,d_weekend,d_following_holiday,d_first_dom,d_last_dom,d_same_day_ly,d_same_day_lq,d_current_day,... 4 more fields] parquet\n                   :  +- SubqueryAlias spark_catalog.tpcds_sf1_delta.store_sales\n                   :     +- Relation spark_catalog.tpcds_sf1_delta.store_sales[ss_sold_date_sk,ss_sold_time_sk,ss_item_sk,ss_customer_sk,ss_cdemo_sk,ss_hdemo_sk,ss_addr_sk,ss_store_sk,ss_promo_sk,ss_ticket_numberL,ss_quantity,ss_wholesale_cost,ss_list_price,ss_sales_price,ss_ext_discount_amt,ss_ext_sales_price,ss_ext_wholesale_cost,ss_ext_list_price,ss_ext_tax,ss_coupon_amt,ss_net_paid,ss_net_paid_inc_tax,ss_net_profit] parquet\n                   +- SubqueryAlias spark_catalog.tpcds_sf1_delta.item\n                      +- Relation spark_catalog.tpcds_sf1_delta.item[i_item_sk,i_item_id,i_rec_start_date,i_rec_end_date,i_item_desc,i_current_price,i_wholesale_cost,i_brand_id,i_brand,i_class_id,i_class,i_category_id,i_category,i_manufact_id,i_manufact,i_size,i_formulation,i_color,i_units,i_container,i_manager_id,i_product_name] parquet\n\nexplain: \nThe analyzed plan can be translated into the following SQL query:\n```sql\nSELECT\n  dt.d_year,\n  item.i_brand_id brand_id,\n  item.i_brand brand,\n  SUM(ss_ext_sales_price) sum_agg\nFROM date_dim dt, store_sales, item\nWHERE dt.d_date_sk = store_sales.ss_sold_date_sk\n  AND store_sales.ss_item_sk = item.i_item_sk\n  AND item.i_manufact_id = 128\n  AND dt.d_moy = 11\nGROUP BY dt.d_year, item.i_brand, item.i_brand_id\nORDER BY dt.d_year, sum_agg DESC, brand_id\nLIMIT 100\n```\nIn summary, this dataframe is retrieving the top 100 brands (specifically of items manufactured by manufacturer with id 128) with the highest total sales price for each year in the month of November. It presents the results sorted by year, total sales (in descending order), and brand id.\n\n\n\nanalyzed_plan: Project [president]\n+- Filter president IN (list [])\n   :  +- Project [vice_president]\n   :     +- SubqueryAlias b\n   :        +- SubqueryAlias spark_ai_temp_view\n   :           +- View (`spark_ai_temp_view`, [president,vice_president])\n   :              +- SubqueryAlias spark_ai_temp_view\n   :                 +- View (`spark_ai_temp_view`, [president,vice_president])\n   :                    +- Project [cast(president as string) AS president, cast(vice_president as string) AS vice_president]\n   :                       +- Project [president, vice_president]\n   :                          +- SubqueryAlias v1\n   :                             +- LocalRelation [president, vice_president]\n   +- SubqueryAlias a\n      +- SubqueryAlias spark_ai_temp_view\n         +- View (`spark_ai_temp_view`, [president,vice_president])\n            +- SubqueryAlias spark_ai_temp_view\n               +- View (`spark_ai_temp_view`, [president,vice_president])\n                  +- Project [cast(president as string) AS president, cast(vice_president as string) AS vice_president]\n                     +- Project [president, vice_president]\n                        +- SubqueryAlias v1\n                           +- LocalRelation [president, vice_president]\n\nexplain:", "value": "The analyzed plan can be translated into the following SQL query:\n```sql\nSELECT president\nFROM spark_ai_temp_view_b36cc1 a\nWHERE president IN (\n  SELECT vice_president\n  FROM spark_ai_temp_view_b36cc1 b\n)\n```\nIn summary, this dataframe is retrieving the names of the presidents who have also served as vice presidents from a temporary view named `spark_ai_temp_view_b36cc1`."}
{"key": "You are an Apache Spark SQL expert, who can summary what a dataframe retrieves. Given an analyzed\nquery plan of a dataframe, you will\n1. convert the dataframe to SQL query. Note that an explain output contains plan\nnodes separated by `\\n`. Each plan node has its own expressions and expression ids.\n2. summary what the sql query retrieves.\n\n\n\nanalyzed_plan: \nGlobalLimit 100\n    +- LocalLimit 100\n       +- Sort [d_year ASC NULLS FIRST, sum_agg DESC NULLS LAST, brand_id ASC NULLS FIRST], true\n          +- Aggregate [d_year, i_brand, i_brand_id], [d_year, i_brand_id AS brand_id, i_brand AS brand, sum(ss_ext_sales_price) AS sum_agg]\n             +- Filter (((d_date_sk = ss_sold_date_sk) AND (ss_item_sk = i_item_sk)) AND ((i_manufact_id = 128) AND (d_moy = 11)))\n                +- Join Inner\n                   :- Join Inner\n                   :  :- SubqueryAlias dt\n                   :  :  +- SubqueryAlias spark_catalog.tpcds_sf1_delta.date_dim\n                   :  :     +- Relation spark_catalog.tpcds_sf1_delta.date_dim[d_date_sk,d_date_id,d_date,d_month_seq,d_week_seq,d_quarter_seq,d_year,d_dow,d_moy,d_dom,d_qoy,d_fy_year,d_fy_quarter_seq,d_fy_week_seq,d_day_name,d_quarter_name,d_holiday,d_weekend,d_following_holiday,d_first_dom,d_last_dom,d_same_day_ly,d_same_day_lq,d_current_day,... 4 more fields] parquet\n                   :  +- SubqueryAlias spark_catalog.tpcds_sf1_delta.store_sales\n                   :     +- Relation spark_catalog.tpcds_sf1_delta.store_sales[ss_sold_date_sk,ss_sold_time_sk,ss_item_sk,ss_customer_sk,ss_cdemo_sk,ss_hdemo_sk,ss_addr_sk,ss_store_sk,ss_promo_sk,ss_ticket_numberL,ss_quantity,ss_wholesale_cost,ss_list_price,ss_sales_price,ss_ext_discount_amt,ss_ext_sales_price,ss_ext_wholesale_cost,ss_ext_list_price,ss_ext_tax,ss_coupon_amt,ss_net_paid,ss_net_paid_inc_tax,ss_net_profit] parquet\n                   +- SubqueryAlias spark_catalog.tpcds_sf1_delta.item\n                      +- Relation spark_catalog.tpcds_sf1_delta.item[i_item_sk,i_item_id,i_rec_start_date,i_rec_end_date,i_item_desc,i_current_price,i_wholesale_cost,i_brand_id,i_brand,i_class_id,i_class,i_category_id,i_category,i_manufact_id,i_manufact,i_size,i_formulation,i_color,i_units,i_container,i_manager_id,i_product_name] parquet\n\nexplain: \nThe analyzed plan can be translated into the following SQL query:\n```sql\nSELECT\n  dt.d_year,\n  item.i_brand_id brand_id,\n  item.i_brand brand,\n  SUM(ss_ext_sales_price) sum_agg\nFROM date_dim dt, store_sales, item\nWHERE dt.d_date_sk = store_sales.ss_sold_date_sk\n  AND store_sales.ss_item_sk = item.i_item_sk\n  AND item.i_manufact_id = 128\n  AND dt.d_moy = 11\nGROUP BY dt.d_year, item.i_brand, item.i_brand_id\nORDER BY dt.d_year, sum_agg DESC, brand_id\nLIMIT 100\n```\nIn summary, this dataframe is retrieving the top 100 brands (specifically of items manufactured by manufacturer with id 128) with the highest total sales price for each year in the month of November. It presents the results sorted by year, total sales (in descending order), and brand id.\n\n\n\nanalyzed_plan: SubqueryAlias spark_ai_temp_view\n+- View (`spark_ai_temp_view`, [president,vice_president])\n   +- Project [cast(president as string) AS president, cast(vice_president as string) AS vice_president]\n      +- Project [president, vice_president]\n         +- SubqueryAlias v1\n            +- LocalRelation [president, vice_president]\n\nexplain:", "value": "The analyzed plan can be translated into the following SQL query:\n```sql\nSELECT\n  CAST(president AS STRING) AS president,\n  CAST(vice_president AS STRING) AS vice_president\nFROM v1\n```\nIn summary, this dataframe is retrieving the president and vice president fields from the local relation 'v1' and casting them as strings. The result is then aliased as 'spark_ai_temp_view_631df2'."}
{"key": "\nThis is the documentation for a PySpark user-defined function (udf): pyspark.sql.functions.udf\n\nA udf creates a deterministic, reusable function in Spark. It can take any data type as a parameter,\nand by default returns a String (although it can return any data type).\nThe point is to reuse a function on several dataframes and SQL functions.\n\nGiven 1) input arguments, 2) a description of the udf functionality,\n3) the udf return type, and 4) the udf function name,\ngenerate and return a callable udf.\n\nReturn ONLY the callable resulting udf function (no explanation words).\nInclude any necessary import statements INSIDE the function definition.\nFor example:\ndef gen_random():\n    import random\n    return random.randint(0, 10)\n\n\n\ninput_args_types: (s: str)\ndesc: Convert string s to uppercase\nreturn_type: str\nudf_name: to_upper\noutput: \ndef to_upper(s) -> str:\n    if s is not None:\n        return s.upper()\n\n\n\n\ninput_args_types: (x: int)\ndesc: Add 1\nreturn_type: int\nudf_name: add_one\noutput: \ndef add_one(x) -> int:\n    if x is not None:\n        return x + 1\n\n\n\n\ninput_args_types: (grade_percent: float)\ninput_desc: Convert the grade percent to a letter grade using standard cutoffs\nreturn_type: str\nudf_name: convert_grades\noutput:\n\n", "value": "def convert_grades(grade_percent) -> str:\n    if grade_percent is not None:\n        if grade_percent >= 90.0:\n            return 'A'\n        elif grade_percent >= 80.0:\n            return 'B'\n        elif grade_percent >= 70.0:\n            return 'C'\n        elif grade_percent >= 60.0:\n            return 'D'\n        else:\n            return 'F'"}
{"key": "\nThis is the documentation for a PySpark user-defined function (udf): pyspark.sql.functions.udf\n\nA udf creates a deterministic, reusable function in Spark. It can take any data type as a parameter,\nand by default returns a String (although it can return any data type).\nThe point is to reuse a function on several dataframes and SQL functions.\n\nGiven 1) input arguments, 2) a description of the udf functionality,\n3) the udf return type, and 4) the udf function name,\ngenerate and return a callable udf.\n\nReturn ONLY the callable resulting udf function (no explanation words).\nInclude any necessary import statements INSIDE the function definition.\nFor example:\ndef gen_random():\n    import random\n    return random.randint(0, 10)\n\n\n\ninput_args_types: (s: str)\ndesc: Convert string s to uppercase\nreturn_type: str\nudf_name: to_upper\noutput: \ndef to_upper(s) -> str:\n    if s is not None:\n        return s.upper()\n\n\n\n\ninput_args_types: (x: int)\ndesc: Add 1\nreturn_type: int\nudf_name: add_one\noutput: \ndef add_one(x) -> int:\n    if x is not None:\n        return x + 1\n\n\n\n\ninput_args_types: (grade_percent: float)\ninput_desc: Convert the grade percent to a letter grade using standard cutoffs\nreturn_type: str\nudf_name: convert_grades1\noutput:\n\n", "value": "def convert_grades1(grade_percent) -> str:\n    if grade_percent is not None:\n        if grade_percent >= 90:\n            return 'A'\n        elif grade_percent >= 80:\n            return 'B'\n        elif grade_percent >= 70:\n            return 'C'\n        elif grade_percent >= 60:\n            return 'D'\n        else:\n            return 'F'"}
{"key": "\nThis is the documentation for a PySpark user-defined function (udf): pyspark.sql.functions.udf\n\nA udf creates a deterministic, reusable function in Spark. It can take any data type as a parameter,\nand by default returns a String (although it can return any data type).\nThe point is to reuse a function on several dataframes and SQL functions.\n\nGiven 1) input arguments, 2) a description of the udf functionality,\n3) the udf return type, and 4) the udf function name,\ngenerate and return a callable udf.\n\nReturn ONLY the callable resulting udf function (no explanation words).\nInclude any necessary import statements INSIDE the function definition.\nFor example:\ndef gen_random():\n    import random\n    return random.randint(0, 10)\n\n\n\ninput_args_types: (s: str)\ndesc: Convert string s to uppercase\nreturn_type: str\nudf_name: to_upper\noutput: \ndef to_upper(s) -> str:\n    if s is not None:\n        return s.upper()\n\n\n\n\ninput_args_types: (x: int)\ndesc: Add 1\nreturn_type: int\nudf_name: add_one\noutput: \ndef add_one(x) -> int:\n    if x is not None:\n        return x + 1\n\n\n\n\ninput_args_types: (grade_percent: float)\ninput_desc: Convert the grade percent to a letter grade using standard cutoffs\nreturn_type: str\nudf_name: convert_grades2\noutput:\n\n", "value": "def convert_grades2(grade_percent) -> str:\n    if grade_percent is not None:\n        if grade_percent >= 90:\n            return 'A'\n        elif grade_percent >= 80:\n            return 'B'\n        elif grade_percent >= 70:\n            return 'C'\n        elif grade_percent >= 60:\n            return 'D'\n        else:\n            return 'F'"}
{"key": "Given the following question:\n```\nFull-Year 2022 National Auto Sales By Brand\n```\nI got the following answer from a web page:\n```\nFull-Year 2022 National Auto Sales By Brand <img src=\"https://data.adxcel-ec2.com/pixel/?ad_log=referer&amp;action=lead&amp;pixid=b719b86c-f9d4-4c28-a8a8-135a5ff2099d\" width=\"1\" height=\"1\" border=\"0\"> Search Create Account Login CarPro You have a friend. Listen Live Buy a Car Find a CarPro Friend Find a Car Sell Your Car Car Buying Resources Car Reviews FAQs News Laura's Auto News Radio Show Radio Schedule Radio Blog Dealer True Stories CarPro Radio Show Podcast Driving N Heels Podcast CarPro Radio Show Newsletter Listen Live Menu News, Auto Sales Full-Year 2022 National Auto Sales By Brand Written by Jerry Reynolds January 12, 2023 Share: Facebook Twitter LinkedIn Email It was a challenging year for the auto industry, primarily due to the microchip shortages, and certainly rising interest rates did not help. There was also a noticeable lack of incentives from the automakers, and lease deals were not nearly as good as in years past. December showed some sparks of life for many car companies, as sales rose 7.2%, but not enough to put the sales numbers over the 14 million mark, making 2022 sales the lowest since 2011. General Motors regained the #1 sales leadership spot, wrestling it away from Toyota, which was #1 in 2021. Ford F-Series trucks retained the title of #1 truck in America for 46 straight years and the #1 selling vehicle overall for 41 straight years. Here are your winners and losers by brand for the full year of 2022 and how the numbers fared versus the year of 2021: Brand 2022 U.S. Sales VS 2021 1. Toyota 1,849,751 Down 9% 2. Ford 1,767,439 Down 2% 3. Chevrolet 1,502,389 Up 6% 4. Honda 881,201 Down 33% 5. Hyundai 724,265 Down 2% 6. Kia 693,549 Down 1% 7. Jeep 684,612 Down 12% 8. Nissan 682,731 Down 25% 9. Subaru 556,581 Down 5% 10. Ram Trucks 545,194 Down 16% 11. GMC 517,649 Up 7% 12. Mercedes-Benz 350,949 Up 7% 13. BMW 332,388 Down 1% 14. Volkswagen 301,069 Down 20% 15. Mazda 294,908 Down 11% 16. Lexus 258,704 Down 15% 17. Dodge 190,793 Down 12% 18. Audi 186,875 Down 5% 19. Cadillac 134,726 Up 14% 20. Chrysler 112,713 Down 2% 21. Buick 103,519 Down 42% 22. Acura 102,306 Down 35% 23. Volvo 102,038 Down 16% 24. Mitsubishi 102,037 Down 16% 25. Lincoln 83,486 Down 4% 26. Porsche 70,065 Flat 27. Genesis 56,410 Up 14% 28. INFINITI 46,619 Down 20% 29. MINI 29,504 Down 1% 30. Alfa Romeo 12,845 Down 30% 31. Maserati 6,413 Down 10% 32. Bentley 3,975 FLAT 33. Lamborghini 3,134 Up 3% 34. Fiat 915 Down 61% 35. McLaren 840 Down 35% 36. Rolls-Royce 460 Up 7% Note: Jaguar and Land Rover have not reported 2022 sales. Also, the all-electric makes like Tesla, Lucid, Karma, and Polestar do not report sales, only how many vehicles were produced, but that is not a reflection of actual sales since we don\u2019t know how many were built, but not sold. Photo Credit: Toyota. Share: Facebook Twitter LinkedIn Email Jerry Reynolds From police officer to top-selling Ford dealer to on-air car expert, Jerry helms our weekly radio show. Since selling his dealerships in 2006, Jerry has pursued his top three passions: helping consumers have a great car buying experience, supporting the military and first responders, being a loyal servant to his dog! While Jerry admits to hitting the pedal to the metal on test drives, it's all the service of finding out just how fast he can go from 0 to 60. Share On Facebook Share On Twitter Recent Posts Crime Wave: Two Vehicles Stolen Every Minute Read Post Summer Road Trip Checklist For Your Car Read Post CarPro Follow us on Facebook Follow us on Twitter Follow us on Youtube Follow us on Instagram Find a CarPro Friend Find a Car Radio Show About Us Why CarPro FAQs News Car Reviews Laura's Auto News Radio Show Newsletter Website Help Email the CarPro Media Company Inquiry Become a Radio Partner Become a Certified CarPro \u00a92023 CarPro Privacy Policy Terms Of Use Accessibility Statement CarPro requires our Certified Dealers to meet certain customer service requirements in accordance with our Certification Process and Agreement. CarPro does not broker, sell, or lease vehicles. All vehicles shown on this website are offered for sale by licensed motor vehicle dealers, unless where otherwise noted. Used vehicles are subject to prior sale. By accessing this website, you agree to the CarPro Terms of Service and Privacy Policy. We strive to update our website in a timely manner however CarPro cannot guarantee that the inventory shown will be available at the dealership. We are not responsible for typographical and other errors, including data transmissions or software errors that may appear on the site. If the posted price, incentive, offer or other service is incorrect due to typographical or other error we will only be responsible for honoring the correct price, incentive or offer. We make every effort to provide you the most accurate, up-to-the-minute information however when you are ready to purchase products or services, it is your responsibility to verify with us that all details listed are accurate. Prices include all applicable rebates.\n```\nNow help me write a SQL query to store the answer into a temp view.\nGive each column a clearly descriptive name (no abbreviations).\nIf a column can be either String or Numeric, ingest it as Numeric.\nHere is an example of how to store data into the temp view spark_ai_temp_view:\n```\nCREATE OR REPLACE TEMP VIEW spark_ai_temp_view AS SELECT * FROM VALUES('Citizen Kane', 1941), ('Schindler's List', 1993) AS v1(title, year)\n```\n\nThe answer MUST contain query only and the temp view MUST be spark_ai_temp_view.\n", "value": "Here is the SQL query to store the data into the temp view spark_ai_temp_view_50997f:\n\n```sql\nCREATE OR REPLACE TEMP VIEW spark_ai_temp_view_50997f AS SELECT * FROM VALUES\n('Toyota', 1849751, -9),\n('Ford', 1767439, -2),\n('Chevrolet', 1502389, 6),\n('Honda', 881201, -33),\n('Hyundai', 724265, -2),\n('Kia', 693549, -1),\n('Jeep', 684612, -12),\n('Nissan', 682731, -25),\n('Subaru', 556581, -5),\n('Ram Trucks', 545194, -16),\n('GMC', 517649, 7),\n('Mercedes-Benz', 350949, 7),\n('BMW', 332388, -1),\n('Volkswagen', 301069, -20),\n('Mazda', 294908, -11),\n('Lexus', 258704, -15),\n('Dodge', 190793, -12),\n('Audi', 186875, -5),\n('Cadillac', 134726, 14),\n('Chrysler', 112713, -2),\n('Buick', 103519, -42),\n('Acura', 102306, -35),\n('Volvo', 102038, -16),\n('Mitsubishi', 102037, -16),\n('Lincoln', 83486, -4),\n('Porsche', 70065, 0),\n('Genesis', 56410, 14),\n('INFINITI', 46619, -20),\n('MINI', 29504, -1),\n('Alfa Romeo', 12845, -30),\n('Maserati', 6413, -10),\n('Bentley', 3975, 0),\n('Lamborghini', 3134, 3),\n('Fiat', 915, -61),\n('McLaren', 840, -35),\n('Rolls-Royce', 460, 7)\nAS v1(Brand, US_Sales_2022, Sales_Change_Percentage)\n```\n\nThis query creates a temporary view named spark_ai_temp_view_50997f with three columns: Brand, US_Sales_2022, and Sales_Change_Percentage. The VALUES clause is used to populate the view with the data provided in the question."}
